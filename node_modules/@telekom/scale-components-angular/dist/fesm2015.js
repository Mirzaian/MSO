import { __decorate, __metadata } from 'tslib';
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, Directive, HostListener, NgModule } from '@angular/core';
import { fromEvent } from 'rxjs';
import { defineCustomElements } from '@telekom/scale-components/loader';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const proxyInputs = (/**
 * @param {?} Cmp
 * @param {?} inputs
 * @return {?}
 */
(Cmp, inputs) => {
    /** @type {?} */
    const Prototype = Cmp.prototype;
    inputs.forEach((/**
     * @param {?} item
     * @return {?}
     */
    (item) => {
        Object.defineProperty(Prototype, item, {
            /**
             * @return {?}
             */
            get() {
                return this.el[item];
            },
            /**
             * @param {?} val
             * @return {?}
             */
            set(val) {
                this.z.runOutsideAngular((/**
                 * @return {?}
                 */
                () => (this.el[item] = val)));
            },
        });
    }));
});
/** @type {?} */
const proxyMethods = (/**
 * @param {?} Cmp
 * @param {?} methods
 * @return {?}
 */
(Cmp, methods) => {
    /** @type {?} */
    const Prototype = Cmp.prototype;
    methods.forEach((/**
     * @param {?} methodName
     * @return {?}
     */
    (methodName) => {
        Prototype[methodName] = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            const args = arguments;
            return this.z.runOutsideAngular((/**
             * @return {?}
             */
            () => this.el[methodName].apply(this.el, args)));
        });
    }));
});
/** @type {?} */
const proxyOutputs = (/**
 * @param {?} instance
 * @param {?} el
 * @param {?} events
 * @return {?}
 */
(instance, el, events) => {
    events.forEach((/**
     * @param {?} eventName
     * @return {?}
     */
    (eventName) => (instance[eventName] = fromEvent(el, eventName))));
});
// tslint:disable-next-line: only-arrow-functions
/**
 * @param {?} opts
 * @return {?}
 */
function ProxyCmp(opts) {
    /** @type {?} */
    const decorator = (/**
     * @param {?} cls
     * @return {?}
     */
    function (cls) {
        if (opts.inputs) {
            proxyInputs(cls, opts.inputs);
        }
        if (opts.methods) {
            proxyMethods(cls, opts.methods);
        }
        return cls;
    });
    return decorator;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
let AppLogo = class AppLogo {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AppLogo.decorators = [
    { type: Component, args: [{
                selector: 'app-logo',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['claim', 'claimLang', 'color', 'focusable', 'href', 'logoTitle']
            },] },
];
/** @nocollapse */
AppLogo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AppLogo = __decorate([
    ProxyCmp({
        inputs: ['claim', 'claimLang', 'color', 'focusable', 'href', 'logoTitle']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], AppLogo);
let AppMegaMenu = class AppMegaMenu {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AppMegaMenu.decorators = [
    { type: Component, args: [{
                selector: 'app-mega-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['active', 'activeRouteId', 'hide', 'isActive', 'navigation']
            },] },
];
/** @nocollapse */
AppMegaMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AppMegaMenu = __decorate([
    ProxyCmp({
        inputs: ['active', 'activeRouteId', 'hide', 'isActive', 'navigation']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], AppMegaMenu);
let AppNavigationMainMobile = class AppNavigationMainMobile {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeMenu']);
    }
};
AppNavigationMainMobile.decorators = [
    { type: Component, args: [{
                selector: 'app-navigation-main-mobile',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['activeRouteId', 'hide', 'navigation'],
                outputs: ['closeMenu']
            },] },
];
/** @nocollapse */
AppNavigationMainMobile.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AppNavigationMainMobile = __decorate([
    ProxyCmp({
        inputs: ['activeRouteId', 'hide', 'navigation']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], AppNavigationMainMobile);
let AppNavigationSectorMobile = class AppNavigationSectorMobile {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AppNavigationSectorMobile.decorators = [
    { type: Component, args: [{
                selector: 'app-navigation-sector-mobile',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['activeSectorId', 'hide', 'navigation']
            },] },
];
/** @nocollapse */
AppNavigationSectorMobile.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AppNavigationSectorMobile = __decorate([
    ProxyCmp({
        inputs: ['activeSectorId', 'hide', 'navigation']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], AppNavigationSectorMobile);
let AppNavigationUserMenu = class AppNavigationUserMenu {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeMenu']);
    }
};
AppNavigationUserMenu.decorators = [
    { type: Component, args: [{
                selector: 'app-navigation-user-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['hide', 'navigation'],
                outputs: ['closeMenu']
            },] },
];
/** @nocollapse */
AppNavigationUserMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AppNavigationUserMenu = __decorate([
    ProxyCmp({
        inputs: ['hide', 'navigation']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], AppNavigationUserMenu);
let ScaleAccordion = class ScaleAccordion {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleAccordion.decorators = [
    { type: Component, args: [{
                selector: 'scale-accordion',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['dependent', 'expanded', 'headingLevel', 'iconLocation', 'styles']
            },] },
];
/** @nocollapse */
ScaleAccordion.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleAccordion = __decorate([
    ProxyCmp({
        inputs: ['dependent', 'expanded', 'headingLevel', 'iconLocation', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleAccordion);
let ScaleAlert = class ScaleAlert {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleAlert.decorators = [
    { type: Component, args: [{
                selector: 'scale-alert',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['headline', 'icon', 'opened', 'size', 'styles', 'timeout', 'variant']
            },] },
];
/** @nocollapse */
ScaleAlert.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleAlert = __decorate([
    ProxyCmp({
        inputs: ['headline', 'icon', 'opened', 'size', 'styles', 'timeout', 'variant'],
        methods: ['open']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleAlert);
let ScaleAppFooter = class ScaleAppFooter {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleAppFooter.decorators = [
    { type: Component, args: [{
                selector: 'scale-app-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['claimLang', 'copyright', 'footerNavigation', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'styles', 'variant']
            },] },
];
/** @nocollapse */
ScaleAppFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleAppFooter = __decorate([
    ProxyCmp({
        inputs: ['claimLang', 'copyright', 'footerNavigation', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'styles', 'variant']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleAppFooter);
let ScaleAppHeader = class ScaleAppHeader {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleAppHeader.decorators = [
    { type: Component, args: [{
                selector: 'scale-app-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['activeRouteId', 'activeSectorId', 'addonNavigation', 'claimLang', 'iconNavigation', 'isMegaMenuVisible', 'isMobileMenuVisible', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'mainNavigation', 'megaMenuVisible', 'mobileMenuVisible', 'portalName', 'sectorNavigation', 'sticky', 'userNavigation']
            },] },
];
/** @nocollapse */
ScaleAppHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleAppHeader = __decorate([
    ProxyCmp({
        inputs: ['activeRouteId', 'activeSectorId', 'addonNavigation', 'claimLang', 'iconNavigation', 'isMegaMenuVisible', 'isMobileMenuVisible', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'mainNavigation', 'megaMenuVisible', 'mobileMenuVisible', 'portalName', 'sectorNavigation', 'sticky', 'userNavigation']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleAppHeader);
let ScaleAppShell = class ScaleAppShell {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleAppShell.decorators = [
    { type: Component, args: [{
                selector: 'scale-app-shell',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['activeRouteId', 'activeSectorId', 'addonNavigation', 'claimLang', 'iconNavigation', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'mainNavigation', 'portalName', 'sectorNavigation', 'sticky', 'styles', 'userNavigation']
            },] },
];
/** @nocollapse */
ScaleAppShell.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleAppShell = __decorate([
    ProxyCmp({
        inputs: ['activeRouteId', 'activeSectorId', 'addonNavigation', 'claimLang', 'iconNavigation', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'mainNavigation', 'portalName', 'sectorNavigation', 'sticky', 'styles', 'userNavigation']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleAppShell);
let ScaleBreadcrumb = class ScaleBreadcrumb {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleBreadcrumb.decorators = [
    { type: Component, args: [{
                selector: 'scale-breadcrumb',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['separator', 'styles']
            },] },
];
/** @nocollapse */
ScaleBreadcrumb.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleBreadcrumb = __decorate([
    ProxyCmp({
        inputs: ['separator', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleBreadcrumb);
let ScaleButton = class ScaleButton {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleButton.decorators = [
    { type: Component, args: [{
                selector: 'scale-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'download', 'href', 'iconOnly', 'iconPosition', 'innerTabindex', 'name', 'size', 'styles', 'target', 'type', 'value', 'variant']
            },] },
];
/** @nocollapse */
ScaleButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'download', 'href', 'iconOnly', 'iconPosition', 'innerTabindex', 'name', 'size', 'styles', 'target', 'type', 'value', 'variant'],
        methods: ['setFocus']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleButton);
let ScaleCallout = class ScaleCallout {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleCallout.decorators = [
    { type: Component, args: [{
                selector: 'scale-callout',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['asterisk', 'rotation', 'size', 'variant']
            },] },
];
/** @nocollapse */
ScaleCallout.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleCallout = __decorate([
    ProxyCmp({
        inputs: ['asterisk', 'rotation', 'size', 'variant']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleCallout);
let ScaleCard = class ScaleCard {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleCard.decorators = [
    { type: Component, args: [{
                selector: 'scale-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'rel', 'styles', 'target', 'to']
            },] },
];
/** @nocollapse */
ScaleCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleCard = __decorate([
    ProxyCmp({
        inputs: ['label', 'rel', 'styles', 'target', 'to']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleCard);
let ScaleCarousel = class ScaleCarousel {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleCarousel.decorators = [
    { type: Component, args: [{
                selector: 'scale-carousel',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['styles', 'vertical']
            },] },
];
/** @nocollapse */
ScaleCarousel.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleCarousel = __decorate([
    ProxyCmp({
        inputs: ['styles', 'vertical']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleCarousel);
let ScaleChartStackCard = class ScaleChartStackCard {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleChartStackCard.decorators = [
    { type: Component, args: [{
                selector: 'scale-chart-stack-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['data', 'heading']
            },] },
];
/** @nocollapse */
ScaleChartStackCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleChartStackCard = __decorate([
    ProxyCmp({
        inputs: ['data', 'heading']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleChartStackCard);
let ScaleCheckbox = class ScaleCheckbox {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange']);
    }
};
ScaleCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'scale-checkbox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['ariaLabelCheckbox', 'checked', 'disabled', 'helperText', 'hideLabel', 'indeterminate', 'inputId', 'invalid', 'label', 'name', 'status', 'styles', 'value'],
                outputs: ['scale-change', 'scaleChange']
            },] },
];
/** @nocollapse */
ScaleCheckbox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleCheckbox = __decorate([
    ProxyCmp({
        inputs: ['ariaLabelCheckbox', 'checked', 'disabled', 'helperText', 'hideLabel', 'indeterminate', 'inputId', 'invalid', 'label', 'name', 'status', 'styles', 'value']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleCheckbox);
let ScaleCheckboxGroup = class ScaleCheckboxGroup {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleCheckboxGroup.decorators = [
    { type: Component, args: [{
                selector: 'scale-checkbox-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['ariaLabelCheckboxGroup', 'helperText', 'inputId', 'invalid', 'label', 'name', 'selectText', 'status', 'styles', 'unselectText', 'value']
            },] },
];
/** @nocollapse */
ScaleCheckboxGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleCheckboxGroup = __decorate([
    ProxyCmp({
        inputs: ['ariaLabelCheckboxGroup', 'helperText', 'inputId', 'invalid', 'label', 'name', 'selectText', 'status', 'styles', 'unselectText', 'value']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleCheckboxGroup);
let ScaleCollapsible = class ScaleCollapsible {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-expand', 'scaleExpand']);
    }
};
ScaleCollapsible.decorators = [
    { type: Component, args: [{
                selector: 'scale-collapsible',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['expanded', 'headingLevel', 'iconLocation', 'styles'],
                outputs: ['scale-expand', 'scaleExpand']
            },] },
];
/** @nocollapse */
ScaleCollapsible.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleCollapsible = __decorate([
    ProxyCmp({
        inputs: ['expanded', 'headingLevel', 'iconLocation', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleCollapsible);
let ScaleDataGrid = class ScaleDataGrid {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-edit', 'scaleEdit', 'scale-sort', 'scaleSort']);
    }
};
ScaleDataGrid.decorators = [
    { type: Component, args: [{
                selector: 'scale-data-grid',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['fields', 'freezeHeader', 'heading', 'height', 'hideBorder', 'hideHeader', 'hideInfo', 'hideMenu', 'numbered', 'pageSize', 'rows', 'selectable', 'selection', 'shadeAlternate', 'styles', 'visible'],
                outputs: ['scale-edit', 'scaleEdit', 'scale-sort', 'scaleSort']
            },] },
];
/** @nocollapse */
ScaleDataGrid.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleDataGrid = __decorate([
    ProxyCmp({
        inputs: ['fields', 'freezeHeader', 'heading', 'height', 'hideBorder', 'hideHeader', 'hideInfo', 'hideMenu', 'numbered', 'pageSize', 'rows', 'selectable', 'selection', 'shadeAlternate', 'styles', 'visible']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleDataGrid);
let ScaleDatePicker = class ScaleDatePicker {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange', 'scale-blur', 'scaleBlur', 'scale-focus', 'scaleFocus']);
    }
};
ScaleDatePicker.decorators = [
    { type: Component, args: [{
                selector: 'scale-date-picker',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['dateAdapter', 'direction', 'disabled', 'firstDayOfWeek', 'helperText', 'identifier', 'invalid', 'label', 'localization', 'max', 'min', 'name', 'popupTitle', 'required', 'role', 'size', 'status', 'styles', 'value'],
                outputs: ['scale-change', 'scaleChange', 'scale-blur', 'scaleBlur', 'scale-focus', 'scaleFocus']
            },] },
];
/** @nocollapse */
ScaleDatePicker.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleDatePicker = __decorate([
    ProxyCmp({
        inputs: ['dateAdapter', 'direction', 'disabled', 'firstDayOfWeek', 'helperText', 'identifier', 'invalid', 'label', 'localization', 'max', 'min', 'name', 'popupTitle', 'required', 'role', 'size', 'status', 'styles', 'value'],
        methods: ['setFocus', 'show', 'hide']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleDatePicker);
let ScaleDivider = class ScaleDivider {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleDivider.decorators = [
    { type: Component, args: [{
                selector: 'scale-divider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['styles', 'vertical']
            },] },
];
/** @nocollapse */
ScaleDivider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleDivider = __decorate([
    ProxyCmp({
        inputs: ['styles', 'vertical']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleDivider);
let ScaleDropdown = class ScaleDropdown {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeydown']);
    }
};
ScaleDropdown.decorators = [
    { type: Component, args: [{
                selector: 'scale-dropdown',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['controlled', 'disabled', 'helperText', 'inputId', 'invalid', 'label', 'multiple', 'name', 'required', 'size', 'status', 'styles', 'transparent', 'value', 'visibleSize'],
                outputs: ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeydown']
            },] },
];
/** @nocollapse */
ScaleDropdown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleDropdown = __decorate([
    ProxyCmp({
        inputs: ['controlled', 'disabled', 'helperText', 'inputId', 'invalid', 'label', 'multiple', 'name', 'required', 'size', 'status', 'styles', 'transparent', 'value', 'visibleSize']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleDropdown);
let ScaleGrid = class ScaleGrid {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleGrid.decorators = [
    { type: Component, args: [{
                selector: 'scale-grid',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['columns', 'gutterX', 'gutterY', 'maxWidth', 'spacing']
            },] },
];
/** @nocollapse */
ScaleGrid.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleGrid = __decorate([
    ProxyCmp({
        inputs: ['columns', 'gutterX', 'gutterY', 'maxWidth', 'spacing']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleGrid);
let ScaleGridItem = class ScaleGridItem {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleGridItem.decorators = [
    { type: Component, args: [{
                selector: 'scale-grid-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['offset', 'size']
            },] },
];
/** @nocollapse */
ScaleGridItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleGridItem = __decorate([
    ProxyCmp({
        inputs: ['offset', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleGridItem);
let ScaleIcon = class ScaleIcon {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIcon.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'decorative', 'fill', 'focusable', 'name', 'path', 'size', 'stroke']
            },] },
];
/** @nocollapse */
ScaleIcon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIcon = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'decorative', 'fill', 'focusable', 'name', 'path', 'size', 'stroke']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIcon);
let ScaleIconActionAdd = class ScaleIconActionAdd {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionAdd.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-add',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionAdd.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionAdd = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionAdd);
let ScaleIconActionAddCard = class ScaleIconActionAddCard {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionAddCard.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-add-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionAddCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionAddCard = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionAddCard);
let ScaleIconActionAutoLogin = class ScaleIconActionAutoLogin {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionAutoLogin.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-auto-login',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionAutoLogin.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionAutoLogin = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionAutoLogin);
let ScaleIconActionBackspace = class ScaleIconActionBackspace {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionBackspace.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-backspace',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionBackspace.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionBackspace = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionBackspace);
let ScaleIconActionChangelog = class ScaleIconActionChangelog {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionChangelog.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-changelog',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionChangelog.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionChangelog = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionChangelog);
let ScaleIconActionCircleAdd = class ScaleIconActionCircleAdd {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionCircleAdd.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-circle-add',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionCircleAdd.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionCircleAdd = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionCircleAdd);
let ScaleIconActionCircleClose = class ScaleIconActionCircleClose {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionCircleClose.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-circle-close',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionCircleClose.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionCircleClose = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionCircleClose);
let ScaleIconActionClose = class ScaleIconActionClose {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionClose.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-close',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionClose.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionClose = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionClose);
let ScaleIconActionCopyPaste = class ScaleIconActionCopyPaste {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionCopyPaste.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-copy-paste',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionCopyPaste.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionCopyPaste = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionCopyPaste);
let ScaleIconActionCutPaste = class ScaleIconActionCutPaste {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionCutPaste.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-cut-paste',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionCutPaste.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionCutPaste = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionCutPaste);
let ScaleIconActionDisabledMicrophone = class ScaleIconActionDisabledMicrophone {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionDisabledMicrophone.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-disabled-microphone',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionDisabledMicrophone.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionDisabledMicrophone = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionDisabledMicrophone);
let ScaleIconActionDownload = class ScaleIconActionDownload {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionDownload.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-download',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionDownload.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionDownload = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionDownload);
let ScaleIconActionDragAndDrop = class ScaleIconActionDragAndDrop {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionDragAndDrop.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-drag-and-drop',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionDragAndDrop.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionDragAndDrop = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionDragAndDrop);
let ScaleIconActionEdit = class ScaleIconActionEdit {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionEdit.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-edit',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionEdit.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionEdit = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionEdit);
let ScaleIconActionFastForward = class ScaleIconActionFastForward {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionFastForward.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-fast-forward',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionFastForward.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionFastForward = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionFastForward);
let ScaleIconActionFavorite = class ScaleIconActionFavorite {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionFavorite.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-favorite',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionFavorite.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionFavorite = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionFavorite);
let ScaleIconActionFilter = class ScaleIconActionFilter {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionFilter.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-filter',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionFilter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionFilter = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionFilter);
let ScaleIconActionForward = class ScaleIconActionForward {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionForward.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-forward',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionForward.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionForward = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionForward);
let ScaleIconActionFullScreen = class ScaleIconActionFullScreen {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionFullScreen.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-full-screen',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionFullScreen.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionFullScreen = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionFullScreen);
let ScaleIconActionHidePassword = class ScaleIconActionHidePassword {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionHidePassword.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-hide-password',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionHidePassword.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionHidePassword = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionHidePassword);
let ScaleIconActionIndeterminate = class ScaleIconActionIndeterminate {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionIndeterminate.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-indeterminate',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionIndeterminate.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionIndeterminate = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionIndeterminate);
let ScaleIconActionInstall = class ScaleIconActionInstall {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionInstall.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-install',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionInstall.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionInstall = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionInstall);
let ScaleIconActionLink = class ScaleIconActionLink {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionLink.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionLink = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionLink);
let ScaleIconActionLogout = class ScaleIconActionLogout {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionLogout.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-logout',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionLogout.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionLogout = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionLogout);
let ScaleIconActionLoop = class ScaleIconActionLoop {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionLoop.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-loop',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionLoop.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionLoop = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionLoop);
let ScaleIconActionMenu = class ScaleIconActionMenu {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionMenu.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionMenu = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionMenu);
let ScaleIconActionMicrophone = class ScaleIconActionMicrophone {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionMicrophone.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-microphone',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionMicrophone.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionMicrophone = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionMicrophone);
let ScaleIconActionMinimizeScreen = class ScaleIconActionMinimizeScreen {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionMinimizeScreen.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-minimize-screen',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionMinimizeScreen.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionMinimizeScreen = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionMinimizeScreen);
let ScaleIconActionMore = class ScaleIconActionMore {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionMore.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-more',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionMore.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionMore = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionMore);
let ScaleIconActionMove = class ScaleIconActionMove {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionMove.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-move',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionMove.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionMove = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionMove);
let ScaleIconActionMute = class ScaleIconActionMute {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionMute.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-mute',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionMute.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionMute = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionMute);
let ScaleIconActionNotification = class ScaleIconActionNotification {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionNotification.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-notification',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionNotification.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionNotification = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionNotification);
let ScaleIconActionPause = class ScaleIconActionPause {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionPause.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-pause',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionPause.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionPause = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionPause);
let ScaleIconActionPin = class ScaleIconActionPin {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionPin.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-pin',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionPin.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionPin = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionPin);
let ScaleIconActionPlay = class ScaleIconActionPlay {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionPlay.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-play',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionPlay.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionPlay = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionPlay);
let ScaleIconActionPopUpWindow = class ScaleIconActionPopUpWindow {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionPopUpWindow.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-pop-up-window',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionPopUpWindow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionPopUpWindow = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionPopUpWindow);
let ScaleIconActionPrint = class ScaleIconActionPrint {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionPrint.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-print',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionPrint.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionPrint = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionPrint);
let ScaleIconActionRandom = class ScaleIconActionRandom {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionRandom.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-random',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionRandom.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionRandom = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionRandom);
let ScaleIconActionRefresh = class ScaleIconActionRefresh {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionRefresh.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-refresh',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionRefresh.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionRefresh = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionRefresh);
let ScaleIconActionRemove = class ScaleIconActionRemove {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionRemove.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-remove',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionRemove.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionRemove = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionRemove);
let ScaleIconActionRestart = class ScaleIconActionRestart {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionRestart.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-restart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionRestart.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionRestart = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionRestart);
let ScaleIconActionSearch = class ScaleIconActionSearch {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionSearch.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-search',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionSearch.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionSearch = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionSearch);
let ScaleIconActionShoppingCart = class ScaleIconActionShoppingCart {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionShoppingCart.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-shopping-cart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionShoppingCart.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionShoppingCart = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionShoppingCart);
let ScaleIconActionShowPassword = class ScaleIconActionShowPassword {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionShowPassword.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-show-password',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionShowPassword.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionShowPassword = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionShowPassword);
let ScaleIconActionSort = class ScaleIconActionSort {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionSort.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-sort',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionSort.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionSort = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionSort);
let ScaleIconActionSoundOn = class ScaleIconActionSoundOn {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionSoundOn.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-sound-on',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionSoundOn.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionSoundOn = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionSoundOn);
let ScaleIconActionStreamOn = class ScaleIconActionStreamOn {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionStreamOn.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-stream-on',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionStreamOn.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionStreamOn = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionStreamOn);
let ScaleIconActionSuccess = class ScaleIconActionSuccess {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionSuccess.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-success',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionSuccess.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionSuccess = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionSuccess);
let ScaleIconActionThumbsDown = class ScaleIconActionThumbsDown {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionThumbsDown.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-thumbs-down',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionThumbsDown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionThumbsDown = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionThumbsDown);
let ScaleIconActionThumbsUp = class ScaleIconActionThumbsUp {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionThumbsUp.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-thumbs-up',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionThumbsUp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionThumbsUp = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionThumbsUp);
let ScaleIconActionTilesAdd = class ScaleIconActionTilesAdd {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionTilesAdd.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-tiles-add',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionTilesAdd.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionTilesAdd = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionTilesAdd);
let ScaleIconActionUpload = class ScaleIconActionUpload {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionUpload.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-upload',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionUpload.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionUpload = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionUpload);
let ScaleIconActionVolumeDown = class ScaleIconActionVolumeDown {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionVolumeDown.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-volume-down',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionVolumeDown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionVolumeDown = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionVolumeDown);
let ScaleIconActionVolumeUp = class ScaleIconActionVolumeUp {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionVolumeUp.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-volume-up',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionVolumeUp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionVolumeUp = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionVolumeUp);
let ScaleIconActionZoomIn = class ScaleIconActionZoomIn {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionZoomIn.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-zoom-in',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionZoomIn.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionZoomIn = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionZoomIn);
let ScaleIconActionZoomOut = class ScaleIconActionZoomOut {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconActionZoomOut.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-action-zoom-out',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconActionZoomOut.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconActionZoomOut = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconActionZoomOut);
let ScaleIconAlertCompliance = class ScaleIconAlertCompliance {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconAlertCompliance.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-alert-compliance',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconAlertCompliance.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconAlertCompliance = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconAlertCompliance);
let ScaleIconAlertError = class ScaleIconAlertError {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconAlertError.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-alert-error',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconAlertError.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconAlertError = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconAlertError);
let ScaleIconAlertHelp = class ScaleIconAlertHelp {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconAlertHelp.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-alert-help',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconAlertHelp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconAlertHelp = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconAlertHelp);
let ScaleIconAlertImprintDataprivacy = class ScaleIconAlertImprintDataprivacy {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconAlertImprintDataprivacy.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-alert-imprint-dataprivacy',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconAlertImprintDataprivacy.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconAlertImprintDataprivacy = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconAlertImprintDataprivacy);
let ScaleIconAlertInformation = class ScaleIconAlertInformation {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconAlertInformation.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-alert-information',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconAlertInformation.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconAlertInformation = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconAlertInformation);
let ScaleIconAlertLegal = class ScaleIconAlertLegal {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconAlertLegal.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-alert-legal',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconAlertLegal.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconAlertLegal = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconAlertLegal);
let ScaleIconAlertSecurity = class ScaleIconAlertSecurity {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconAlertSecurity.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-alert-security',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconAlertSecurity.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconAlertSecurity = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconAlertSecurity);
let ScaleIconAlertSuccess = class ScaleIconAlertSuccess {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconAlertSuccess.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-alert-success',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconAlertSuccess.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconAlertSuccess = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconAlertSuccess);
let ScaleIconAlertWarning = class ScaleIconAlertWarning {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconAlertWarning.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-alert-warning',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconAlertWarning.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconAlertWarning = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconAlertWarning);
let ScaleIconCommunicationCallIncoming = class ScaleIconCommunicationCallIncoming {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconCommunicationCallIncoming.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-communication-call-incoming',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconCommunicationCallIncoming.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconCommunicationCallIncoming = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconCommunicationCallIncoming);
let ScaleIconCommunicationCallOutgoing = class ScaleIconCommunicationCallOutgoing {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconCommunicationCallOutgoing.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-communication-call-outgoing',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconCommunicationCallOutgoing.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconCommunicationCallOutgoing = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconCommunicationCallOutgoing);
let ScaleIconCommunicationChat = class ScaleIconCommunicationChat {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconCommunicationChat.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-communication-chat',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconCommunicationChat.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconCommunicationChat = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconCommunicationChat);
let ScaleIconCommunicationEmail = class ScaleIconCommunicationEmail {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconCommunicationEmail.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-communication-email',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconCommunicationEmail.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconCommunicationEmail = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconCommunicationEmail);
let ScaleIconCommunicationEndCall = class ScaleIconCommunicationEndCall {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconCommunicationEndCall.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-communication-end-call',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconCommunicationEndCall.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconCommunicationEndCall = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconCommunicationEndCall);
let ScaleIconCommunicationFeedback = class ScaleIconCommunicationFeedback {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconCommunicationFeedback.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-communication-feedback',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconCommunicationFeedback.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconCommunicationFeedback = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconCommunicationFeedback);
let ScaleIconCommunicationMessage = class ScaleIconCommunicationMessage {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconCommunicationMessage.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-communication-message',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconCommunicationMessage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconCommunicationMessage = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconCommunicationMessage);
let ScaleIconCommunicationPhoneNumber = class ScaleIconCommunicationPhoneNumber {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconCommunicationPhoneNumber.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-communication-phone-number',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconCommunicationPhoneNumber.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconCommunicationPhoneNumber = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconCommunicationPhoneNumber);
let ScaleIconCommunicationRecipient = class ScaleIconCommunicationRecipient {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconCommunicationRecipient.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-communication-recipient',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconCommunicationRecipient.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconCommunicationRecipient = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconCommunicationRecipient);
let ScaleIconCommunicationVoiceMessage = class ScaleIconCommunicationVoiceMessage {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconCommunicationVoiceMessage.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-communication-voice-message',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconCommunicationVoiceMessage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconCommunicationVoiceMessage = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconCommunicationVoiceMessage);
let ScaleIconContentAchievement = class ScaleIconContentAchievement {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentAchievement.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-achievement',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentAchievement.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentAchievement = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentAchievement);
let ScaleIconContentApplications = class ScaleIconContentApplications {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentApplications.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-applications',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentApplications.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentApplications = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentApplications);
let ScaleIconContentBiometric = class ScaleIconContentBiometric {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentBiometric.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-biometric',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentBiometric.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentBiometric = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentBiometric);
let ScaleIconContentBookmark = class ScaleIconContentBookmark {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentBookmark.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-bookmark',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentBookmark.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentBookmark = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentBookmark);
let ScaleIconContentCalendar = class ScaleIconContentCalendar {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentCalendar.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-calendar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentCalendar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentCalendar = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentCalendar);
let ScaleIconContentClipboard = class ScaleIconContentClipboard {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentClipboard.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-clipboard',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentClipboard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentClipboard = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentClipboard);
let ScaleIconContentClock = class ScaleIconContentClock {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentClock.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-clock',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentClock.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentClock = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentClock);
let ScaleIconContentCreditCard = class ScaleIconContentCreditCard {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentCreditCard.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-credit-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentCreditCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentCreditCard = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentCreditCard);
let ScaleIconContentDelivery = class ScaleIconContentDelivery {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentDelivery.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-delivery',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentDelivery.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentDelivery = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentDelivery);
let ScaleIconContentDigitalBanking = class ScaleIconContentDigitalBanking {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentDigitalBanking.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-digital-banking',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentDigitalBanking.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentDigitalBanking = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentDigitalBanking);
let ScaleIconContentDigitalMedia = class ScaleIconContentDigitalMedia {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentDigitalMedia.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-digital-media',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentDigitalMedia.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentDigitalMedia = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentDigitalMedia);
let ScaleIconContentDraftFile = class ScaleIconContentDraftFile {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentDraftFile.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-draft-file',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentDraftFile.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentDraftFile = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentDraftFile);
let ScaleIconContentESim = class ScaleIconContentESim {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentESim.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-e-sim',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentESim.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentESim = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentESim);
let ScaleIconContentEu = class ScaleIconContentEu {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentEu.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-eu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentEu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentEu = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentEu);
let ScaleIconContentFeatures = class ScaleIconContentFeatures {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentFeatures.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-features',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentFeatures.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentFeatures = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentFeatures);
let ScaleIconContentFlexibleTariffs = class ScaleIconContentFlexibleTariffs {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentFlexibleTariffs.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-flexible-tariffs',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentFlexibleTariffs.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentFlexibleTariffs = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentFlexibleTariffs);
let ScaleIconContentHeart = class ScaleIconContentHeart {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentHeart.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-heart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentHeart.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentHeart = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentHeart);
let ScaleIconContentHistory = class ScaleIconContentHistory {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentHistory.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-history',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentHistory.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentHistory = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentHistory);
let ScaleIconContentInternational = class ScaleIconContentInternational {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentInternational.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-international',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentInternational.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentInternational = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentInternational);
let ScaleIconContentInternationalSms = class ScaleIconContentInternationalSms {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentInternationalSms.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-international-sms',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentInternationalSms.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentInternationalSms = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentInternationalSms);
let ScaleIconContentInterview = class ScaleIconContentInterview {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentInterview.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-interview',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentInterview.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentInterview = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentInterview);
let ScaleIconContentKey = class ScaleIconContentKey {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentKey.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-key',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentKey.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentKey = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentKey);
let ScaleIconContentLock = class ScaleIconContentLock {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentLock.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-lock',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentLock.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentLock = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentLock);
let ScaleIconContentMediaFolder = class ScaleIconContentMediaFolder {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentMediaFolder.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-media-folder',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentMediaFolder.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentMediaFolder = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentMediaFolder);
let ScaleIconContentMoneyAt = class ScaleIconContentMoneyAt {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentMoneyAt.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-money-at',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentMoneyAt.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentMoneyAt = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentMoneyAt);
let ScaleIconContentMusic = class ScaleIconContentMusic {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentMusic.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-music',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentMusic.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentMusic = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentMusic);
let ScaleIconContentNews = class ScaleIconContentNews {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentNews.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-news',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentNews.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentNews = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentNews);
let ScaleIconContentPrepaidActivate = class ScaleIconContentPrepaidActivate {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentPrepaidActivate.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-prepaid-activate',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentPrepaidActivate.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentPrepaidActivate = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentPrepaidActivate);
let ScaleIconContentPriceTag = class ScaleIconContentPriceTag {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentPriceTag.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-price-tag',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentPriceTag.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentPriceTag = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentPriceTag);
let ScaleIconContentRss = class ScaleIconContentRss {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentRss.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-rss',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentRss.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentRss = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentRss);
let ScaleIconContentShop = class ScaleIconContentShop {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentShop.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-shop',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentShop.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentShop = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentShop);
let ScaleIconContentSignal = class ScaleIconContentSignal {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentSignal.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-signal',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentSignal.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentSignal = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentSignal);
let ScaleIconContentSimCard = class ScaleIconContentSimCard {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentSimCard.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-sim-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentSimCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentSimCard = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentSimCard);
let ScaleIconContentSmile = class ScaleIconContentSmile {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentSmile.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-smile',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentSmile.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentSmile = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentSmile);
let ScaleIconContentTariffs = class ScaleIconContentTariffs {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentTariffs.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-tariffs',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentTariffs.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentTariffs = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentTariffs);
let ScaleIconContentTransport = class ScaleIconContentTransport {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentTransport.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-transport',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentTransport.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentTransport = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentTransport);
let ScaleIconContentUnlock = class ScaleIconContentUnlock {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentUnlock.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-unlock',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentUnlock.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentUnlock = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentUnlock);
let ScaleIconContentVoucher = class ScaleIconContentVoucher {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentVoucher.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-voucher',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentVoucher.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentVoucher = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentVoucher);
let ScaleIconContentWallet = class ScaleIconContentWallet {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconContentWallet.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-content-wallet',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconContentWallet.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconContentWallet = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconContentWallet);
let ScaleIconDeviceAddDevice = class ScaleIconDeviceAddDevice {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceAddDevice.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-add-device',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceAddDevice.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceAddDevice = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceAddDevice);
let ScaleIconDeviceCamera = class ScaleIconDeviceCamera {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceCamera.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-camera',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceCamera.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceCamera = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceCamera);
let ScaleIconDeviceChangeCamera = class ScaleIconDeviceChangeCamera {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceChangeCamera.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-change-camera',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceChangeCamera.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceChangeCamera = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceChangeCamera);
let ScaleIconDeviceComputer = class ScaleIconDeviceComputer {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceComputer.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-computer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceComputer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceComputer = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceComputer);
let ScaleIconDeviceDevicePhone = class ScaleIconDeviceDevicePhone {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceDevicePhone.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-device-phone',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceDevicePhone.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceDevicePhone = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceDevicePhone);
let ScaleIconDeviceDeviceRouter = class ScaleIconDeviceDeviceRouter {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceDeviceRouter.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-device-router',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceDeviceRouter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceDeviceRouter = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceDeviceRouter);
let ScaleIconDeviceDeviceTv = class ScaleIconDeviceDeviceTv {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceDeviceTv.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-device-tv',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceDeviceTv.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceDeviceTv = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceDeviceTv);
let ScaleIconDeviceDeviceWatch = class ScaleIconDeviceDeviceWatch {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceDeviceWatch.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-device-watch',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceDeviceWatch.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceDeviceWatch = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceDeviceWatch);
let ScaleIconDeviceFixedLineServices = class ScaleIconDeviceFixedLineServices {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceFixedLineServices.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-fixed-line-services',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceFixedLineServices.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceFixedLineServices = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceFixedLineServices);
let ScaleIconDeviceMediaReceiver = class ScaleIconDeviceMediaReceiver {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceMediaReceiver.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-media-receiver',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceMediaReceiver.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceMediaReceiver = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceMediaReceiver);
let ScaleIconDeviceMobileDevicesCombination = class ScaleIconDeviceMobileDevicesCombination {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceMobileDevicesCombination.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-mobile-devices-combination',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceMobileDevicesCombination.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceMobileDevicesCombination = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceMobileDevicesCombination);
let ScaleIconDeviceMobileEquipment = class ScaleIconDeviceMobileEquipment {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceMobileEquipment.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-mobile-equipment',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceMobileEquipment.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceMobileEquipment = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceMobileEquipment);
let ScaleIconDeviceMobilePhoneInsurance = class ScaleIconDeviceMobilePhoneInsurance {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceMobilePhoneInsurance.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-mobile-phone-insurance',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceMobilePhoneInsurance.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceMobilePhoneInsurance = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceMobilePhoneInsurance);
let ScaleIconDeviceMobileServices = class ScaleIconDeviceMobileServices {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceMobileServices.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-mobile-services',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceMobileServices.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceMobileServices = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceMobileServices);
let ScaleIconDeviceNoCamera = class ScaleIconDeviceNoCamera {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceNoCamera.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-no-camera',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceNoCamera.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceNoCamera = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceNoCamera);
let ScaleIconDevicePhotoCamera = class ScaleIconDevicePhotoCamera {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDevicePhotoCamera.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-photo-camera',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDevicePhotoCamera.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDevicePhotoCamera = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDevicePhotoCamera);
let ScaleIconDeviceRemoteController = class ScaleIconDeviceRemoteController {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceRemoteController.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-remote-controller',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceRemoteController.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceRemoteController = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceRemoteController);
let ScaleIconDeviceReplacementMobilephone = class ScaleIconDeviceReplacementMobilephone {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceReplacementMobilephone.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-replacement-mobilephone',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceReplacementMobilephone.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceReplacementMobilephone = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceReplacementMobilephone);
let ScaleIconDeviceScreenRotate = class ScaleIconDeviceScreenRotate {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceScreenRotate.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-screen-rotate',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceScreenRotate.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceScreenRotate = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceScreenRotate);
let ScaleIconDeviceSmartSpeaker = class ScaleIconDeviceSmartSpeaker {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceSmartSpeaker.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-smart-speaker',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceSmartSpeaker.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceSmartSpeaker = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceSmartSpeaker);
let ScaleIconDeviceTvAndMobile = class ScaleIconDeviceTvAndMobile {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconDeviceTvAndMobile.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-device-tv-and-mobile',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconDeviceTvAndMobile.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconDeviceTvAndMobile = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconDeviceTvAndMobile);
let ScaleIconHomeHome = class ScaleIconHomeHome {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconHomeHome.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-home-home',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconHomeHome.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconHomeHome = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconHomeHome);
let ScaleIconHomeInternetAtHome = class ScaleIconHomeInternetAtHome {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconHomeInternetAtHome.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-home-internet-at-home',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconHomeInternetAtHome.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconHomeInternetAtHome = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconHomeInternetAtHome);
let ScaleIconHomeIot = class ScaleIconHomeIot {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconHomeIot.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-home-iot',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconHomeIot.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconHomeIot = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconHomeIot);
let ScaleIconHomeNoWifi = class ScaleIconHomeNoWifi {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconHomeNoWifi.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-home-no-wifi',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconHomeNoWifi.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconHomeNoWifi = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconHomeNoWifi);
let ScaleIconHomeSmarthome = class ScaleIconHomeSmarthome {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconHomeSmarthome.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-home-smarthome',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconHomeSmarthome.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconHomeSmarthome = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconHomeSmarthome);
let ScaleIconHomeWifi = class ScaleIconHomeWifi {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconHomeWifi.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-home-wifi',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconHomeWifi.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconHomeWifi = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconHomeWifi);
let ScaleIconNavigationCircleTopUp = class ScaleIconNavigationCircleTopUp {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconNavigationCircleTopUp.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-navigation-circle-top-up',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconNavigationCircleTopUp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconNavigationCircleTopUp = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconNavigationCircleTopUp);
let ScaleIconNavigationCollapseDown = class ScaleIconNavigationCollapseDown {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconNavigationCollapseDown.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-navigation-collapse-down',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconNavigationCollapseDown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconNavigationCollapseDown = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconNavigationCollapseDown);
let ScaleIconNavigationCollapseUp = class ScaleIconNavigationCollapseUp {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconNavigationCollapseUp.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-navigation-collapse-up',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconNavigationCollapseUp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconNavigationCollapseUp = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconNavigationCollapseUp);
let ScaleIconNavigationExternalLink = class ScaleIconNavigationExternalLink {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconNavigationExternalLink.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-navigation-external-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconNavigationExternalLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconNavigationExternalLink = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconNavigationExternalLink);
let ScaleIconNavigationInternalLink = class ScaleIconNavigationInternalLink {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconNavigationInternalLink.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-navigation-internal-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconNavigationInternalLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconNavigationInternalLink = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconNavigationInternalLink);
let ScaleIconNavigationLeft = class ScaleIconNavigationLeft {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconNavigationLeft.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-navigation-left',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconNavigationLeft.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconNavigationLeft = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconNavigationLeft);
let ScaleIconNavigationLocation = class ScaleIconNavigationLocation {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconNavigationLocation.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-navigation-location',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconNavigationLocation.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconNavigationLocation = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconNavigationLocation);
let ScaleIconNavigationMyLocation = class ScaleIconNavigationMyLocation {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconNavigationMyLocation.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-navigation-my-location',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconNavigationMyLocation.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconNavigationMyLocation = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconNavigationMyLocation);
let ScaleIconNavigationRight = class ScaleIconNavigationRight {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconNavigationRight.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-navigation-right',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconNavigationRight.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconNavigationRight = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconNavigationRight);
let ScaleIconNavigationStart = class ScaleIconNavigationStart {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconNavigationStart.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-navigation-start',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconNavigationStart.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconNavigationStart = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconNavigationStart);
let ScaleIconNavigationTopUp = class ScaleIconNavigationTopUp {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconNavigationTopUp.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-navigation-top-up',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconNavigationTopUp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconNavigationTopUp = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconNavigationTopUp);
let ScaleIconProcessOrderStatus = class ScaleIconProcessOrderStatus {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconProcessOrderStatus.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-process-order-status',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconProcessOrderStatus.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconProcessOrderStatus = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconProcessOrderStatus);
let ScaleIconProcessProcessing = class ScaleIconProcessProcessing {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconProcessProcessing.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-process-processing',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconProcessProcessing.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconProcessProcessing = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconProcessProcessing);
let ScaleIconServiceDevicesService = class ScaleIconServiceDevicesService {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconServiceDevicesService.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-service-devices-service',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconServiceDevicesService.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconServiceDevicesService = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconServiceDevicesService);
let ScaleIconServiceMaintanance = class ScaleIconServiceMaintanance {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconServiceMaintanance.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-service-maintanance',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconServiceMaintanance.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconServiceMaintanance = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconServiceMaintanance);
let ScaleIconServiceServices = class ScaleIconServiceServices {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconServiceServices.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-service-services',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconServiceServices.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconServiceServices = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconServiceServices);
let ScaleIconServiceSettings = class ScaleIconServiceSettings {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconServiceSettings.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-service-settings',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconServiceSettings.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconServiceSettings = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconServiceSettings);
let ScaleIconServiceSupport = class ScaleIconServiceSupport {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconServiceSupport.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-service-support',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconServiceSupport.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconServiceSupport = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconServiceSupport);
let ScaleIconTProductMagentaCloud = class ScaleIconTProductMagentaCloud {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconTProductMagentaCloud.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-t-product-magenta-cloud',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconTProductMagentaCloud.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconTProductMagentaCloud = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconTProductMagentaCloud);
let ScaleIconTProductMagentaTv = class ScaleIconTProductMagentaTv {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconTProductMagentaTv.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-t-product-magenta-tv',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconTProductMagentaTv.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconTProductMagentaTv = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconTProductMagentaTv);
let ScaleIconTProductMagentaone = class ScaleIconTProductMagentaone {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconTProductMagentaone.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-t-product-magentaone',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconTProductMagentaone.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconTProductMagentaone = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconTProductMagentaone);
let ScaleIconTProductMeasureInternetSpeed = class ScaleIconTProductMeasureInternetSpeed {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconTProductMeasureInternetSpeed.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-t-product-measure-internet-speed',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconTProductMeasureInternetSpeed.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconTProductMeasureInternetSpeed = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconTProductMeasureInternetSpeed);
let ScaleIconTProductSeamlessConnectivity = class ScaleIconTProductSeamlessConnectivity {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconTProductSeamlessConnectivity.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-t-product-seamless-connectivity',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconTProductSeamlessConnectivity.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconTProductSeamlessConnectivity = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconTProductSeamlessConnectivity);
let ScaleIconTProductTelekomShopB = class ScaleIconTProductTelekomShopB {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconTProductTelekomShopB.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-t-product-telekom-shop-b',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconTProductTelekomShopB.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconTProductTelekomShopB = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconTProductTelekomShopB);
let ScaleIconTProductUsage = class ScaleIconTProductUsage {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconTProductUsage.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-t-product-usage',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconTProductUsage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconTProductUsage = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconTProductUsage);
let ScaleIconUserFileAnalytics = class ScaleIconUserFileAnalytics {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileAnalytics.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-analytics',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileAnalytics.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileAnalytics = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileAnalytics);
let ScaleIconUserFileAttachment = class ScaleIconUserFileAttachment {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileAttachment.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-attachment',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileAttachment.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileAttachment = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileAttachment);
let ScaleIconUserFileAudioFile = class ScaleIconUserFileAudioFile {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileAudioFile.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-audio-file',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileAudioFile.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileAudioFile = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileAudioFile);
let ScaleIconUserFileBilling = class ScaleIconUserFileBilling {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileBilling.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-billing',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileBilling.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileBilling = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileBilling);
let ScaleIconUserFileBussinesUsers = class ScaleIconUserFileBussinesUsers {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileBussinesUsers.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-bussines-users',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileBussinesUsers.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileBussinesUsers = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileBussinesUsers);
let ScaleIconUserFileCommunities = class ScaleIconUserFileCommunities {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileCommunities.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-communities',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileCommunities.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileCommunities = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileCommunities);
let ScaleIconUserFileContacts = class ScaleIconUserFileContacts {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileContacts.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-contacts',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileContacts.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileContacts = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileContacts);
let ScaleIconUserFileContracts = class ScaleIconUserFileContracts {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileContracts.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-contracts',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileContracts.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileContracts = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileContracts);
let ScaleIconUserFileFamilies = class ScaleIconUserFileFamilies {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileFamilies.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-families',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileFamilies.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileFamilies = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileFamilies);
let ScaleIconUserFileHandshake = class ScaleIconUserFileHandshake {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileHandshake.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-handshake',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileHandshake.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileHandshake = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileHandshake);
let ScaleIconUserFileIdCard = class ScaleIconUserFileIdCard {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileIdCard.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-id-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileIdCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileIdCard = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileIdCard);
let ScaleIconUserFileImageFile = class ScaleIconUserFileImageFile {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileImageFile.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-image-file',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileImageFile.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileImageFile = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileImageFile);
let ScaleIconUserFileLogout = class ScaleIconUserFileLogout {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileLogout.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-logout',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileLogout.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileLogout = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileLogout);
let ScaleIconUserFilePdfFile = class ScaleIconUserFilePdfFile {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFilePdfFile.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-pdf-file',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFilePdfFile.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFilePdfFile = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFilePdfFile);
let ScaleIconUserFileSwitchUsers = class ScaleIconUserFileSwitchUsers {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileSwitchUsers.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-switch-users',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileSwitchUsers.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileSwitchUsers = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileSwitchUsers);
let ScaleIconUserFileUser = class ScaleIconUserFileUser {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileUser.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-user',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileUser.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileUser = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileUser);
let ScaleIconUserFileVideos = class ScaleIconUserFileVideos {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconUserFileVideos.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-user-file-videos',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconUserFileVideos.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconUserFileVideos = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconUserFileVideos);
let ScaleIconWeatherCloudy = class ScaleIconWeatherCloudy {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherCloudy.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-cloudy',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherCloudy.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherCloudy = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherCloudy);
let ScaleIconWeatherCloudyRain = class ScaleIconWeatherCloudyRain {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherCloudyRain.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-cloudy-rain',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherCloudyRain.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherCloudyRain = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherCloudyRain);
let ScaleIconWeatherCloudySleet = class ScaleIconWeatherCloudySleet {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherCloudySleet.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-cloudy-sleet',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherCloudySleet.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherCloudySleet = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherCloudySleet);
let ScaleIconWeatherCloudySnow = class ScaleIconWeatherCloudySnow {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherCloudySnow.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-cloudy-snow',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherCloudySnow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherCloudySnow = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherCloudySnow);
let ScaleIconWeatherCloudyThunderRain = class ScaleIconWeatherCloudyThunderRain {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherCloudyThunderRain.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-cloudy-thunder-rain',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherCloudyThunderRain.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherCloudyThunderRain = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherCloudyThunderRain);
let ScaleIconWeatherCloudyThunderSnow = class ScaleIconWeatherCloudyThunderSnow {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherCloudyThunderSnow.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-cloudy-thunder-snow',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherCloudyThunderSnow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherCloudyThunderSnow = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherCloudyThunderSnow);
let ScaleIconWeatherHeavySleet = class ScaleIconWeatherHeavySleet {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherHeavySleet.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-heavy-sleet',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherHeavySleet.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherHeavySleet = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherHeavySleet);
let ScaleIconWeatherHeavySnow = class ScaleIconWeatherHeavySnow {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherHeavySnow.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-heavy-snow',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherHeavySnow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherHeavySnow = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherHeavySnow);
let ScaleIconWeatherMoonClear = class ScaleIconWeatherMoonClear {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherMoonClear.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-moon-clear',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherMoonClear.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherMoonClear = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherMoonClear);
let ScaleIconWeatherMoonCloudyA = class ScaleIconWeatherMoonCloudyA {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherMoonCloudyA.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-moon-cloudy-a',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherMoonCloudyA.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherMoonCloudyA = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherMoonCloudyA);
let ScaleIconWeatherMoonCloudyB = class ScaleIconWeatherMoonCloudyB {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherMoonCloudyB.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-moon-cloudy-b',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherMoonCloudyB.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherMoonCloudyB = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherMoonCloudyB);
let ScaleIconWeatherMoonRain = class ScaleIconWeatherMoonRain {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherMoonRain.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-moon-rain',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherMoonRain.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherMoonRain = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherMoonRain);
let ScaleIconWeatherMoonSleet = class ScaleIconWeatherMoonSleet {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherMoonSleet.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-moon-sleet',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherMoonSleet.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherMoonSleet = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherMoonSleet);
let ScaleIconWeatherMoonSnow = class ScaleIconWeatherMoonSnow {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherMoonSnow.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-moon-snow',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherMoonSnow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherMoonSnow = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherMoonSnow);
let ScaleIconWeatherMoonThunderRain = class ScaleIconWeatherMoonThunderRain {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherMoonThunderRain.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-moon-thunder-rain',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherMoonThunderRain.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherMoonThunderRain = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherMoonThunderRain);
let ScaleIconWeatherMoonThunderSnow = class ScaleIconWeatherMoonThunderSnow {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherMoonThunderSnow.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-moon-thunder-snow',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherMoonThunderSnow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherMoonThunderSnow = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherMoonThunderSnow);
let ScaleIconWeatherOvercast = class ScaleIconWeatherOvercast {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherOvercast.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-overcast',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherOvercast.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherOvercast = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherOvercast);
let ScaleIconWeatherRain = class ScaleIconWeatherRain {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherRain.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-rain',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherRain.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherRain = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherRain);
let ScaleIconWeatherSunny = class ScaleIconWeatherSunny {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherSunny.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-sunny',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherSunny.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherSunny = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherSunny);
let ScaleIconWeatherThunderRain = class ScaleIconWeatherThunderRain {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherThunderRain.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-thunder-rain',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherThunderRain.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherThunderRain = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherThunderRain);
let ScaleIconWeatherThunderSnow = class ScaleIconWeatherThunderSnow {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleIconWeatherThunderSnow.decorators = [
    { type: Component, args: [{
                selector: 'scale-icon-weather-thunder-snow',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
            },] },
];
/** @nocollapse */
ScaleIconWeatherThunderSnow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleIconWeatherThunderSnow = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleIconWeatherThunderSnow);
let ScaleInput = class ScaleInput {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeyDown']);
    }
};
ScaleInput.decorators = [
    { type: Component, args: [{
                selector: 'scale-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'cols', 'controlled', 'counter', 'disabled', 'helperText', 'icon', 'inputId', 'invalid', 'label', 'maxLength', 'minLength', 'multiple', 'name', 'placeholder', 'required', 'resize', 'rows', 'size', 'status', 'styles', 'transparent', 'type', 'value', 'variant', 'visibleSize'],
                outputs: ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeyDown']
            },] },
];
/** @nocollapse */
ScaleInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleInput = __decorate([
    ProxyCmp({
        inputs: ['checked', 'cols', 'controlled', 'counter', 'disabled', 'helperText', 'icon', 'inputId', 'invalid', 'label', 'maxLength', 'minLength', 'multiple', 'name', 'placeholder', 'required', 'resize', 'rows', 'size', 'status', 'styles', 'transparent', 'type', 'value', 'variant', 'visibleSize']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleInput);
let ScaleLink = class ScaleLink {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleLink.decorators = [
    { type: Component, args: [{
                selector: 'scale-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'download', 'href', 'hreflang', 'iconPosition', 'innerTabindex', 'omitUnderline', 'ping', 'referrerpolicy', 'rel', 'styles', 'target', 'type']
            },] },
];
/** @nocollapse */
ScaleLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleLink = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'download', 'href', 'hreflang', 'iconPosition', 'innerTabindex', 'omitUnderline', 'ping', 'referrerpolicy', 'rel', 'styles', 'target', 'type'],
        methods: ['setFocus']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleLink);
let ScaleList = class ScaleList {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleList.decorators = [
    { type: Component, args: [{
                selector: 'scale-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['ordered', 'styles']
            },] },
];
/** @nocollapse */
ScaleList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleList = __decorate([
    ProxyCmp({
        inputs: ['ordered', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleList);
let ScaleListItem = class ScaleListItem {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleListItem.decorators = [
    { type: Component, args: [{
                selector: 'scale-list-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['index', 'marker', 'ordered', 'styles']
            },] },
];
/** @nocollapse */
ScaleListItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleListItem = __decorate([
    ProxyCmp({
        inputs: ['index', 'marker', 'ordered', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleListItem);
let ScaleLoadingSpinner = class ScaleLoadingSpinner {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleLoadingSpinner.decorators = [
    { type: Component, args: [{
                selector: 'scale-loading-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['alignment', 'size', 'text', 'variant']
            },] },
];
/** @nocollapse */
ScaleLoadingSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleLoadingSpinner = __decorate([
    ProxyCmp({
        inputs: ['alignment', 'size', 'text', 'variant']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleLoadingSpinner);
let ScaleLogo = class ScaleLogo {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleLogo.decorators = [
    { type: Component, args: [{
                selector: 'scale-logo',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'focusable', 'href', 'language', 'logoAriaDescribedBy', 'logoTitle', 'scrollIntoViewOnFocus', 'size', 'styles', 'transparent', 'variant']
            },] },
];
/** @nocollapse */
ScaleLogo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleLogo = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'focusable', 'href', 'language', 'logoAriaDescribedBy', 'logoTitle', 'scrollIntoViewOnFocus', 'size', 'styles', 'transparent', 'variant']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleLogo);
let ScaleLogoSvg = class ScaleLogoSvg {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleLogoSvg.decorators = [
    { type: Component, args: [{
                selector: 'scale-logo-svg',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accessibilityTitle', 'color', 'focusable', 'language', 'role']
            },] },
];
/** @nocollapse */
ScaleLogoSvg.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleLogoSvg = __decorate([
    ProxyCmp({
        inputs: ['accessibilityTitle', 'color', 'focusable', 'language', 'role']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleLogoSvg);
let ScaleMenuFlyout = class ScaleMenuFlyout {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleMenuFlyout.decorators = [
    { type: Component, args: [{
                selector: 'scale-menu-flyout',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['closeOnSelect', 'direction', 'styles']
            },] },
];
/** @nocollapse */
ScaleMenuFlyout.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleMenuFlyout = __decorate([
    ProxyCmp({
        inputs: ['closeOnSelect', 'direction', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleMenuFlyout);
let ScaleMenuFlyoutDivider = class ScaleMenuFlyoutDivider {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleMenuFlyoutDivider.decorators = [
    { type: Component, args: [{
                selector: 'scale-menu-flyout-divider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['styles']
            },] },
];
/** @nocollapse */
ScaleMenuFlyoutDivider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleMenuFlyoutDivider = __decorate([
    ProxyCmp({
        inputs: ['styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleMenuFlyoutDivider);
let ScaleMenuFlyoutItem = class ScaleMenuFlyoutItem {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-select', 'scaleSelect']);
    }
};
ScaleMenuFlyoutItem.decorators = [
    { type: Component, args: [{
                selector: 'scale-menu-flyout-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['active', 'cascade', 'checkable', 'checked', 'disabled', 'styles', 'value'],
                outputs: ['scale-select', 'scaleSelect']
            },] },
];
/** @nocollapse */
ScaleMenuFlyoutItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleMenuFlyoutItem = __decorate([
    ProxyCmp({
        inputs: ['active', 'cascade', 'checkable', 'checked', 'disabled', 'styles', 'value'],
        methods: ['triggerEvent']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleMenuFlyoutItem);
let ScaleMenuFlyoutList = class ScaleMenuFlyoutList {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-open', 'scaleOpen', 'scale-close', 'scaleClose']);
    }
};
ScaleMenuFlyoutList.decorators = [
    { type: Component, args: [{
                selector: 'scale-menu-flyout-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['active', 'closeOnSelect', 'direction', 'opened', 'styles', 'trigger'],
                outputs: ['scale-open', 'scaleOpen', 'scale-close', 'scaleClose']
            },] },
];
/** @nocollapse */
ScaleMenuFlyoutList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleMenuFlyoutList = __decorate([
    ProxyCmp({
        inputs: ['active', 'closeOnSelect', 'direction', 'opened', 'styles', 'trigger'],
        methods: ['open', 'close', 'setFocus']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleMenuFlyoutList);
let ScaleModal = class ScaleModal {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-open', 'scaleOpen', 'scale-before-close', 'scaleBeforeClose', 'scale-close', 'scaleClose']);
    }
};
ScaleModal.decorators = [
    { type: Component, args: [{
                selector: 'scale-modal',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['alignActions', 'allowInjectingStyleToBody', 'closeButtonLabel', 'closeButtonTitle', 'duration', 'heading', 'opened', 'size', 'styles'],
                outputs: ['scale-open', 'scaleOpen', 'scale-before-close', 'scaleBeforeClose', 'scale-close', 'scaleClose']
            },] },
];
/** @nocollapse */
ScaleModal.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleModal = __decorate([
    ProxyCmp({
        inputs: ['alignActions', 'allowInjectingStyleToBody', 'closeButtonLabel', 'closeButtonTitle', 'duration', 'heading', 'opened', 'size', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleModal);
let ScaleNavIcon = class ScaleNavIcon {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleNavIcon.decorators = [
    { type: Component, args: [{
                selector: 'scale-nav-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['active', 'badge', 'badgeLabel', 'clickLink', 'href', 'icon', 'isActive', 'isMobileMenuOpen', 'mobileMenuOpen', 'refMobileMenuToggle', 'refMobileUserMenuToggle', 'refUserMenuToggle']
            },] },
];
/** @nocollapse */
ScaleNavIcon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleNavIcon = __decorate([
    ProxyCmp({
        inputs: ['active', 'badge', 'badgeLabel', 'clickLink', 'href', 'icon', 'isActive', 'isMobileMenuOpen', 'mobileMenuOpen', 'refMobileMenuToggle', 'refMobileUserMenuToggle', 'refUserMenuToggle']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleNavIcon);
let ScaleNavMain = class ScaleNavMain {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleNavMain.decorators = [
    { type: Component, args: [{
                selector: 'scale-nav-main',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['active', 'clickLink', 'href', 'isActive', 'isMegaMenuVisible', 'megaMenuVisible', 'name', 'popup']
            },] },
];
/** @nocollapse */
ScaleNavMain.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleNavMain = __decorate([
    ProxyCmp({
        inputs: ['active', 'clickLink', 'href', 'isActive', 'isMegaMenuVisible', 'megaMenuVisible', 'name', 'popup']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleNavMain);
let ScaleNavSegment = class ScaleNavSegment {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleNavSegment.decorators = [
    { type: Component, args: [{
                selector: 'scale-nav-segment',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['active', 'href', 'isActive']
            },] },
];
/** @nocollapse */
ScaleNavSegment.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleNavSegment = __decorate([
    ProxyCmp({
        inputs: ['active', 'href', 'isActive']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleNavSegment);
let ScaleNotificationBadge = class ScaleNotificationBadge {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleNotificationBadge.decorators = [
    { type: Component, args: [{
                selector: 'scale-notification-badge',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['clickHandler', 'label', 'maxCharacters', 'type']
            },] },
];
/** @nocollapse */
ScaleNotificationBadge.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleNotificationBadge = __decorate([
    ProxyCmp({
        inputs: ['clickHandler', 'label', 'maxCharacters', 'type']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleNotificationBadge);
let ScaleNotificationBanner = class ScaleNotificationBanner {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-close']);
    }
};
ScaleNotificationBanner.decorators = [
    { type: Component, args: [{
                selector: 'scale-notification-banner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autoHide', 'autoHideDuration', 'dismissible', 'href', 'opened', 'variant'],
                outputs: ['scale-close']
            },] },
];
/** @nocollapse */
ScaleNotificationBanner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleNotificationBanner = __decorate([
    ProxyCmp({
        inputs: ['autoHide', 'autoHideDuration', 'dismissible', 'href', 'opened', 'variant'],
        methods: ['open']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleNotificationBanner);
let ScaleNotificationMessage = class ScaleNotificationMessage {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-close']);
    }
};
ScaleNotificationMessage.decorators = [
    { type: Component, args: [{
                selector: 'scale-notification-message',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autoHide', 'autoHideDuration', 'dismissible', 'opened', 'variant'],
                outputs: ['scale-close']
            },] },
];
/** @nocollapse */
ScaleNotificationMessage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleNotificationMessage = __decorate([
    ProxyCmp({
        inputs: ['autoHide', 'autoHideDuration', 'dismissible', 'opened', 'variant'],
        methods: ['open']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleNotificationMessage);
let ScaleNotificationToast = class ScaleNotificationToast {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleNotificationToast.decorators = [
    { type: Component, args: [{
                selector: 'scale-notification-toast',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['alignment', 'animated', 'autoHide', 'autoHideDuration', 'fadeDuration', 'href', 'opened', 'positionHorizontal', 'positionVertical', 'story', 'styles', 'variant']
            },] },
];
/** @nocollapse */
ScaleNotificationToast.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleNotificationToast = __decorate([
    ProxyCmp({
        inputs: ['alignment', 'animated', 'autoHide', 'autoHideDuration', 'fadeDuration', 'href', 'opened', 'positionHorizontal', 'positionVertical', 'story', 'styles', 'variant'],
        methods: ['open']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleNotificationToast);
let ScalePagination = class ScalePagination {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-pagination', 'scalePagination']);
    }
};
ScalePagination.decorators = [
    { type: Component, args: [{
                selector: 'scale-pagination',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['ariaLabelFirstPage', 'ariaLabelLastPage', 'ariaLabelNextPage', 'ariaLabelPreviousPage', 'hideBorder', 'hideBorders', 'pageSize', 'size', 'small', 'startElement', 'styles', 'totalElements'],
                outputs: ['scale-pagination', 'scalePagination']
            },] },
];
/** @nocollapse */
ScalePagination.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScalePagination = __decorate([
    ProxyCmp({
        inputs: ['ariaLabelFirstPage', 'ariaLabelLastPage', 'ariaLabelNextPage', 'ariaLabelPreviousPage', 'hideBorder', 'hideBorders', 'pageSize', 'size', 'small', 'startElement', 'styles', 'totalElements']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScalePagination);
let ScaleProgressBar = class ScaleProgressBar {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleProgressBar.decorators = [
    { type: Component, args: [{
                selector: 'scale-progress-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['busy', 'customColor', 'disabled', 'hasError', 'icon', 'label', 'mute', 'percentage', 'progressBarId', 'showStatus', 'statusDescription', 'statusInside', 'strokeWidth', 'styles']
            },] },
];
/** @nocollapse */
ScaleProgressBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleProgressBar = __decorate([
    ProxyCmp({
        inputs: ['busy', 'customColor', 'disabled', 'hasError', 'icon', 'label', 'mute', 'percentage', 'progressBarId', 'showStatus', 'statusDescription', 'statusInside', 'strokeWidth', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleProgressBar);
let ScaleRadioButton = class ScaleRadioButton {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange']);
    }
};
ScaleRadioButton.decorators = [
    { type: Component, args: [{
                selector: 'scale-radio-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled', 'helperText', 'inputId', 'invalid', 'label', 'name', 'status', 'styles', 'value'],
                outputs: ['scale-change', 'scaleChange']
            },] },
];
/** @nocollapse */
ScaleRadioButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleRadioButton = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled', 'helperText', 'inputId', 'invalid', 'label', 'name', 'status', 'styles', 'value']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleRadioButton);
let ScaleRadioButtonGroup = class ScaleRadioButtonGroup {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleRadioButtonGroup.decorators = [
    { type: Component, args: [{
                selector: 'scale-radio-button-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['helperText', 'invalid', 'label', 'status']
            },] },
];
/** @nocollapse */
ScaleRadioButtonGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleRadioButtonGroup = __decorate([
    ProxyCmp({
        inputs: ['helperText', 'invalid', 'label', 'status']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleRadioButtonGroup);
let ScaleRatingStars = class ScaleRatingStars {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange']);
    }
};
ScaleRatingStars.decorators = [
    { type: Component, args: [{
                selector: 'scale-rating-stars',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['ariaLabelTranslation', 'disabled', 'hideLabel', 'infoText', 'label', 'max', 'maxRating', 'minRating', 'rating', 'readonly', 'size', 'starSize'],
                outputs: ['scale-change', 'scaleChange']
            },] },
];
/** @nocollapse */
ScaleRatingStars.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleRatingStars = __decorate([
    ProxyCmp({
        inputs: ['ariaLabelTranslation', 'disabled', 'hideLabel', 'infoText', 'label', 'max', 'maxRating', 'minRating', 'rating', 'readonly', 'size', 'starSize']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleRatingStars);
let ScaleSidebarNav = class ScaleSidebarNav {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleSidebarNav.decorators = [
    { type: Component, args: [{
                selector: 'scale-sidebar-nav',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['ariaLabelSidebarNav', 'collapsible', 'collapsibleLabel', 'collapsibleMediaQuery', 'styles']
            },] },
];
/** @nocollapse */
ScaleSidebarNav.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleSidebarNav = __decorate([
    ProxyCmp({
        inputs: ['ariaLabelSidebarNav', 'collapsible', 'collapsibleLabel', 'collapsibleMediaQuery', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleSidebarNav);
let ScaleSidebarNavCollapsible = class ScaleSidebarNavCollapsible {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleSidebarNavCollapsible.decorators = [
    { type: Component, args: [{
                selector: 'scale-sidebar-nav-collapsible',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['active', 'bold', 'condensed', 'expanded', 'href', 'label', 'nestingLevel', 'styles', 'tag']
            },] },
];
/** @nocollapse */
ScaleSidebarNavCollapsible.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleSidebarNavCollapsible = __decorate([
    ProxyCmp({
        inputs: ['active', 'bold', 'condensed', 'expanded', 'href', 'label', 'nestingLevel', 'styles', 'tag']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleSidebarNavCollapsible);
let ScaleSidebarNavItem = class ScaleSidebarNavItem {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleSidebarNavItem.decorators = [
    { type: Component, args: [{
                selector: 'scale-sidebar-nav-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['active', 'bold', 'condensed', 'current', 'nestingLevel', 'styles']
            },] },
];
/** @nocollapse */
ScaleSidebarNavItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleSidebarNavItem = __decorate([
    ProxyCmp({
        inputs: ['active', 'bold', 'condensed', 'current', 'nestingLevel', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleSidebarNavItem);
let ScaleSlider = class ScaleSlider {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange', 'scale-input', 'scaleInput']);
    }
};
ScaleSlider.decorators = [
    { type: Component, args: [{
                selector: 'scale-slider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['customColor', 'decimals', 'disabled', 'label', 'max', 'min', 'name', 'showValue', 'sliderId', 'step', 'styles', 'thumbLarge', 'trackSmall', 'unit', 'value'],
                outputs: ['scale-change', 'scaleChange', 'scale-input', 'scaleInput']
            },] },
];
/** @nocollapse */
ScaleSlider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleSlider = __decorate([
    ProxyCmp({
        inputs: ['customColor', 'decimals', 'disabled', 'label', 'max', 'min', 'name', 'showValue', 'sliderId', 'step', 'styles', 'thumbLarge', 'trackSmall', 'unit', 'value']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleSlider);
class ScaleSsrSlotFix {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
ScaleSsrSlotFix.decorators = [
    { type: Component, args: [{
                selector: 'scale-ssr-slot-fix',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] },
];
/** @nocollapse */
ScaleSsrSlotFix.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let ScaleSwitch = class ScaleSwitch {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange']);
    }
};
ScaleSwitch.decorators = [
    { type: Component, args: [{
                selector: 'scale-switch',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled', 'inputId', 'label', 'name', 'styles'],
                outputs: ['scale-change', 'scaleChange']
            },] },
];
/** @nocollapse */
ScaleSwitch.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleSwitch = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled', 'inputId', 'label', 'name', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleSwitch);
let ScaleTabHeader = class ScaleTabHeader {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleTabHeader.decorators = [
    { type: Component, args: [{
                selector: 'scale-tab-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'selected', 'size', 'small', 'styles']
            },] },
];
/** @nocollapse */
ScaleTabHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleTabHeader = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'selected', 'size', 'small', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleTabHeader);
let ScaleTabNav = class ScaleTabNav {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleTabNav.decorators = [
    { type: Component, args: [{
                selector: 'scale-tab-nav',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['size', 'small', 'styles']
            },] },
];
/** @nocollapse */
ScaleTabNav.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleTabNav = __decorate([
    ProxyCmp({
        inputs: ['size', 'small', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleTabNav);
let ScaleTabPanel = class ScaleTabPanel {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleTabPanel.decorators = [
    { type: Component, args: [{
                selector: 'scale-tab-panel',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['size', 'small', 'styles']
            },] },
];
/** @nocollapse */
ScaleTabPanel.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleTabPanel = __decorate([
    ProxyCmp({
        inputs: ['size', 'small', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleTabPanel);
let ScaleTable = class ScaleTable {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleTable.decorators = [
    { type: Component, args: [{
                selector: 'scale-table',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['showSort', 'size', 'striped', 'styles']
            },] },
];
/** @nocollapse */
ScaleTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleTable = __decorate([
    ProxyCmp({
        inputs: ['showSort', 'size', 'striped', 'styles']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleTable);
let ScaleTag = class ScaleTag {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-close', 'scaleClose']);
    }
};
ScaleTag.decorators = [
    { type: Component, args: [{
                selector: 'scale-tag',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'dismissText', 'dismissable', 'href', 'size', 'styles', 'target', 'variant'],
                outputs: ['scale-close', 'scaleClose']
            },] },
];
/** @nocollapse */
ScaleTag.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleTag = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'dismissText', 'dismissable', 'href', 'size', 'styles', 'target', 'variant']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleTag);
let ScaleTextField = class ScaleTextField {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeydown']);
    }
};
ScaleTextField.decorators = [
    { type: Component, args: [{
                selector: 'scale-text-field',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['counter', 'disabled', 'helperText', 'inputAutofocus', 'inputId', 'invalid', 'label', 'list', 'max', 'maxLength', 'min', 'minLength', 'name', 'placeholder', 'readonly', 'required', 'size', 'status', 'step', 'styles', 'transparent', 'type', 'value'],
                outputs: ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeydown']
            },] },
];
/** @nocollapse */
ScaleTextField.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleTextField = __decorate([
    ProxyCmp({
        inputs: ['counter', 'disabled', 'helperText', 'inputAutofocus', 'inputId', 'invalid', 'label', 'list', 'max', 'maxLength', 'min', 'minLength', 'name', 'placeholder', 'readonly', 'required', 'size', 'status', 'step', 'styles', 'transparent', 'type', 'value']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleTextField);
let ScaleTextarea = class ScaleTextarea {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeyDown']);
    }
};
ScaleTextarea.decorators = [
    { type: Component, args: [{
                selector: 'scale-textarea',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['cols', 'counter', 'disabled', 'helperText', 'inputAutofocus', 'inputId', 'invalid', 'label', 'maxLength', 'minLength', 'name', 'placeholder', 'readonly', 'required', 'resize', 'rows', 'status', 'styles', 'transparent', 'value'],
                outputs: ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeyDown']
            },] },
];
/** @nocollapse */
ScaleTextarea.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleTextarea = __decorate([
    ProxyCmp({
        inputs: ['cols', 'counter', 'disabled', 'helperText', 'inputAutofocus', 'inputId', 'invalid', 'label', 'maxLength', 'minLength', 'name', 'placeholder', 'readonly', 'required', 'resize', 'rows', 'status', 'styles', 'transparent', 'value']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleTextarea);
let ScaleToast = class ScaleToast {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
ScaleToast.decorators = [
    { type: Component, args: [{
                selector: 'scale-toast',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['animated', 'autoHide', 'fadeDuration', 'opened', 'positionRight', 'positionTop', 'size', 'styles', 'time', 'variant']
            },] },
];
/** @nocollapse */
ScaleToast.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleToast = __decorate([
    ProxyCmp({
        inputs: ['animated', 'autoHide', 'fadeDuration', 'opened', 'positionRight', 'positionTop', 'size', 'styles', 'time', 'variant'],
        methods: ['open']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleToast);
let ScaleToggleButton = class ScaleToggleButton {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-click', 'scaleClick']);
    }
};
ScaleToggleButton.decorators = [
    { type: Component, args: [{
                selector: 'scale-toggle-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['ariaDescriptionTranslation', 'ariaLabelToggleButton', 'ariaLangDeselected', 'ariaLangSelected', 'background', 'colorScheme', 'disabled', 'hideBorder', 'iconOnly', 'iconPosition', 'position', 'radius', 'selected', 'size', 'styles', 'toggleButtonId', 'variant'],
                outputs: ['scale-click', 'scaleClick']
            },] },
];
/** @nocollapse */
ScaleToggleButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleToggleButton = __decorate([
    ProxyCmp({
        inputs: ['ariaDescriptionTranslation', 'ariaLabelToggleButton', 'ariaLangDeselected', 'ariaLangSelected', 'background', 'colorScheme', 'disabled', 'hideBorder', 'iconOnly', 'iconPosition', 'position', 'radius', 'selected', 'size', 'styles', 'toggleButtonId', 'variant'],
        methods: ['setFocus']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleToggleButton);
let ScaleToggleGroup = class ScaleToggleGroup {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange']);
    }
};
ScaleToggleGroup.decorators = [
    { type: Component, args: [{
                selector: 'scale-toggle-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['ariaLabelTranslation', 'background', 'colorScheme', 'disabled', 'fullWidth', 'hideBorder', 'singleSelect', 'size', 'styles', 'variant'],
                outputs: ['scale-change', 'scaleChange']
            },] },
];
/** @nocollapse */
ScaleToggleGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleToggleGroup = __decorate([
    ProxyCmp({
        inputs: ['ariaLabelTranslation', 'background', 'colorScheme', 'disabled', 'fullWidth', 'hideBorder', 'singleSelect', 'size', 'styles', 'variant']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleToggleGroup);
let ScaleTooltip = class ScaleTooltip {
    /**
     * @param {?} c
     * @param {?} r
     * @param {?} z
     */
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-before-show', 'scale-show', 'scale-before-hide', 'scale-hide']);
    }
};
ScaleTooltip.decorators = [
    { type: Component, args: [{
                selector: 'scale-tooltip',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['content', 'disabled', 'distance', 'flip', 'open', 'placement', 'preventOverflow', 'skidding', 'styles', 'trigger'],
                outputs: ['scale-before-show', 'scale-show', 'scale-before-hide', 'scale-hide']
            },] },
];
/** @nocollapse */
ScaleTooltip.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
ScaleTooltip = __decorate([
    ProxyCmp({
        inputs: ['content', 'disabled', 'distance', 'flip', 'open', 'placement', 'preventOverflow', 'skidding', 'styles', 'trigger'],
        methods: ['showTooltip', 'hideTooltip']
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
], ScaleTooltip);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.onChange = (/**
         * @return {?}
         */
        () => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.el.nativeElement.value = this.lastValue = value == null ? '' : value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    handleChangeEvent(value) {
        if (value !== this.lastValue) {
            this.lastValue = value;
            this.onChange(value);
        }
    }
    /**
     * @return {?}
     */
    _handleBlurEvent() {
        this.onTouched();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.el.nativeElement.disabled = isDisabled;
    }
}
ValueAccessor.decorators = [
    { type: Directive, args: [{},] },
];
/** @nocollapse */
ValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];
ValueAccessor.propDecorators = {
    _handleBlurEvent: [{ type: HostListener, args: ['focusout',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BooleanValueAccessor extends ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.el.nativeElement.checked = this.lastValue = value == null ? false : value;
    }
}
BooleanValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'scale-input[type=checkbox]',
                host: {
                    '(scaleChange)': 'handleChangeEvent($event.target.checked)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: BooleanValueAccessor,
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
BooleanValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumericValueAccessor extends ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        super.registerOnChange((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            fn(value === '' ? null : parseFloat(value));
        }));
    }
}
NumericValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'scale-slider',
                host: {
                    '(scaleChange)': 'handleChangeEvent($event.target.value)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: NumericValueAccessor,
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
NumericValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioValueAccessor extends ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
}
RadioValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'scale-input[type=radio]',
                host: {
                    '(scaleChange)': 'handleChangeEvent($event.target.checked)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: RadioValueAccessor,
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
RadioValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectValueAccessor extends ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
}
SelectValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'scale-input[type=select]',
                host: {
                    '(scaleChange)': 'handleChangeEvent($event.target.value)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: SelectValueAccessor,
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
SelectValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextValueAccessor extends ValueAccessor {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
    }
}
TextValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'scale-input',
                host: {
                    '(scaleChange)': 'handleChangeEvent($event.target.value)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TextValueAccessor,
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
TextValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
defineCustomElements(window);
/** @type {?} */
const DECLARATIONS = [
    // proxies
    AppLogo,
    AppMegaMenu,
    AppNavigationMainMobile,
    AppNavigationSectorMobile,
    ScaleAccordion,
    ScaleAlert,
    ScaleAppHeader,
    ScaleAppShell,
    ScaleCallout,
    ScaleBreadcrumb,
    ScaleButton,
    ScaleCard,
    ScaleCarousel,
    ScaleChartStackCard,
    ScaleCheckbox,
    ScaleCollapsible,
    ScaleDataGrid,
    ScaleDatePicker,
    ScaleDivider,
    ScaleIcon,
    ScaleInput,
    ScaleLink,
    ScaleList,
    ScaleListItem,
    ScaleLoadingSpinner,
    ScaleMenuFlyout,
    ScaleMenuFlyoutDivider,
    ScaleMenuFlyoutItem,
    ScaleMenuFlyoutList,
    ScaleModal,
    ScalePagination,
    ScaleProgressBar,
    ScaleRadioButton,
    ScaleRatingStars,
    ScaleSidebarNav,
    ScaleSidebarNavCollapsible,
    ScaleSidebarNavItem,
    ScaleSlider,
    ScaleSsrSlotFix,
    ScaleSwitch,
    ScaleTabHeader,
    ScaleTabNav,
    ScaleTabPanel,
    ScaleTable,
    ScaleTag,
    ScaleTextField,
    ScaleToast,
    // Value Accessors
    BooleanValueAccessor,
    NumericValueAccessor,
    RadioValueAccessor,
    SelectValueAccessor,
    TextValueAccessor,
];
class ComponentLibraryModule {
}
ComponentLibraryModule.decorators = [
    { type: NgModule, args: [{
                declarations: DECLARATIONS,
                exports: DECLARATIONS,
                imports: [],
                providers: [],
            },] },
];

export { AppLogo, AppMegaMenu, AppNavigationMainMobile, AppNavigationSectorMobile, AppNavigationUserMenu, ComponentLibraryModule, ScaleAccordion, ScaleAlert, ScaleAppFooter, ScaleAppHeader, ScaleAppShell, ScaleBreadcrumb, ScaleButton, ScaleCallout, ScaleCard, ScaleCarousel, ScaleChartStackCard, ScaleCheckbox, ScaleCheckboxGroup, ScaleCollapsible, ScaleDataGrid, ScaleDatePicker, ScaleDivider, ScaleDropdown, ScaleGrid, ScaleGridItem, ScaleIcon, ScaleIconActionAdd, ScaleIconActionAddCard, ScaleIconActionAutoLogin, ScaleIconActionBackspace, ScaleIconActionChangelog, ScaleIconActionCircleAdd, ScaleIconActionCircleClose, ScaleIconActionClose, ScaleIconActionCopyPaste, ScaleIconActionCutPaste, ScaleIconActionDisabledMicrophone, ScaleIconActionDownload, ScaleIconActionDragAndDrop, ScaleIconActionEdit, ScaleIconActionFastForward, ScaleIconActionFavorite, ScaleIconActionFilter, ScaleIconActionForward, ScaleIconActionFullScreen, ScaleIconActionHidePassword, ScaleIconActionIndeterminate, ScaleIconActionInstall, ScaleIconActionLink, ScaleIconActionLogout, ScaleIconActionLoop, ScaleIconActionMenu, ScaleIconActionMicrophone, ScaleIconActionMinimizeScreen, ScaleIconActionMore, ScaleIconActionMove, ScaleIconActionMute, ScaleIconActionNotification, ScaleIconActionPause, ScaleIconActionPin, ScaleIconActionPlay, ScaleIconActionPopUpWindow, ScaleIconActionPrint, ScaleIconActionRandom, ScaleIconActionRefresh, ScaleIconActionRemove, ScaleIconActionRestart, ScaleIconActionSearch, ScaleIconActionShoppingCart, ScaleIconActionShowPassword, ScaleIconActionSort, ScaleIconActionSoundOn, ScaleIconActionStreamOn, ScaleIconActionSuccess, ScaleIconActionThumbsDown, ScaleIconActionThumbsUp, ScaleIconActionTilesAdd, ScaleIconActionUpload, ScaleIconActionVolumeDown, ScaleIconActionVolumeUp, ScaleIconActionZoomIn, ScaleIconActionZoomOut, ScaleIconAlertCompliance, ScaleIconAlertError, ScaleIconAlertHelp, ScaleIconAlertImprintDataprivacy, ScaleIconAlertInformation, ScaleIconAlertLegal, ScaleIconAlertSecurity, ScaleIconAlertSuccess, ScaleIconAlertWarning, ScaleIconCommunicationCallIncoming, ScaleIconCommunicationCallOutgoing, ScaleIconCommunicationChat, ScaleIconCommunicationEmail, ScaleIconCommunicationEndCall, ScaleIconCommunicationFeedback, ScaleIconCommunicationMessage, ScaleIconCommunicationPhoneNumber, ScaleIconCommunicationRecipient, ScaleIconCommunicationVoiceMessage, ScaleIconContentAchievement, ScaleIconContentApplications, ScaleIconContentBiometric, ScaleIconContentBookmark, ScaleIconContentCalendar, ScaleIconContentClipboard, ScaleIconContentClock, ScaleIconContentCreditCard, ScaleIconContentDelivery, ScaleIconContentDigitalBanking, ScaleIconContentDigitalMedia, ScaleIconContentDraftFile, ScaleIconContentESim, ScaleIconContentEu, ScaleIconContentFeatures, ScaleIconContentFlexibleTariffs, ScaleIconContentHeart, ScaleIconContentHistory, ScaleIconContentInternational, ScaleIconContentInternationalSms, ScaleIconContentInterview, ScaleIconContentKey, ScaleIconContentLock, ScaleIconContentMediaFolder, ScaleIconContentMoneyAt, ScaleIconContentMusic, ScaleIconContentNews, ScaleIconContentPrepaidActivate, ScaleIconContentPriceTag, ScaleIconContentRss, ScaleIconContentShop, ScaleIconContentSignal, ScaleIconContentSimCard, ScaleIconContentSmile, ScaleIconContentTariffs, ScaleIconContentTransport, ScaleIconContentUnlock, ScaleIconContentVoucher, ScaleIconContentWallet, ScaleIconDeviceAddDevice, ScaleIconDeviceCamera, ScaleIconDeviceChangeCamera, ScaleIconDeviceComputer, ScaleIconDeviceDevicePhone, ScaleIconDeviceDeviceRouter, ScaleIconDeviceDeviceTv, ScaleIconDeviceDeviceWatch, ScaleIconDeviceFixedLineServices, ScaleIconDeviceMediaReceiver, ScaleIconDeviceMobileDevicesCombination, ScaleIconDeviceMobileEquipment, ScaleIconDeviceMobilePhoneInsurance, ScaleIconDeviceMobileServices, ScaleIconDeviceNoCamera, ScaleIconDevicePhotoCamera, ScaleIconDeviceRemoteController, ScaleIconDeviceReplacementMobilephone, ScaleIconDeviceScreenRotate, ScaleIconDeviceSmartSpeaker, ScaleIconDeviceTvAndMobile, ScaleIconHomeHome, ScaleIconHomeInternetAtHome, ScaleIconHomeIot, ScaleIconHomeNoWifi, ScaleIconHomeSmarthome, ScaleIconHomeWifi, ScaleIconNavigationCircleTopUp, ScaleIconNavigationCollapseDown, ScaleIconNavigationCollapseUp, ScaleIconNavigationExternalLink, ScaleIconNavigationInternalLink, ScaleIconNavigationLeft, ScaleIconNavigationLocation, ScaleIconNavigationMyLocation, ScaleIconNavigationRight, ScaleIconNavigationStart, ScaleIconNavigationTopUp, ScaleIconProcessOrderStatus, ScaleIconProcessProcessing, ScaleIconServiceDevicesService, ScaleIconServiceMaintanance, ScaleIconServiceServices, ScaleIconServiceSettings, ScaleIconServiceSupport, ScaleIconTProductMagentaCloud, ScaleIconTProductMagentaTv, ScaleIconTProductMagentaone, ScaleIconTProductMeasureInternetSpeed, ScaleIconTProductSeamlessConnectivity, ScaleIconTProductTelekomShopB, ScaleIconTProductUsage, ScaleIconUserFileAnalytics, ScaleIconUserFileAttachment, ScaleIconUserFileAudioFile, ScaleIconUserFileBilling, ScaleIconUserFileBussinesUsers, ScaleIconUserFileCommunities, ScaleIconUserFileContacts, ScaleIconUserFileContracts, ScaleIconUserFileFamilies, ScaleIconUserFileHandshake, ScaleIconUserFileIdCard, ScaleIconUserFileImageFile, ScaleIconUserFileLogout, ScaleIconUserFilePdfFile, ScaleIconUserFileSwitchUsers, ScaleIconUserFileUser, ScaleIconUserFileVideos, ScaleIconWeatherCloudy, ScaleIconWeatherCloudyRain, ScaleIconWeatherCloudySleet, ScaleIconWeatherCloudySnow, ScaleIconWeatherCloudyThunderRain, ScaleIconWeatherCloudyThunderSnow, ScaleIconWeatherHeavySleet, ScaleIconWeatherHeavySnow, ScaleIconWeatherMoonClear, ScaleIconWeatherMoonCloudyA, ScaleIconWeatherMoonCloudyB, ScaleIconWeatherMoonRain, ScaleIconWeatherMoonSleet, ScaleIconWeatherMoonSnow, ScaleIconWeatherMoonThunderRain, ScaleIconWeatherMoonThunderSnow, ScaleIconWeatherOvercast, ScaleIconWeatherRain, ScaleIconWeatherSunny, ScaleIconWeatherThunderRain, ScaleIconWeatherThunderSnow, ScaleInput, ScaleLink, ScaleList, ScaleListItem, ScaleLoadingSpinner, ScaleLogo, ScaleLogoSvg, ScaleMenuFlyout, ScaleMenuFlyoutDivider, ScaleMenuFlyoutItem, ScaleMenuFlyoutList, ScaleModal, ScaleNavIcon, ScaleNavMain, ScaleNavSegment, ScaleNotificationBadge, ScaleNotificationBanner, ScaleNotificationMessage, ScaleNotificationToast, ScalePagination, ScaleProgressBar, ScaleRadioButton, ScaleRadioButtonGroup, ScaleRatingStars, ScaleSidebarNav, ScaleSidebarNavCollapsible, ScaleSidebarNavItem, ScaleSlider, ScaleSsrSlotFix, ScaleSwitch, ScaleTabHeader, ScaleTabNav, ScaleTabPanel, ScaleTable, ScaleTag, ScaleTextField, ScaleTextarea, ScaleToast, ScaleToggleButton, ScaleToggleGroup, ScaleTooltip, ProxyCmp as ɵa, BooleanValueAccessor as ɵb, ValueAccessor as ɵc, NumericValueAccessor as ɵd, RadioValueAccessor as ɵe, SelectValueAccessor as ɵf, TextValueAccessor as ɵg };

import { __decorate, __metadata, __extends } from 'tslib';
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, Directive, HostListener, NgModule } from '@angular/core';
import { fromEvent } from 'rxjs';
import { defineCustomElements } from '@telekom/scale-components/loader';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var proxyInputs = (/**
 * @param {?} Cmp
 * @param {?} inputs
 * @return {?}
 */
function (Cmp, inputs) {
    /** @type {?} */
    var Prototype = Cmp.prototype;
    inputs.forEach((/**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        Object.defineProperty(Prototype, item, {
            get: /**
             * @return {?}
             */
            function () {
                return this.el[item];
            },
            set: /**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                var _this = this;
                this.z.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return (_this.el[item] = val); }));
            },
        });
    }));
});
/** @type {?} */
var proxyMethods = (/**
 * @param {?} Cmp
 * @param {?} methods
 * @return {?}
 */
function (Cmp, methods) {
    /** @type {?} */
    var Prototype = Cmp.prototype;
    methods.forEach((/**
     * @param {?} methodName
     * @return {?}
     */
    function (methodName) {
        Prototype[methodName] = (/**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var args = arguments;
            return this.z.runOutsideAngular((/**
             * @return {?}
             */
            function () { return _this.el[methodName].apply(_this.el, args); }));
        });
    }));
});
/** @type {?} */
var proxyOutputs = (/**
 * @param {?} instance
 * @param {?} el
 * @param {?} events
 * @return {?}
 */
function (instance, el, events) {
    events.forEach((/**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) { return (instance[eventName] = fromEvent(el, eventName)); }));
});
// tslint:disable-next-line: only-arrow-functions
/**
 * @param {?} opts
 * @return {?}
 */
function ProxyCmp(opts) {
    /** @type {?} */
    var decorator = (/**
     * @param {?} cls
     * @return {?}
     */
    function (cls) {
        if (opts.inputs) {
            proxyInputs(cls, opts.inputs);
        }
        if (opts.methods) {
            proxyMethods(cls, opts.methods);
        }
        return cls;
    });
    return decorator;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AppLogo = /** @class */ (function () {
    function AppLogo(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    AppLogo.decorators = [
        { type: Component, args: [{
                    selector: 'app-logo',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['claim', 'claimLang', 'color', 'focusable', 'href', 'logoTitle']
                },] },
    ];
    /** @nocollapse */
    AppLogo.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    AppLogo = __decorate([
        ProxyCmp({
            inputs: ['claim', 'claimLang', 'color', 'focusable', 'href', 'logoTitle']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], AppLogo);
    return AppLogo;
}());
var AppMegaMenu = /** @class */ (function () {
    function AppMegaMenu(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    AppMegaMenu.decorators = [
        { type: Component, args: [{
                    selector: 'app-mega-menu',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['active', 'activeRouteId', 'hide', 'isActive', 'navigation']
                },] },
    ];
    /** @nocollapse */
    AppMegaMenu.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    AppMegaMenu = __decorate([
        ProxyCmp({
            inputs: ['active', 'activeRouteId', 'hide', 'isActive', 'navigation']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], AppMegaMenu);
    return AppMegaMenu;
}());
var AppNavigationMainMobile = /** @class */ (function () {
    function AppNavigationMainMobile(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeMenu']);
    }
    AppNavigationMainMobile.decorators = [
        { type: Component, args: [{
                    selector: 'app-navigation-main-mobile',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['activeRouteId', 'hide', 'navigation'],
                    outputs: ['closeMenu']
                },] },
    ];
    /** @nocollapse */
    AppNavigationMainMobile.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    AppNavigationMainMobile = __decorate([
        ProxyCmp({
            inputs: ['activeRouteId', 'hide', 'navigation']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], AppNavigationMainMobile);
    return AppNavigationMainMobile;
}());
var AppNavigationSectorMobile = /** @class */ (function () {
    function AppNavigationSectorMobile(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    AppNavigationSectorMobile.decorators = [
        { type: Component, args: [{
                    selector: 'app-navigation-sector-mobile',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['activeSectorId', 'hide', 'navigation']
                },] },
    ];
    /** @nocollapse */
    AppNavigationSectorMobile.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    AppNavigationSectorMobile = __decorate([
        ProxyCmp({
            inputs: ['activeSectorId', 'hide', 'navigation']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], AppNavigationSectorMobile);
    return AppNavigationSectorMobile;
}());
var AppNavigationUserMenu = /** @class */ (function () {
    function AppNavigationUserMenu(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeMenu']);
    }
    AppNavigationUserMenu.decorators = [
        { type: Component, args: [{
                    selector: 'app-navigation-user-menu',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['hide', 'navigation'],
                    outputs: ['closeMenu']
                },] },
    ];
    /** @nocollapse */
    AppNavigationUserMenu.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    AppNavigationUserMenu = __decorate([
        ProxyCmp({
            inputs: ['hide', 'navigation']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], AppNavigationUserMenu);
    return AppNavigationUserMenu;
}());
var ScaleAccordion = /** @class */ (function () {
    function ScaleAccordion(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleAccordion.decorators = [
        { type: Component, args: [{
                    selector: 'scale-accordion',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['dependent', 'expanded', 'headingLevel', 'iconLocation', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleAccordion.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleAccordion = __decorate([
        ProxyCmp({
            inputs: ['dependent', 'expanded', 'headingLevel', 'iconLocation', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleAccordion);
    return ScaleAccordion;
}());
var ScaleAlert = /** @class */ (function () {
    function ScaleAlert(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleAlert.decorators = [
        { type: Component, args: [{
                    selector: 'scale-alert',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['headline', 'icon', 'opened', 'size', 'styles', 'timeout', 'variant']
                },] },
    ];
    /** @nocollapse */
    ScaleAlert.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleAlert = __decorate([
        ProxyCmp({
            inputs: ['headline', 'icon', 'opened', 'size', 'styles', 'timeout', 'variant'],
            methods: ['open']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleAlert);
    return ScaleAlert;
}());
var ScaleAppFooter = /** @class */ (function () {
    function ScaleAppFooter(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleAppFooter.decorators = [
        { type: Component, args: [{
                    selector: 'scale-app-footer',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['claimLang', 'copyright', 'footerNavigation', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'styles', 'variant']
                },] },
    ];
    /** @nocollapse */
    ScaleAppFooter.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleAppFooter = __decorate([
        ProxyCmp({
            inputs: ['claimLang', 'copyright', 'footerNavigation', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'styles', 'variant']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleAppFooter);
    return ScaleAppFooter;
}());
var ScaleAppHeader = /** @class */ (function () {
    function ScaleAppHeader(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleAppHeader.decorators = [
        { type: Component, args: [{
                    selector: 'scale-app-header',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['activeRouteId', 'activeSectorId', 'addonNavigation', 'claimLang', 'iconNavigation', 'isMegaMenuVisible', 'isMobileMenuVisible', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'mainNavigation', 'megaMenuVisible', 'mobileMenuVisible', 'portalName', 'sectorNavigation', 'sticky', 'userNavigation']
                },] },
    ];
    /** @nocollapse */
    ScaleAppHeader.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleAppHeader = __decorate([
        ProxyCmp({
            inputs: ['activeRouteId', 'activeSectorId', 'addonNavigation', 'claimLang', 'iconNavigation', 'isMegaMenuVisible', 'isMobileMenuVisible', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'mainNavigation', 'megaMenuVisible', 'mobileMenuVisible', 'portalName', 'sectorNavigation', 'sticky', 'userNavigation']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleAppHeader);
    return ScaleAppHeader;
}());
var ScaleAppShell = /** @class */ (function () {
    function ScaleAppShell(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleAppShell.decorators = [
        { type: Component, args: [{
                    selector: 'scale-app-shell',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['activeRouteId', 'activeSectorId', 'addonNavigation', 'claimLang', 'iconNavigation', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'mainNavigation', 'portalName', 'sectorNavigation', 'sticky', 'styles', 'userNavigation']
                },] },
    ];
    /** @nocollapse */
    ScaleAppShell.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleAppShell = __decorate([
        ProxyCmp({
            inputs: ['activeRouteId', 'activeSectorId', 'addonNavigation', 'claimLang', 'iconNavigation', 'logoAriaDescribedBy', 'logoClick', 'logoHref', 'logoTitle', 'mainNavigation', 'portalName', 'sectorNavigation', 'sticky', 'styles', 'userNavigation']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleAppShell);
    return ScaleAppShell;
}());
var ScaleBreadcrumb = /** @class */ (function () {
    function ScaleBreadcrumb(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleBreadcrumb.decorators = [
        { type: Component, args: [{
                    selector: 'scale-breadcrumb',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['separator', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleBreadcrumb.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleBreadcrumb = __decorate([
        ProxyCmp({
            inputs: ['separator', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleBreadcrumb);
    return ScaleBreadcrumb;
}());
var ScaleButton = /** @class */ (function () {
    function ScaleButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleButton.decorators = [
        { type: Component, args: [{
                    selector: 'scale-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'download', 'href', 'iconOnly', 'iconPosition', 'innerTabindex', 'name', 'size', 'styles', 'target', 'type', 'value', 'variant']
                },] },
    ];
    /** @nocollapse */
    ScaleButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleButton = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'download', 'href', 'iconOnly', 'iconPosition', 'innerTabindex', 'name', 'size', 'styles', 'target', 'type', 'value', 'variant'],
            methods: ['setFocus']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleButton);
    return ScaleButton;
}());
var ScaleCallout = /** @class */ (function () {
    function ScaleCallout(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleCallout.decorators = [
        { type: Component, args: [{
                    selector: 'scale-callout',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['asterisk', 'rotation', 'size', 'variant']
                },] },
    ];
    /** @nocollapse */
    ScaleCallout.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleCallout = __decorate([
        ProxyCmp({
            inputs: ['asterisk', 'rotation', 'size', 'variant']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleCallout);
    return ScaleCallout;
}());
var ScaleCard = /** @class */ (function () {
    function ScaleCard(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleCard.decorators = [
        { type: Component, args: [{
                    selector: 'scale-card',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['label', 'rel', 'styles', 'target', 'to']
                },] },
    ];
    /** @nocollapse */
    ScaleCard.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleCard = __decorate([
        ProxyCmp({
            inputs: ['label', 'rel', 'styles', 'target', 'to']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleCard);
    return ScaleCard;
}());
var ScaleCarousel = /** @class */ (function () {
    function ScaleCarousel(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleCarousel.decorators = [
        { type: Component, args: [{
                    selector: 'scale-carousel',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['styles', 'vertical']
                },] },
    ];
    /** @nocollapse */
    ScaleCarousel.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleCarousel = __decorate([
        ProxyCmp({
            inputs: ['styles', 'vertical']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleCarousel);
    return ScaleCarousel;
}());
var ScaleChartStackCard = /** @class */ (function () {
    function ScaleChartStackCard(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleChartStackCard.decorators = [
        { type: Component, args: [{
                    selector: 'scale-chart-stack-card',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['data', 'heading']
                },] },
    ];
    /** @nocollapse */
    ScaleChartStackCard.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleChartStackCard = __decorate([
        ProxyCmp({
            inputs: ['data', 'heading']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleChartStackCard);
    return ScaleChartStackCard;
}());
var ScaleCheckbox = /** @class */ (function () {
    function ScaleCheckbox(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange']);
    }
    ScaleCheckbox.decorators = [
        { type: Component, args: [{
                    selector: 'scale-checkbox',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['ariaLabelCheckbox', 'checked', 'disabled', 'helperText', 'hideLabel', 'indeterminate', 'inputId', 'invalid', 'label', 'name', 'status', 'styles', 'value'],
                    outputs: ['scale-change', 'scaleChange']
                },] },
    ];
    /** @nocollapse */
    ScaleCheckbox.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleCheckbox = __decorate([
        ProxyCmp({
            inputs: ['ariaLabelCheckbox', 'checked', 'disabled', 'helperText', 'hideLabel', 'indeterminate', 'inputId', 'invalid', 'label', 'name', 'status', 'styles', 'value']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleCheckbox);
    return ScaleCheckbox;
}());
var ScaleCheckboxGroup = /** @class */ (function () {
    function ScaleCheckboxGroup(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleCheckboxGroup.decorators = [
        { type: Component, args: [{
                    selector: 'scale-checkbox-group',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['ariaLabelCheckboxGroup', 'helperText', 'inputId', 'invalid', 'label', 'name', 'selectText', 'status', 'styles', 'unselectText', 'value']
                },] },
    ];
    /** @nocollapse */
    ScaleCheckboxGroup.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleCheckboxGroup = __decorate([
        ProxyCmp({
            inputs: ['ariaLabelCheckboxGroup', 'helperText', 'inputId', 'invalid', 'label', 'name', 'selectText', 'status', 'styles', 'unselectText', 'value']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleCheckboxGroup);
    return ScaleCheckboxGroup;
}());
var ScaleCollapsible = /** @class */ (function () {
    function ScaleCollapsible(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-expand', 'scaleExpand']);
    }
    ScaleCollapsible.decorators = [
        { type: Component, args: [{
                    selector: 'scale-collapsible',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['expanded', 'headingLevel', 'iconLocation', 'styles'],
                    outputs: ['scale-expand', 'scaleExpand']
                },] },
    ];
    /** @nocollapse */
    ScaleCollapsible.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleCollapsible = __decorate([
        ProxyCmp({
            inputs: ['expanded', 'headingLevel', 'iconLocation', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleCollapsible);
    return ScaleCollapsible;
}());
var ScaleDataGrid = /** @class */ (function () {
    function ScaleDataGrid(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-edit', 'scaleEdit', 'scale-sort', 'scaleSort']);
    }
    ScaleDataGrid.decorators = [
        { type: Component, args: [{
                    selector: 'scale-data-grid',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['fields', 'freezeHeader', 'heading', 'height', 'hideBorder', 'hideHeader', 'hideInfo', 'hideMenu', 'numbered', 'pageSize', 'rows', 'selectable', 'selection', 'shadeAlternate', 'styles', 'visible'],
                    outputs: ['scale-edit', 'scaleEdit', 'scale-sort', 'scaleSort']
                },] },
    ];
    /** @nocollapse */
    ScaleDataGrid.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleDataGrid = __decorate([
        ProxyCmp({
            inputs: ['fields', 'freezeHeader', 'heading', 'height', 'hideBorder', 'hideHeader', 'hideInfo', 'hideMenu', 'numbered', 'pageSize', 'rows', 'selectable', 'selection', 'shadeAlternate', 'styles', 'visible']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleDataGrid);
    return ScaleDataGrid;
}());
var ScaleDatePicker = /** @class */ (function () {
    function ScaleDatePicker(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange', 'scale-blur', 'scaleBlur', 'scale-focus', 'scaleFocus']);
    }
    ScaleDatePicker.decorators = [
        { type: Component, args: [{
                    selector: 'scale-date-picker',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['dateAdapter', 'direction', 'disabled', 'firstDayOfWeek', 'helperText', 'identifier', 'invalid', 'label', 'localization', 'max', 'min', 'name', 'popupTitle', 'required', 'role', 'size', 'status', 'styles', 'value'],
                    outputs: ['scale-change', 'scaleChange', 'scale-blur', 'scaleBlur', 'scale-focus', 'scaleFocus']
                },] },
    ];
    /** @nocollapse */
    ScaleDatePicker.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleDatePicker = __decorate([
        ProxyCmp({
            inputs: ['dateAdapter', 'direction', 'disabled', 'firstDayOfWeek', 'helperText', 'identifier', 'invalid', 'label', 'localization', 'max', 'min', 'name', 'popupTitle', 'required', 'role', 'size', 'status', 'styles', 'value'],
            methods: ['setFocus', 'show', 'hide']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleDatePicker);
    return ScaleDatePicker;
}());
var ScaleDivider = /** @class */ (function () {
    function ScaleDivider(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleDivider.decorators = [
        { type: Component, args: [{
                    selector: 'scale-divider',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['styles', 'vertical']
                },] },
    ];
    /** @nocollapse */
    ScaleDivider.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleDivider = __decorate([
        ProxyCmp({
            inputs: ['styles', 'vertical']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleDivider);
    return ScaleDivider;
}());
var ScaleDropdown = /** @class */ (function () {
    function ScaleDropdown(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeydown']);
    }
    ScaleDropdown.decorators = [
        { type: Component, args: [{
                    selector: 'scale-dropdown',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['controlled', 'disabled', 'helperText', 'inputId', 'invalid', 'label', 'multiple', 'name', 'required', 'size', 'status', 'styles', 'transparent', 'value', 'visibleSize'],
                    outputs: ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeydown']
                },] },
    ];
    /** @nocollapse */
    ScaleDropdown.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleDropdown = __decorate([
        ProxyCmp({
            inputs: ['controlled', 'disabled', 'helperText', 'inputId', 'invalid', 'label', 'multiple', 'name', 'required', 'size', 'status', 'styles', 'transparent', 'value', 'visibleSize']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleDropdown);
    return ScaleDropdown;
}());
var ScaleGrid = /** @class */ (function () {
    function ScaleGrid(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleGrid.decorators = [
        { type: Component, args: [{
                    selector: 'scale-grid',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['columns', 'gutterX', 'gutterY', 'maxWidth', 'spacing']
                },] },
    ];
    /** @nocollapse */
    ScaleGrid.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleGrid = __decorate([
        ProxyCmp({
            inputs: ['columns', 'gutterX', 'gutterY', 'maxWidth', 'spacing']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleGrid);
    return ScaleGrid;
}());
var ScaleGridItem = /** @class */ (function () {
    function ScaleGridItem(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleGridItem.decorators = [
        { type: Component, args: [{
                    selector: 'scale-grid-item',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['offset', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleGridItem.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleGridItem = __decorate([
        ProxyCmp({
            inputs: ['offset', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleGridItem);
    return ScaleGridItem;
}());
var ScaleIcon = /** @class */ (function () {
    function ScaleIcon(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIcon.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'decorative', 'fill', 'focusable', 'name', 'path', 'size', 'stroke']
                },] },
    ];
    /** @nocollapse */
    ScaleIcon.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIcon = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'decorative', 'fill', 'focusable', 'name', 'path', 'size', 'stroke']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIcon);
    return ScaleIcon;
}());
var ScaleIconActionAdd = /** @class */ (function () {
    function ScaleIconActionAdd(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionAdd.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-add',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionAdd.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionAdd = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionAdd);
    return ScaleIconActionAdd;
}());
var ScaleIconActionAddCard = /** @class */ (function () {
    function ScaleIconActionAddCard(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionAddCard.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-add-card',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionAddCard.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionAddCard = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionAddCard);
    return ScaleIconActionAddCard;
}());
var ScaleIconActionAutoLogin = /** @class */ (function () {
    function ScaleIconActionAutoLogin(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionAutoLogin.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-auto-login',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionAutoLogin.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionAutoLogin = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionAutoLogin);
    return ScaleIconActionAutoLogin;
}());
var ScaleIconActionBackspace = /** @class */ (function () {
    function ScaleIconActionBackspace(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionBackspace.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-backspace',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionBackspace.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionBackspace = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionBackspace);
    return ScaleIconActionBackspace;
}());
var ScaleIconActionChangelog = /** @class */ (function () {
    function ScaleIconActionChangelog(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionChangelog.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-changelog',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionChangelog.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionChangelog = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionChangelog);
    return ScaleIconActionChangelog;
}());
var ScaleIconActionCircleAdd = /** @class */ (function () {
    function ScaleIconActionCircleAdd(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionCircleAdd.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-circle-add',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionCircleAdd.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionCircleAdd = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionCircleAdd);
    return ScaleIconActionCircleAdd;
}());
var ScaleIconActionCircleClose = /** @class */ (function () {
    function ScaleIconActionCircleClose(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionCircleClose.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-circle-close',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionCircleClose.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionCircleClose = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionCircleClose);
    return ScaleIconActionCircleClose;
}());
var ScaleIconActionClose = /** @class */ (function () {
    function ScaleIconActionClose(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionClose.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-close',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionClose.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionClose = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionClose);
    return ScaleIconActionClose;
}());
var ScaleIconActionCopyPaste = /** @class */ (function () {
    function ScaleIconActionCopyPaste(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionCopyPaste.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-copy-paste',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionCopyPaste.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionCopyPaste = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionCopyPaste);
    return ScaleIconActionCopyPaste;
}());
var ScaleIconActionCutPaste = /** @class */ (function () {
    function ScaleIconActionCutPaste(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionCutPaste.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-cut-paste',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionCutPaste.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionCutPaste = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionCutPaste);
    return ScaleIconActionCutPaste;
}());
var ScaleIconActionDisabledMicrophone = /** @class */ (function () {
    function ScaleIconActionDisabledMicrophone(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionDisabledMicrophone.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-disabled-microphone',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionDisabledMicrophone.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionDisabledMicrophone = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionDisabledMicrophone);
    return ScaleIconActionDisabledMicrophone;
}());
var ScaleIconActionDownload = /** @class */ (function () {
    function ScaleIconActionDownload(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionDownload.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-download',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionDownload.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionDownload = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionDownload);
    return ScaleIconActionDownload;
}());
var ScaleIconActionDragAndDrop = /** @class */ (function () {
    function ScaleIconActionDragAndDrop(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionDragAndDrop.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-drag-and-drop',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionDragAndDrop.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionDragAndDrop = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionDragAndDrop);
    return ScaleIconActionDragAndDrop;
}());
var ScaleIconActionEdit = /** @class */ (function () {
    function ScaleIconActionEdit(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionEdit.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-edit',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionEdit.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionEdit = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionEdit);
    return ScaleIconActionEdit;
}());
var ScaleIconActionFastForward = /** @class */ (function () {
    function ScaleIconActionFastForward(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionFastForward.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-fast-forward',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionFastForward.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionFastForward = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionFastForward);
    return ScaleIconActionFastForward;
}());
var ScaleIconActionFavorite = /** @class */ (function () {
    function ScaleIconActionFavorite(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionFavorite.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-favorite',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionFavorite.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionFavorite = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionFavorite);
    return ScaleIconActionFavorite;
}());
var ScaleIconActionFilter = /** @class */ (function () {
    function ScaleIconActionFilter(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionFilter.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-filter',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionFilter.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionFilter = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionFilter);
    return ScaleIconActionFilter;
}());
var ScaleIconActionForward = /** @class */ (function () {
    function ScaleIconActionForward(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionForward.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-forward',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionForward.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionForward = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionForward);
    return ScaleIconActionForward;
}());
var ScaleIconActionFullScreen = /** @class */ (function () {
    function ScaleIconActionFullScreen(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionFullScreen.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-full-screen',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionFullScreen.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionFullScreen = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionFullScreen);
    return ScaleIconActionFullScreen;
}());
var ScaleIconActionHidePassword = /** @class */ (function () {
    function ScaleIconActionHidePassword(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionHidePassword.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-hide-password',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionHidePassword.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionHidePassword = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionHidePassword);
    return ScaleIconActionHidePassword;
}());
var ScaleIconActionIndeterminate = /** @class */ (function () {
    function ScaleIconActionIndeterminate(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionIndeterminate.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-indeterminate',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionIndeterminate.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionIndeterminate = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionIndeterminate);
    return ScaleIconActionIndeterminate;
}());
var ScaleIconActionInstall = /** @class */ (function () {
    function ScaleIconActionInstall(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionInstall.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-install',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionInstall.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionInstall = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionInstall);
    return ScaleIconActionInstall;
}());
var ScaleIconActionLink = /** @class */ (function () {
    function ScaleIconActionLink(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionLink.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-link',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionLink.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionLink = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionLink);
    return ScaleIconActionLink;
}());
var ScaleIconActionLogout = /** @class */ (function () {
    function ScaleIconActionLogout(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionLogout.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-logout',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionLogout.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionLogout = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionLogout);
    return ScaleIconActionLogout;
}());
var ScaleIconActionLoop = /** @class */ (function () {
    function ScaleIconActionLoop(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionLoop.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-loop',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionLoop.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionLoop = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionLoop);
    return ScaleIconActionLoop;
}());
var ScaleIconActionMenu = /** @class */ (function () {
    function ScaleIconActionMenu(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionMenu.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-menu',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionMenu.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionMenu = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionMenu);
    return ScaleIconActionMenu;
}());
var ScaleIconActionMicrophone = /** @class */ (function () {
    function ScaleIconActionMicrophone(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionMicrophone.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-microphone',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionMicrophone.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionMicrophone = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionMicrophone);
    return ScaleIconActionMicrophone;
}());
var ScaleIconActionMinimizeScreen = /** @class */ (function () {
    function ScaleIconActionMinimizeScreen(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionMinimizeScreen.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-minimize-screen',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionMinimizeScreen.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionMinimizeScreen = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionMinimizeScreen);
    return ScaleIconActionMinimizeScreen;
}());
var ScaleIconActionMore = /** @class */ (function () {
    function ScaleIconActionMore(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionMore.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-more',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionMore.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionMore = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionMore);
    return ScaleIconActionMore;
}());
var ScaleIconActionMove = /** @class */ (function () {
    function ScaleIconActionMove(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionMove.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-move',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionMove.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionMove = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionMove);
    return ScaleIconActionMove;
}());
var ScaleIconActionMute = /** @class */ (function () {
    function ScaleIconActionMute(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionMute.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-mute',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionMute.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionMute = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionMute);
    return ScaleIconActionMute;
}());
var ScaleIconActionNotification = /** @class */ (function () {
    function ScaleIconActionNotification(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionNotification.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-notification',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionNotification.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionNotification = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionNotification);
    return ScaleIconActionNotification;
}());
var ScaleIconActionPause = /** @class */ (function () {
    function ScaleIconActionPause(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionPause.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-pause',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionPause.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionPause = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionPause);
    return ScaleIconActionPause;
}());
var ScaleIconActionPin = /** @class */ (function () {
    function ScaleIconActionPin(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionPin.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-pin',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionPin.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionPin = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionPin);
    return ScaleIconActionPin;
}());
var ScaleIconActionPlay = /** @class */ (function () {
    function ScaleIconActionPlay(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionPlay.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-play',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionPlay.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionPlay = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionPlay);
    return ScaleIconActionPlay;
}());
var ScaleIconActionPopUpWindow = /** @class */ (function () {
    function ScaleIconActionPopUpWindow(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionPopUpWindow.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-pop-up-window',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionPopUpWindow.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionPopUpWindow = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionPopUpWindow);
    return ScaleIconActionPopUpWindow;
}());
var ScaleIconActionPrint = /** @class */ (function () {
    function ScaleIconActionPrint(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionPrint.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-print',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionPrint.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionPrint = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionPrint);
    return ScaleIconActionPrint;
}());
var ScaleIconActionRandom = /** @class */ (function () {
    function ScaleIconActionRandom(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionRandom.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-random',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionRandom.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionRandom = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionRandom);
    return ScaleIconActionRandom;
}());
var ScaleIconActionRefresh = /** @class */ (function () {
    function ScaleIconActionRefresh(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionRefresh.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-refresh',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionRefresh.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionRefresh = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionRefresh);
    return ScaleIconActionRefresh;
}());
var ScaleIconActionRemove = /** @class */ (function () {
    function ScaleIconActionRemove(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionRemove.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-remove',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionRemove.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionRemove = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionRemove);
    return ScaleIconActionRemove;
}());
var ScaleIconActionRestart = /** @class */ (function () {
    function ScaleIconActionRestart(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionRestart.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-restart',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionRestart.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionRestart = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionRestart);
    return ScaleIconActionRestart;
}());
var ScaleIconActionSearch = /** @class */ (function () {
    function ScaleIconActionSearch(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionSearch.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-search',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionSearch.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionSearch = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionSearch);
    return ScaleIconActionSearch;
}());
var ScaleIconActionShoppingCart = /** @class */ (function () {
    function ScaleIconActionShoppingCart(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionShoppingCart.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-shopping-cart',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionShoppingCart.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionShoppingCart = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionShoppingCart);
    return ScaleIconActionShoppingCart;
}());
var ScaleIconActionShowPassword = /** @class */ (function () {
    function ScaleIconActionShowPassword(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionShowPassword.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-show-password',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionShowPassword.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionShowPassword = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionShowPassword);
    return ScaleIconActionShowPassword;
}());
var ScaleIconActionSort = /** @class */ (function () {
    function ScaleIconActionSort(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionSort.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-sort',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionSort.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionSort = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionSort);
    return ScaleIconActionSort;
}());
var ScaleIconActionSoundOn = /** @class */ (function () {
    function ScaleIconActionSoundOn(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionSoundOn.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-sound-on',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionSoundOn.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionSoundOn = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionSoundOn);
    return ScaleIconActionSoundOn;
}());
var ScaleIconActionStreamOn = /** @class */ (function () {
    function ScaleIconActionStreamOn(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionStreamOn.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-stream-on',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionStreamOn.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionStreamOn = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionStreamOn);
    return ScaleIconActionStreamOn;
}());
var ScaleIconActionSuccess = /** @class */ (function () {
    function ScaleIconActionSuccess(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionSuccess.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-success',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionSuccess.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionSuccess = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionSuccess);
    return ScaleIconActionSuccess;
}());
var ScaleIconActionThumbsDown = /** @class */ (function () {
    function ScaleIconActionThumbsDown(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionThumbsDown.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-thumbs-down',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionThumbsDown.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionThumbsDown = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionThumbsDown);
    return ScaleIconActionThumbsDown;
}());
var ScaleIconActionThumbsUp = /** @class */ (function () {
    function ScaleIconActionThumbsUp(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionThumbsUp.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-thumbs-up',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionThumbsUp.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionThumbsUp = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionThumbsUp);
    return ScaleIconActionThumbsUp;
}());
var ScaleIconActionTilesAdd = /** @class */ (function () {
    function ScaleIconActionTilesAdd(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionTilesAdd.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-tiles-add',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionTilesAdd.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionTilesAdd = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionTilesAdd);
    return ScaleIconActionTilesAdd;
}());
var ScaleIconActionUpload = /** @class */ (function () {
    function ScaleIconActionUpload(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionUpload.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-upload',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionUpload.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionUpload = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionUpload);
    return ScaleIconActionUpload;
}());
var ScaleIconActionVolumeDown = /** @class */ (function () {
    function ScaleIconActionVolumeDown(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionVolumeDown.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-volume-down',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionVolumeDown.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionVolumeDown = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionVolumeDown);
    return ScaleIconActionVolumeDown;
}());
var ScaleIconActionVolumeUp = /** @class */ (function () {
    function ScaleIconActionVolumeUp(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionVolumeUp.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-volume-up',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionVolumeUp.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionVolumeUp = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionVolumeUp);
    return ScaleIconActionVolumeUp;
}());
var ScaleIconActionZoomIn = /** @class */ (function () {
    function ScaleIconActionZoomIn(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionZoomIn.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-zoom-in',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionZoomIn.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionZoomIn = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionZoomIn);
    return ScaleIconActionZoomIn;
}());
var ScaleIconActionZoomOut = /** @class */ (function () {
    function ScaleIconActionZoomOut(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconActionZoomOut.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-action-zoom-out',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconActionZoomOut.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconActionZoomOut = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconActionZoomOut);
    return ScaleIconActionZoomOut;
}());
var ScaleIconAlertCompliance = /** @class */ (function () {
    function ScaleIconAlertCompliance(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconAlertCompliance.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-alert-compliance',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconAlertCompliance.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconAlertCompliance = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconAlertCompliance);
    return ScaleIconAlertCompliance;
}());
var ScaleIconAlertError = /** @class */ (function () {
    function ScaleIconAlertError(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconAlertError.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-alert-error',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconAlertError.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconAlertError = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconAlertError);
    return ScaleIconAlertError;
}());
var ScaleIconAlertHelp = /** @class */ (function () {
    function ScaleIconAlertHelp(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconAlertHelp.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-alert-help',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconAlertHelp.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconAlertHelp = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconAlertHelp);
    return ScaleIconAlertHelp;
}());
var ScaleIconAlertImprintDataprivacy = /** @class */ (function () {
    function ScaleIconAlertImprintDataprivacy(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconAlertImprintDataprivacy.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-alert-imprint-dataprivacy',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconAlertImprintDataprivacy.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconAlertImprintDataprivacy = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconAlertImprintDataprivacy);
    return ScaleIconAlertImprintDataprivacy;
}());
var ScaleIconAlertInformation = /** @class */ (function () {
    function ScaleIconAlertInformation(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconAlertInformation.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-alert-information',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconAlertInformation.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconAlertInformation = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconAlertInformation);
    return ScaleIconAlertInformation;
}());
var ScaleIconAlertLegal = /** @class */ (function () {
    function ScaleIconAlertLegal(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconAlertLegal.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-alert-legal',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconAlertLegal.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconAlertLegal = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconAlertLegal);
    return ScaleIconAlertLegal;
}());
var ScaleIconAlertSecurity = /** @class */ (function () {
    function ScaleIconAlertSecurity(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconAlertSecurity.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-alert-security',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconAlertSecurity.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconAlertSecurity = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconAlertSecurity);
    return ScaleIconAlertSecurity;
}());
var ScaleIconAlertSuccess = /** @class */ (function () {
    function ScaleIconAlertSuccess(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconAlertSuccess.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-alert-success',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconAlertSuccess.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconAlertSuccess = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconAlertSuccess);
    return ScaleIconAlertSuccess;
}());
var ScaleIconAlertWarning = /** @class */ (function () {
    function ScaleIconAlertWarning(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconAlertWarning.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-alert-warning',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconAlertWarning.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconAlertWarning = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconAlertWarning);
    return ScaleIconAlertWarning;
}());
var ScaleIconCommunicationCallIncoming = /** @class */ (function () {
    function ScaleIconCommunicationCallIncoming(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconCommunicationCallIncoming.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-communication-call-incoming',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconCommunicationCallIncoming.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconCommunicationCallIncoming = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconCommunicationCallIncoming);
    return ScaleIconCommunicationCallIncoming;
}());
var ScaleIconCommunicationCallOutgoing = /** @class */ (function () {
    function ScaleIconCommunicationCallOutgoing(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconCommunicationCallOutgoing.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-communication-call-outgoing',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconCommunicationCallOutgoing.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconCommunicationCallOutgoing = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconCommunicationCallOutgoing);
    return ScaleIconCommunicationCallOutgoing;
}());
var ScaleIconCommunicationChat = /** @class */ (function () {
    function ScaleIconCommunicationChat(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconCommunicationChat.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-communication-chat',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconCommunicationChat.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconCommunicationChat = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconCommunicationChat);
    return ScaleIconCommunicationChat;
}());
var ScaleIconCommunicationEmail = /** @class */ (function () {
    function ScaleIconCommunicationEmail(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconCommunicationEmail.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-communication-email',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconCommunicationEmail.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconCommunicationEmail = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconCommunicationEmail);
    return ScaleIconCommunicationEmail;
}());
var ScaleIconCommunicationEndCall = /** @class */ (function () {
    function ScaleIconCommunicationEndCall(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconCommunicationEndCall.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-communication-end-call',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconCommunicationEndCall.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconCommunicationEndCall = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconCommunicationEndCall);
    return ScaleIconCommunicationEndCall;
}());
var ScaleIconCommunicationFeedback = /** @class */ (function () {
    function ScaleIconCommunicationFeedback(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconCommunicationFeedback.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-communication-feedback',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconCommunicationFeedback.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconCommunicationFeedback = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconCommunicationFeedback);
    return ScaleIconCommunicationFeedback;
}());
var ScaleIconCommunicationMessage = /** @class */ (function () {
    function ScaleIconCommunicationMessage(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconCommunicationMessage.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-communication-message',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconCommunicationMessage.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconCommunicationMessage = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconCommunicationMessage);
    return ScaleIconCommunicationMessage;
}());
var ScaleIconCommunicationPhoneNumber = /** @class */ (function () {
    function ScaleIconCommunicationPhoneNumber(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconCommunicationPhoneNumber.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-communication-phone-number',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconCommunicationPhoneNumber.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconCommunicationPhoneNumber = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconCommunicationPhoneNumber);
    return ScaleIconCommunicationPhoneNumber;
}());
var ScaleIconCommunicationRecipient = /** @class */ (function () {
    function ScaleIconCommunicationRecipient(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconCommunicationRecipient.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-communication-recipient',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconCommunicationRecipient.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconCommunicationRecipient = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconCommunicationRecipient);
    return ScaleIconCommunicationRecipient;
}());
var ScaleIconCommunicationVoiceMessage = /** @class */ (function () {
    function ScaleIconCommunicationVoiceMessage(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconCommunicationVoiceMessage.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-communication-voice-message',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconCommunicationVoiceMessage.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconCommunicationVoiceMessage = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconCommunicationVoiceMessage);
    return ScaleIconCommunicationVoiceMessage;
}());
var ScaleIconContentAchievement = /** @class */ (function () {
    function ScaleIconContentAchievement(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentAchievement.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-achievement',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentAchievement.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentAchievement = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentAchievement);
    return ScaleIconContentAchievement;
}());
var ScaleIconContentApplications = /** @class */ (function () {
    function ScaleIconContentApplications(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentApplications.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-applications',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentApplications.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentApplications = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentApplications);
    return ScaleIconContentApplications;
}());
var ScaleIconContentBiometric = /** @class */ (function () {
    function ScaleIconContentBiometric(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentBiometric.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-biometric',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentBiometric.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentBiometric = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentBiometric);
    return ScaleIconContentBiometric;
}());
var ScaleIconContentBookmark = /** @class */ (function () {
    function ScaleIconContentBookmark(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentBookmark.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-bookmark',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentBookmark.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentBookmark = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentBookmark);
    return ScaleIconContentBookmark;
}());
var ScaleIconContentCalendar = /** @class */ (function () {
    function ScaleIconContentCalendar(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentCalendar.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-calendar',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentCalendar.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentCalendar = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentCalendar);
    return ScaleIconContentCalendar;
}());
var ScaleIconContentClipboard = /** @class */ (function () {
    function ScaleIconContentClipboard(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentClipboard.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-clipboard',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentClipboard.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentClipboard = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentClipboard);
    return ScaleIconContentClipboard;
}());
var ScaleIconContentClock = /** @class */ (function () {
    function ScaleIconContentClock(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentClock.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-clock',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentClock.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentClock = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentClock);
    return ScaleIconContentClock;
}());
var ScaleIconContentCreditCard = /** @class */ (function () {
    function ScaleIconContentCreditCard(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentCreditCard.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-credit-card',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentCreditCard.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentCreditCard = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentCreditCard);
    return ScaleIconContentCreditCard;
}());
var ScaleIconContentDelivery = /** @class */ (function () {
    function ScaleIconContentDelivery(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentDelivery.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-delivery',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentDelivery.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentDelivery = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentDelivery);
    return ScaleIconContentDelivery;
}());
var ScaleIconContentDigitalBanking = /** @class */ (function () {
    function ScaleIconContentDigitalBanking(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentDigitalBanking.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-digital-banking',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentDigitalBanking.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentDigitalBanking = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentDigitalBanking);
    return ScaleIconContentDigitalBanking;
}());
var ScaleIconContentDigitalMedia = /** @class */ (function () {
    function ScaleIconContentDigitalMedia(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentDigitalMedia.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-digital-media',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentDigitalMedia.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentDigitalMedia = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentDigitalMedia);
    return ScaleIconContentDigitalMedia;
}());
var ScaleIconContentDraftFile = /** @class */ (function () {
    function ScaleIconContentDraftFile(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentDraftFile.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-draft-file',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentDraftFile.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentDraftFile = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentDraftFile);
    return ScaleIconContentDraftFile;
}());
var ScaleIconContentESim = /** @class */ (function () {
    function ScaleIconContentESim(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentESim.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-e-sim',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentESim.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentESim = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentESim);
    return ScaleIconContentESim;
}());
var ScaleIconContentEu = /** @class */ (function () {
    function ScaleIconContentEu(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentEu.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-eu',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentEu.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentEu = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentEu);
    return ScaleIconContentEu;
}());
var ScaleIconContentFeatures = /** @class */ (function () {
    function ScaleIconContentFeatures(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentFeatures.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-features',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentFeatures.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentFeatures = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentFeatures);
    return ScaleIconContentFeatures;
}());
var ScaleIconContentFlexibleTariffs = /** @class */ (function () {
    function ScaleIconContentFlexibleTariffs(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentFlexibleTariffs.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-flexible-tariffs',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentFlexibleTariffs.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentFlexibleTariffs = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentFlexibleTariffs);
    return ScaleIconContentFlexibleTariffs;
}());
var ScaleIconContentHeart = /** @class */ (function () {
    function ScaleIconContentHeart(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentHeart.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-heart',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentHeart.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentHeart = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentHeart);
    return ScaleIconContentHeart;
}());
var ScaleIconContentHistory = /** @class */ (function () {
    function ScaleIconContentHistory(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentHistory.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-history',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentHistory.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentHistory = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentHistory);
    return ScaleIconContentHistory;
}());
var ScaleIconContentInternational = /** @class */ (function () {
    function ScaleIconContentInternational(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentInternational.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-international',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentInternational.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentInternational = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentInternational);
    return ScaleIconContentInternational;
}());
var ScaleIconContentInternationalSms = /** @class */ (function () {
    function ScaleIconContentInternationalSms(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentInternationalSms.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-international-sms',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentInternationalSms.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentInternationalSms = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentInternationalSms);
    return ScaleIconContentInternationalSms;
}());
var ScaleIconContentInterview = /** @class */ (function () {
    function ScaleIconContentInterview(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentInterview.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-interview',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentInterview.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentInterview = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentInterview);
    return ScaleIconContentInterview;
}());
var ScaleIconContentKey = /** @class */ (function () {
    function ScaleIconContentKey(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentKey.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-key',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentKey.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentKey = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentKey);
    return ScaleIconContentKey;
}());
var ScaleIconContentLock = /** @class */ (function () {
    function ScaleIconContentLock(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentLock.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-lock',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentLock.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentLock = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentLock);
    return ScaleIconContentLock;
}());
var ScaleIconContentMediaFolder = /** @class */ (function () {
    function ScaleIconContentMediaFolder(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentMediaFolder.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-media-folder',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentMediaFolder.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentMediaFolder = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentMediaFolder);
    return ScaleIconContentMediaFolder;
}());
var ScaleIconContentMoneyAt = /** @class */ (function () {
    function ScaleIconContentMoneyAt(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentMoneyAt.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-money-at',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentMoneyAt.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentMoneyAt = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentMoneyAt);
    return ScaleIconContentMoneyAt;
}());
var ScaleIconContentMusic = /** @class */ (function () {
    function ScaleIconContentMusic(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentMusic.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-music',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentMusic.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentMusic = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentMusic);
    return ScaleIconContentMusic;
}());
var ScaleIconContentNews = /** @class */ (function () {
    function ScaleIconContentNews(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentNews.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-news',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentNews.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentNews = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentNews);
    return ScaleIconContentNews;
}());
var ScaleIconContentPrepaidActivate = /** @class */ (function () {
    function ScaleIconContentPrepaidActivate(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentPrepaidActivate.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-prepaid-activate',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentPrepaidActivate.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentPrepaidActivate = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentPrepaidActivate);
    return ScaleIconContentPrepaidActivate;
}());
var ScaleIconContentPriceTag = /** @class */ (function () {
    function ScaleIconContentPriceTag(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentPriceTag.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-price-tag',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentPriceTag.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentPriceTag = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentPriceTag);
    return ScaleIconContentPriceTag;
}());
var ScaleIconContentRss = /** @class */ (function () {
    function ScaleIconContentRss(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentRss.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-rss',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentRss.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentRss = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentRss);
    return ScaleIconContentRss;
}());
var ScaleIconContentShop = /** @class */ (function () {
    function ScaleIconContentShop(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentShop.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-shop',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentShop.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentShop = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentShop);
    return ScaleIconContentShop;
}());
var ScaleIconContentSignal = /** @class */ (function () {
    function ScaleIconContentSignal(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentSignal.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-signal',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentSignal.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentSignal = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentSignal);
    return ScaleIconContentSignal;
}());
var ScaleIconContentSimCard = /** @class */ (function () {
    function ScaleIconContentSimCard(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentSimCard.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-sim-card',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentSimCard.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentSimCard = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentSimCard);
    return ScaleIconContentSimCard;
}());
var ScaleIconContentSmile = /** @class */ (function () {
    function ScaleIconContentSmile(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentSmile.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-smile',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentSmile.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentSmile = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentSmile);
    return ScaleIconContentSmile;
}());
var ScaleIconContentTariffs = /** @class */ (function () {
    function ScaleIconContentTariffs(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentTariffs.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-tariffs',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentTariffs.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentTariffs = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentTariffs);
    return ScaleIconContentTariffs;
}());
var ScaleIconContentTransport = /** @class */ (function () {
    function ScaleIconContentTransport(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentTransport.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-transport',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentTransport.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentTransport = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentTransport);
    return ScaleIconContentTransport;
}());
var ScaleIconContentUnlock = /** @class */ (function () {
    function ScaleIconContentUnlock(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentUnlock.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-unlock',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentUnlock.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentUnlock = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentUnlock);
    return ScaleIconContentUnlock;
}());
var ScaleIconContentVoucher = /** @class */ (function () {
    function ScaleIconContentVoucher(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentVoucher.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-voucher',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentVoucher.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentVoucher = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentVoucher);
    return ScaleIconContentVoucher;
}());
var ScaleIconContentWallet = /** @class */ (function () {
    function ScaleIconContentWallet(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconContentWallet.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-content-wallet',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconContentWallet.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconContentWallet = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconContentWallet);
    return ScaleIconContentWallet;
}());
var ScaleIconDeviceAddDevice = /** @class */ (function () {
    function ScaleIconDeviceAddDevice(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceAddDevice.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-add-device',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceAddDevice.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceAddDevice = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceAddDevice);
    return ScaleIconDeviceAddDevice;
}());
var ScaleIconDeviceCamera = /** @class */ (function () {
    function ScaleIconDeviceCamera(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceCamera.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-camera',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceCamera.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceCamera = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceCamera);
    return ScaleIconDeviceCamera;
}());
var ScaleIconDeviceChangeCamera = /** @class */ (function () {
    function ScaleIconDeviceChangeCamera(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceChangeCamera.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-change-camera',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceChangeCamera.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceChangeCamera = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceChangeCamera);
    return ScaleIconDeviceChangeCamera;
}());
var ScaleIconDeviceComputer = /** @class */ (function () {
    function ScaleIconDeviceComputer(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceComputer.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-computer',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceComputer.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceComputer = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceComputer);
    return ScaleIconDeviceComputer;
}());
var ScaleIconDeviceDevicePhone = /** @class */ (function () {
    function ScaleIconDeviceDevicePhone(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceDevicePhone.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-device-phone',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceDevicePhone.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceDevicePhone = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceDevicePhone);
    return ScaleIconDeviceDevicePhone;
}());
var ScaleIconDeviceDeviceRouter = /** @class */ (function () {
    function ScaleIconDeviceDeviceRouter(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceDeviceRouter.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-device-router',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceDeviceRouter.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceDeviceRouter = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceDeviceRouter);
    return ScaleIconDeviceDeviceRouter;
}());
var ScaleIconDeviceDeviceTv = /** @class */ (function () {
    function ScaleIconDeviceDeviceTv(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceDeviceTv.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-device-tv',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceDeviceTv.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceDeviceTv = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceDeviceTv);
    return ScaleIconDeviceDeviceTv;
}());
var ScaleIconDeviceDeviceWatch = /** @class */ (function () {
    function ScaleIconDeviceDeviceWatch(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceDeviceWatch.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-device-watch',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceDeviceWatch.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceDeviceWatch = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceDeviceWatch);
    return ScaleIconDeviceDeviceWatch;
}());
var ScaleIconDeviceFixedLineServices = /** @class */ (function () {
    function ScaleIconDeviceFixedLineServices(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceFixedLineServices.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-fixed-line-services',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceFixedLineServices.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceFixedLineServices = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceFixedLineServices);
    return ScaleIconDeviceFixedLineServices;
}());
var ScaleIconDeviceMediaReceiver = /** @class */ (function () {
    function ScaleIconDeviceMediaReceiver(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceMediaReceiver.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-media-receiver',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceMediaReceiver.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceMediaReceiver = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceMediaReceiver);
    return ScaleIconDeviceMediaReceiver;
}());
var ScaleIconDeviceMobileDevicesCombination = /** @class */ (function () {
    function ScaleIconDeviceMobileDevicesCombination(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceMobileDevicesCombination.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-mobile-devices-combination',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceMobileDevicesCombination.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceMobileDevicesCombination = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceMobileDevicesCombination);
    return ScaleIconDeviceMobileDevicesCombination;
}());
var ScaleIconDeviceMobileEquipment = /** @class */ (function () {
    function ScaleIconDeviceMobileEquipment(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceMobileEquipment.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-mobile-equipment',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceMobileEquipment.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceMobileEquipment = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceMobileEquipment);
    return ScaleIconDeviceMobileEquipment;
}());
var ScaleIconDeviceMobilePhoneInsurance = /** @class */ (function () {
    function ScaleIconDeviceMobilePhoneInsurance(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceMobilePhoneInsurance.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-mobile-phone-insurance',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceMobilePhoneInsurance.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceMobilePhoneInsurance = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceMobilePhoneInsurance);
    return ScaleIconDeviceMobilePhoneInsurance;
}());
var ScaleIconDeviceMobileServices = /** @class */ (function () {
    function ScaleIconDeviceMobileServices(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceMobileServices.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-mobile-services',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceMobileServices.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceMobileServices = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceMobileServices);
    return ScaleIconDeviceMobileServices;
}());
var ScaleIconDeviceNoCamera = /** @class */ (function () {
    function ScaleIconDeviceNoCamera(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceNoCamera.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-no-camera',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceNoCamera.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceNoCamera = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceNoCamera);
    return ScaleIconDeviceNoCamera;
}());
var ScaleIconDevicePhotoCamera = /** @class */ (function () {
    function ScaleIconDevicePhotoCamera(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDevicePhotoCamera.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-photo-camera',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDevicePhotoCamera.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDevicePhotoCamera = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDevicePhotoCamera);
    return ScaleIconDevicePhotoCamera;
}());
var ScaleIconDeviceRemoteController = /** @class */ (function () {
    function ScaleIconDeviceRemoteController(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceRemoteController.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-remote-controller',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceRemoteController.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceRemoteController = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceRemoteController);
    return ScaleIconDeviceRemoteController;
}());
var ScaleIconDeviceReplacementMobilephone = /** @class */ (function () {
    function ScaleIconDeviceReplacementMobilephone(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceReplacementMobilephone.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-replacement-mobilephone',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceReplacementMobilephone.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceReplacementMobilephone = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceReplacementMobilephone);
    return ScaleIconDeviceReplacementMobilephone;
}());
var ScaleIconDeviceScreenRotate = /** @class */ (function () {
    function ScaleIconDeviceScreenRotate(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceScreenRotate.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-screen-rotate',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceScreenRotate.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceScreenRotate = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceScreenRotate);
    return ScaleIconDeviceScreenRotate;
}());
var ScaleIconDeviceSmartSpeaker = /** @class */ (function () {
    function ScaleIconDeviceSmartSpeaker(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceSmartSpeaker.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-smart-speaker',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceSmartSpeaker.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceSmartSpeaker = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceSmartSpeaker);
    return ScaleIconDeviceSmartSpeaker;
}());
var ScaleIconDeviceTvAndMobile = /** @class */ (function () {
    function ScaleIconDeviceTvAndMobile(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconDeviceTvAndMobile.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-device-tv-and-mobile',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconDeviceTvAndMobile.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconDeviceTvAndMobile = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconDeviceTvAndMobile);
    return ScaleIconDeviceTvAndMobile;
}());
var ScaleIconHomeHome = /** @class */ (function () {
    function ScaleIconHomeHome(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconHomeHome.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-home-home',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconHomeHome.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconHomeHome = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconHomeHome);
    return ScaleIconHomeHome;
}());
var ScaleIconHomeInternetAtHome = /** @class */ (function () {
    function ScaleIconHomeInternetAtHome(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconHomeInternetAtHome.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-home-internet-at-home',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconHomeInternetAtHome.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconHomeInternetAtHome = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconHomeInternetAtHome);
    return ScaleIconHomeInternetAtHome;
}());
var ScaleIconHomeIot = /** @class */ (function () {
    function ScaleIconHomeIot(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconHomeIot.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-home-iot',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconHomeIot.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconHomeIot = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconHomeIot);
    return ScaleIconHomeIot;
}());
var ScaleIconHomeNoWifi = /** @class */ (function () {
    function ScaleIconHomeNoWifi(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconHomeNoWifi.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-home-no-wifi',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconHomeNoWifi.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconHomeNoWifi = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconHomeNoWifi);
    return ScaleIconHomeNoWifi;
}());
var ScaleIconHomeSmarthome = /** @class */ (function () {
    function ScaleIconHomeSmarthome(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconHomeSmarthome.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-home-smarthome',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconHomeSmarthome.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconHomeSmarthome = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconHomeSmarthome);
    return ScaleIconHomeSmarthome;
}());
var ScaleIconHomeWifi = /** @class */ (function () {
    function ScaleIconHomeWifi(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconHomeWifi.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-home-wifi',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconHomeWifi.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconHomeWifi = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconHomeWifi);
    return ScaleIconHomeWifi;
}());
var ScaleIconNavigationCircleTopUp = /** @class */ (function () {
    function ScaleIconNavigationCircleTopUp(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconNavigationCircleTopUp.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-navigation-circle-top-up',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconNavigationCircleTopUp.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconNavigationCircleTopUp = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconNavigationCircleTopUp);
    return ScaleIconNavigationCircleTopUp;
}());
var ScaleIconNavigationCollapseDown = /** @class */ (function () {
    function ScaleIconNavigationCollapseDown(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconNavigationCollapseDown.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-navigation-collapse-down',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconNavigationCollapseDown.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconNavigationCollapseDown = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconNavigationCollapseDown);
    return ScaleIconNavigationCollapseDown;
}());
var ScaleIconNavigationCollapseUp = /** @class */ (function () {
    function ScaleIconNavigationCollapseUp(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconNavigationCollapseUp.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-navigation-collapse-up',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconNavigationCollapseUp.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconNavigationCollapseUp = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconNavigationCollapseUp);
    return ScaleIconNavigationCollapseUp;
}());
var ScaleIconNavigationExternalLink = /** @class */ (function () {
    function ScaleIconNavigationExternalLink(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconNavigationExternalLink.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-navigation-external-link',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconNavigationExternalLink.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconNavigationExternalLink = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconNavigationExternalLink);
    return ScaleIconNavigationExternalLink;
}());
var ScaleIconNavigationInternalLink = /** @class */ (function () {
    function ScaleIconNavigationInternalLink(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconNavigationInternalLink.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-navigation-internal-link',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconNavigationInternalLink.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconNavigationInternalLink = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconNavigationInternalLink);
    return ScaleIconNavigationInternalLink;
}());
var ScaleIconNavigationLeft = /** @class */ (function () {
    function ScaleIconNavigationLeft(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconNavigationLeft.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-navigation-left',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconNavigationLeft.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconNavigationLeft = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconNavigationLeft);
    return ScaleIconNavigationLeft;
}());
var ScaleIconNavigationLocation = /** @class */ (function () {
    function ScaleIconNavigationLocation(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconNavigationLocation.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-navigation-location',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconNavigationLocation.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconNavigationLocation = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconNavigationLocation);
    return ScaleIconNavigationLocation;
}());
var ScaleIconNavigationMyLocation = /** @class */ (function () {
    function ScaleIconNavigationMyLocation(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconNavigationMyLocation.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-navigation-my-location',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconNavigationMyLocation.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconNavigationMyLocation = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconNavigationMyLocation);
    return ScaleIconNavigationMyLocation;
}());
var ScaleIconNavigationRight = /** @class */ (function () {
    function ScaleIconNavigationRight(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconNavigationRight.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-navigation-right',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconNavigationRight.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconNavigationRight = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconNavigationRight);
    return ScaleIconNavigationRight;
}());
var ScaleIconNavigationStart = /** @class */ (function () {
    function ScaleIconNavigationStart(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconNavigationStart.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-navigation-start',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconNavigationStart.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconNavigationStart = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconNavigationStart);
    return ScaleIconNavigationStart;
}());
var ScaleIconNavigationTopUp = /** @class */ (function () {
    function ScaleIconNavigationTopUp(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconNavigationTopUp.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-navigation-top-up',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconNavigationTopUp.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconNavigationTopUp = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconNavigationTopUp);
    return ScaleIconNavigationTopUp;
}());
var ScaleIconProcessOrderStatus = /** @class */ (function () {
    function ScaleIconProcessOrderStatus(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconProcessOrderStatus.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-process-order-status',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconProcessOrderStatus.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconProcessOrderStatus = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconProcessOrderStatus);
    return ScaleIconProcessOrderStatus;
}());
var ScaleIconProcessProcessing = /** @class */ (function () {
    function ScaleIconProcessProcessing(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconProcessProcessing.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-process-processing',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconProcessProcessing.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconProcessProcessing = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconProcessProcessing);
    return ScaleIconProcessProcessing;
}());
var ScaleIconServiceDevicesService = /** @class */ (function () {
    function ScaleIconServiceDevicesService(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconServiceDevicesService.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-service-devices-service',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconServiceDevicesService.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconServiceDevicesService = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconServiceDevicesService);
    return ScaleIconServiceDevicesService;
}());
var ScaleIconServiceMaintanance = /** @class */ (function () {
    function ScaleIconServiceMaintanance(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconServiceMaintanance.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-service-maintanance',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconServiceMaintanance.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconServiceMaintanance = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconServiceMaintanance);
    return ScaleIconServiceMaintanance;
}());
var ScaleIconServiceServices = /** @class */ (function () {
    function ScaleIconServiceServices(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconServiceServices.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-service-services',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconServiceServices.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconServiceServices = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconServiceServices);
    return ScaleIconServiceServices;
}());
var ScaleIconServiceSettings = /** @class */ (function () {
    function ScaleIconServiceSettings(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconServiceSettings.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-service-settings',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconServiceSettings.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconServiceSettings = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconServiceSettings);
    return ScaleIconServiceSettings;
}());
var ScaleIconServiceSupport = /** @class */ (function () {
    function ScaleIconServiceSupport(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconServiceSupport.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-service-support',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconServiceSupport.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconServiceSupport = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconServiceSupport);
    return ScaleIconServiceSupport;
}());
var ScaleIconTProductMagentaCloud = /** @class */ (function () {
    function ScaleIconTProductMagentaCloud(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconTProductMagentaCloud.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-t-product-magenta-cloud',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconTProductMagentaCloud.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconTProductMagentaCloud = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconTProductMagentaCloud);
    return ScaleIconTProductMagentaCloud;
}());
var ScaleIconTProductMagentaTv = /** @class */ (function () {
    function ScaleIconTProductMagentaTv(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconTProductMagentaTv.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-t-product-magenta-tv',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconTProductMagentaTv.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconTProductMagentaTv = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconTProductMagentaTv);
    return ScaleIconTProductMagentaTv;
}());
var ScaleIconTProductMagentaone = /** @class */ (function () {
    function ScaleIconTProductMagentaone(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconTProductMagentaone.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-t-product-magentaone',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconTProductMagentaone.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconTProductMagentaone = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconTProductMagentaone);
    return ScaleIconTProductMagentaone;
}());
var ScaleIconTProductMeasureInternetSpeed = /** @class */ (function () {
    function ScaleIconTProductMeasureInternetSpeed(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconTProductMeasureInternetSpeed.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-t-product-measure-internet-speed',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconTProductMeasureInternetSpeed.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconTProductMeasureInternetSpeed = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconTProductMeasureInternetSpeed);
    return ScaleIconTProductMeasureInternetSpeed;
}());
var ScaleIconTProductSeamlessConnectivity = /** @class */ (function () {
    function ScaleIconTProductSeamlessConnectivity(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconTProductSeamlessConnectivity.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-t-product-seamless-connectivity',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconTProductSeamlessConnectivity.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconTProductSeamlessConnectivity = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconTProductSeamlessConnectivity);
    return ScaleIconTProductSeamlessConnectivity;
}());
var ScaleIconTProductTelekomShopB = /** @class */ (function () {
    function ScaleIconTProductTelekomShopB(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconTProductTelekomShopB.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-t-product-telekom-shop-b',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconTProductTelekomShopB.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconTProductTelekomShopB = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconTProductTelekomShopB);
    return ScaleIconTProductTelekomShopB;
}());
var ScaleIconTProductUsage = /** @class */ (function () {
    function ScaleIconTProductUsage(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconTProductUsage.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-t-product-usage',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconTProductUsage.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconTProductUsage = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconTProductUsage);
    return ScaleIconTProductUsage;
}());
var ScaleIconUserFileAnalytics = /** @class */ (function () {
    function ScaleIconUserFileAnalytics(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileAnalytics.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-analytics',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileAnalytics.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileAnalytics = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileAnalytics);
    return ScaleIconUserFileAnalytics;
}());
var ScaleIconUserFileAttachment = /** @class */ (function () {
    function ScaleIconUserFileAttachment(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileAttachment.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-attachment',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileAttachment.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileAttachment = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileAttachment);
    return ScaleIconUserFileAttachment;
}());
var ScaleIconUserFileAudioFile = /** @class */ (function () {
    function ScaleIconUserFileAudioFile(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileAudioFile.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-audio-file',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileAudioFile.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileAudioFile = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileAudioFile);
    return ScaleIconUserFileAudioFile;
}());
var ScaleIconUserFileBilling = /** @class */ (function () {
    function ScaleIconUserFileBilling(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileBilling.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-billing',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileBilling.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileBilling = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileBilling);
    return ScaleIconUserFileBilling;
}());
var ScaleIconUserFileBussinesUsers = /** @class */ (function () {
    function ScaleIconUserFileBussinesUsers(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileBussinesUsers.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-bussines-users',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileBussinesUsers.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileBussinesUsers = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileBussinesUsers);
    return ScaleIconUserFileBussinesUsers;
}());
var ScaleIconUserFileCommunities = /** @class */ (function () {
    function ScaleIconUserFileCommunities(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileCommunities.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-communities',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileCommunities.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileCommunities = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileCommunities);
    return ScaleIconUserFileCommunities;
}());
var ScaleIconUserFileContacts = /** @class */ (function () {
    function ScaleIconUserFileContacts(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileContacts.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-contacts',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileContacts.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileContacts = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileContacts);
    return ScaleIconUserFileContacts;
}());
var ScaleIconUserFileContracts = /** @class */ (function () {
    function ScaleIconUserFileContracts(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileContracts.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-contracts',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileContracts.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileContracts = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileContracts);
    return ScaleIconUserFileContracts;
}());
var ScaleIconUserFileFamilies = /** @class */ (function () {
    function ScaleIconUserFileFamilies(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileFamilies.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-families',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileFamilies.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileFamilies = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileFamilies);
    return ScaleIconUserFileFamilies;
}());
var ScaleIconUserFileHandshake = /** @class */ (function () {
    function ScaleIconUserFileHandshake(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileHandshake.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-handshake',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileHandshake.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileHandshake = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileHandshake);
    return ScaleIconUserFileHandshake;
}());
var ScaleIconUserFileIdCard = /** @class */ (function () {
    function ScaleIconUserFileIdCard(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileIdCard.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-id-card',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileIdCard.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileIdCard = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileIdCard);
    return ScaleIconUserFileIdCard;
}());
var ScaleIconUserFileImageFile = /** @class */ (function () {
    function ScaleIconUserFileImageFile(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileImageFile.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-image-file',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileImageFile.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileImageFile = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileImageFile);
    return ScaleIconUserFileImageFile;
}());
var ScaleIconUserFileLogout = /** @class */ (function () {
    function ScaleIconUserFileLogout(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileLogout.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-logout',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileLogout.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileLogout = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileLogout);
    return ScaleIconUserFileLogout;
}());
var ScaleIconUserFilePdfFile = /** @class */ (function () {
    function ScaleIconUserFilePdfFile(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFilePdfFile.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-pdf-file',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFilePdfFile.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFilePdfFile = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFilePdfFile);
    return ScaleIconUserFilePdfFile;
}());
var ScaleIconUserFileSwitchUsers = /** @class */ (function () {
    function ScaleIconUserFileSwitchUsers(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileSwitchUsers.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-switch-users',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileSwitchUsers.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileSwitchUsers = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileSwitchUsers);
    return ScaleIconUserFileSwitchUsers;
}());
var ScaleIconUserFileUser = /** @class */ (function () {
    function ScaleIconUserFileUser(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileUser.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-user',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileUser.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileUser = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileUser);
    return ScaleIconUserFileUser;
}());
var ScaleIconUserFileVideos = /** @class */ (function () {
    function ScaleIconUserFileVideos(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconUserFileVideos.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-user-file-videos',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconUserFileVideos.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconUserFileVideos = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconUserFileVideos);
    return ScaleIconUserFileVideos;
}());
var ScaleIconWeatherCloudy = /** @class */ (function () {
    function ScaleIconWeatherCloudy(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherCloudy.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-cloudy',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherCloudy.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherCloudy = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherCloudy);
    return ScaleIconWeatherCloudy;
}());
var ScaleIconWeatherCloudyRain = /** @class */ (function () {
    function ScaleIconWeatherCloudyRain(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherCloudyRain.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-cloudy-rain',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherCloudyRain.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherCloudyRain = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherCloudyRain);
    return ScaleIconWeatherCloudyRain;
}());
var ScaleIconWeatherCloudySleet = /** @class */ (function () {
    function ScaleIconWeatherCloudySleet(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherCloudySleet.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-cloudy-sleet',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherCloudySleet.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherCloudySleet = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherCloudySleet);
    return ScaleIconWeatherCloudySleet;
}());
var ScaleIconWeatherCloudySnow = /** @class */ (function () {
    function ScaleIconWeatherCloudySnow(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherCloudySnow.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-cloudy-snow',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherCloudySnow.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherCloudySnow = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherCloudySnow);
    return ScaleIconWeatherCloudySnow;
}());
var ScaleIconWeatherCloudyThunderRain = /** @class */ (function () {
    function ScaleIconWeatherCloudyThunderRain(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherCloudyThunderRain.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-cloudy-thunder-rain',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherCloudyThunderRain.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherCloudyThunderRain = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherCloudyThunderRain);
    return ScaleIconWeatherCloudyThunderRain;
}());
var ScaleIconWeatherCloudyThunderSnow = /** @class */ (function () {
    function ScaleIconWeatherCloudyThunderSnow(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherCloudyThunderSnow.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-cloudy-thunder-snow',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherCloudyThunderSnow.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherCloudyThunderSnow = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherCloudyThunderSnow);
    return ScaleIconWeatherCloudyThunderSnow;
}());
var ScaleIconWeatherHeavySleet = /** @class */ (function () {
    function ScaleIconWeatherHeavySleet(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherHeavySleet.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-heavy-sleet',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherHeavySleet.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherHeavySleet = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherHeavySleet);
    return ScaleIconWeatherHeavySleet;
}());
var ScaleIconWeatherHeavySnow = /** @class */ (function () {
    function ScaleIconWeatherHeavySnow(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherHeavySnow.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-heavy-snow',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherHeavySnow.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherHeavySnow = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherHeavySnow);
    return ScaleIconWeatherHeavySnow;
}());
var ScaleIconWeatherMoonClear = /** @class */ (function () {
    function ScaleIconWeatherMoonClear(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherMoonClear.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-moon-clear',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherMoonClear.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherMoonClear = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherMoonClear);
    return ScaleIconWeatherMoonClear;
}());
var ScaleIconWeatherMoonCloudyA = /** @class */ (function () {
    function ScaleIconWeatherMoonCloudyA(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherMoonCloudyA.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-moon-cloudy-a',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherMoonCloudyA.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherMoonCloudyA = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherMoonCloudyA);
    return ScaleIconWeatherMoonCloudyA;
}());
var ScaleIconWeatherMoonCloudyB = /** @class */ (function () {
    function ScaleIconWeatherMoonCloudyB(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherMoonCloudyB.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-moon-cloudy-b',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherMoonCloudyB.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherMoonCloudyB = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherMoonCloudyB);
    return ScaleIconWeatherMoonCloudyB;
}());
var ScaleIconWeatherMoonRain = /** @class */ (function () {
    function ScaleIconWeatherMoonRain(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherMoonRain.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-moon-rain',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherMoonRain.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherMoonRain = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherMoonRain);
    return ScaleIconWeatherMoonRain;
}());
var ScaleIconWeatherMoonSleet = /** @class */ (function () {
    function ScaleIconWeatherMoonSleet(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherMoonSleet.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-moon-sleet',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherMoonSleet.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherMoonSleet = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherMoonSleet);
    return ScaleIconWeatherMoonSleet;
}());
var ScaleIconWeatherMoonSnow = /** @class */ (function () {
    function ScaleIconWeatherMoonSnow(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherMoonSnow.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-moon-snow',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherMoonSnow.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherMoonSnow = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherMoonSnow);
    return ScaleIconWeatherMoonSnow;
}());
var ScaleIconWeatherMoonThunderRain = /** @class */ (function () {
    function ScaleIconWeatherMoonThunderRain(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherMoonThunderRain.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-moon-thunder-rain',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherMoonThunderRain.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherMoonThunderRain = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherMoonThunderRain);
    return ScaleIconWeatherMoonThunderRain;
}());
var ScaleIconWeatherMoonThunderSnow = /** @class */ (function () {
    function ScaleIconWeatherMoonThunderSnow(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherMoonThunderSnow.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-moon-thunder-snow',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherMoonThunderSnow.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherMoonThunderSnow = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherMoonThunderSnow);
    return ScaleIconWeatherMoonThunderSnow;
}());
var ScaleIconWeatherOvercast = /** @class */ (function () {
    function ScaleIconWeatherOvercast(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherOvercast.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-overcast',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherOvercast.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherOvercast = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherOvercast);
    return ScaleIconWeatherOvercast;
}());
var ScaleIconWeatherRain = /** @class */ (function () {
    function ScaleIconWeatherRain(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherRain.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-rain',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherRain.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherRain = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherRain);
    return ScaleIconWeatherRain;
}());
var ScaleIconWeatherSunny = /** @class */ (function () {
    function ScaleIconWeatherSunny(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherSunny.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-sunny',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherSunny.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherSunny = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherSunny);
    return ScaleIconWeatherSunny;
}());
var ScaleIconWeatherThunderRain = /** @class */ (function () {
    function ScaleIconWeatherThunderRain(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherThunderRain.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-thunder-rain',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherThunderRain.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherThunderRain = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherThunderRain);
    return ScaleIconWeatherThunderRain;
}());
var ScaleIconWeatherThunderSnow = /** @class */ (function () {
    function ScaleIconWeatherThunderSnow(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleIconWeatherThunderSnow.decorators = [
        { type: Component, args: [{
                    selector: 'scale-icon-weather-thunder-snow',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
                },] },
    ];
    /** @nocollapse */
    ScaleIconWeatherThunderSnow.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleIconWeatherThunderSnow = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'decorative', 'fill', 'selected', 'size']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleIconWeatherThunderSnow);
    return ScaleIconWeatherThunderSnow;
}());
var ScaleInput = /** @class */ (function () {
    function ScaleInput(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeyDown']);
    }
    ScaleInput.decorators = [
        { type: Component, args: [{
                    selector: 'scale-input',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['checked', 'cols', 'controlled', 'counter', 'disabled', 'helperText', 'icon', 'inputId', 'invalid', 'label', 'maxLength', 'minLength', 'multiple', 'name', 'placeholder', 'required', 'resize', 'rows', 'size', 'status', 'styles', 'transparent', 'type', 'value', 'variant', 'visibleSize'],
                    outputs: ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeyDown']
                },] },
    ];
    /** @nocollapse */
    ScaleInput.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleInput = __decorate([
        ProxyCmp({
            inputs: ['checked', 'cols', 'controlled', 'counter', 'disabled', 'helperText', 'icon', 'inputId', 'invalid', 'label', 'maxLength', 'minLength', 'multiple', 'name', 'placeholder', 'required', 'resize', 'rows', 'size', 'status', 'styles', 'transparent', 'type', 'value', 'variant', 'visibleSize']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleInput);
    return ScaleInput;
}());
var ScaleLink = /** @class */ (function () {
    function ScaleLink(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleLink.decorators = [
        { type: Component, args: [{
                    selector: 'scale-link',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'download', 'href', 'hreflang', 'iconPosition', 'innerTabindex', 'omitUnderline', 'ping', 'referrerpolicy', 'rel', 'styles', 'target', 'type']
                },] },
    ];
    /** @nocollapse */
    ScaleLink.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleLink = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'download', 'href', 'hreflang', 'iconPosition', 'innerTabindex', 'omitUnderline', 'ping', 'referrerpolicy', 'rel', 'styles', 'target', 'type'],
            methods: ['setFocus']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleLink);
    return ScaleLink;
}());
var ScaleList = /** @class */ (function () {
    function ScaleList(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleList.decorators = [
        { type: Component, args: [{
                    selector: 'scale-list',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['ordered', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleList.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleList = __decorate([
        ProxyCmp({
            inputs: ['ordered', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleList);
    return ScaleList;
}());
var ScaleListItem = /** @class */ (function () {
    function ScaleListItem(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleListItem.decorators = [
        { type: Component, args: [{
                    selector: 'scale-list-item',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['index', 'marker', 'ordered', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleListItem.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleListItem = __decorate([
        ProxyCmp({
            inputs: ['index', 'marker', 'ordered', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleListItem);
    return ScaleListItem;
}());
var ScaleLoadingSpinner = /** @class */ (function () {
    function ScaleLoadingSpinner(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleLoadingSpinner.decorators = [
        { type: Component, args: [{
                    selector: 'scale-loading-spinner',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['alignment', 'size', 'text', 'variant']
                },] },
    ];
    /** @nocollapse */
    ScaleLoadingSpinner.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleLoadingSpinner = __decorate([
        ProxyCmp({
            inputs: ['alignment', 'size', 'text', 'variant']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleLoadingSpinner);
    return ScaleLoadingSpinner;
}());
var ScaleLogo = /** @class */ (function () {
    function ScaleLogo(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleLogo.decorators = [
        { type: Component, args: [{
                    selector: 'scale-logo',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'focusable', 'href', 'language', 'logoAriaDescribedBy', 'logoTitle', 'scrollIntoViewOnFocus', 'size', 'styles', 'transparent', 'variant']
                },] },
    ];
    /** @nocollapse */
    ScaleLogo.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleLogo = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'focusable', 'href', 'language', 'logoAriaDescribedBy', 'logoTitle', 'scrollIntoViewOnFocus', 'size', 'styles', 'transparent', 'variant']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleLogo);
    return ScaleLogo;
}());
var ScaleLogoSvg = /** @class */ (function () {
    function ScaleLogoSvg(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleLogoSvg.decorators = [
        { type: Component, args: [{
                    selector: 'scale-logo-svg',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accessibilityTitle', 'color', 'focusable', 'language', 'role']
                },] },
    ];
    /** @nocollapse */
    ScaleLogoSvg.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleLogoSvg = __decorate([
        ProxyCmp({
            inputs: ['accessibilityTitle', 'color', 'focusable', 'language', 'role']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleLogoSvg);
    return ScaleLogoSvg;
}());
var ScaleMenuFlyout = /** @class */ (function () {
    function ScaleMenuFlyout(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleMenuFlyout.decorators = [
        { type: Component, args: [{
                    selector: 'scale-menu-flyout',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['closeOnSelect', 'direction', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleMenuFlyout.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleMenuFlyout = __decorate([
        ProxyCmp({
            inputs: ['closeOnSelect', 'direction', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleMenuFlyout);
    return ScaleMenuFlyout;
}());
var ScaleMenuFlyoutDivider = /** @class */ (function () {
    function ScaleMenuFlyoutDivider(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleMenuFlyoutDivider.decorators = [
        { type: Component, args: [{
                    selector: 'scale-menu-flyout-divider',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['styles']
                },] },
    ];
    /** @nocollapse */
    ScaleMenuFlyoutDivider.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleMenuFlyoutDivider = __decorate([
        ProxyCmp({
            inputs: ['styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleMenuFlyoutDivider);
    return ScaleMenuFlyoutDivider;
}());
var ScaleMenuFlyoutItem = /** @class */ (function () {
    function ScaleMenuFlyoutItem(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-select', 'scaleSelect']);
    }
    ScaleMenuFlyoutItem.decorators = [
        { type: Component, args: [{
                    selector: 'scale-menu-flyout-item',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['active', 'cascade', 'checkable', 'checked', 'disabled', 'styles', 'value'],
                    outputs: ['scale-select', 'scaleSelect']
                },] },
    ];
    /** @nocollapse */
    ScaleMenuFlyoutItem.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleMenuFlyoutItem = __decorate([
        ProxyCmp({
            inputs: ['active', 'cascade', 'checkable', 'checked', 'disabled', 'styles', 'value'],
            methods: ['triggerEvent']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleMenuFlyoutItem);
    return ScaleMenuFlyoutItem;
}());
var ScaleMenuFlyoutList = /** @class */ (function () {
    function ScaleMenuFlyoutList(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-open', 'scaleOpen', 'scale-close', 'scaleClose']);
    }
    ScaleMenuFlyoutList.decorators = [
        { type: Component, args: [{
                    selector: 'scale-menu-flyout-list',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['active', 'closeOnSelect', 'direction', 'opened', 'styles', 'trigger'],
                    outputs: ['scale-open', 'scaleOpen', 'scale-close', 'scaleClose']
                },] },
    ];
    /** @nocollapse */
    ScaleMenuFlyoutList.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleMenuFlyoutList = __decorate([
        ProxyCmp({
            inputs: ['active', 'closeOnSelect', 'direction', 'opened', 'styles', 'trigger'],
            methods: ['open', 'close', 'setFocus']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleMenuFlyoutList);
    return ScaleMenuFlyoutList;
}());
var ScaleModal = /** @class */ (function () {
    function ScaleModal(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-open', 'scaleOpen', 'scale-before-close', 'scaleBeforeClose', 'scale-close', 'scaleClose']);
    }
    ScaleModal.decorators = [
        { type: Component, args: [{
                    selector: 'scale-modal',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['alignActions', 'allowInjectingStyleToBody', 'closeButtonLabel', 'closeButtonTitle', 'duration', 'heading', 'opened', 'size', 'styles'],
                    outputs: ['scale-open', 'scaleOpen', 'scale-before-close', 'scaleBeforeClose', 'scale-close', 'scaleClose']
                },] },
    ];
    /** @nocollapse */
    ScaleModal.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleModal = __decorate([
        ProxyCmp({
            inputs: ['alignActions', 'allowInjectingStyleToBody', 'closeButtonLabel', 'closeButtonTitle', 'duration', 'heading', 'opened', 'size', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleModal);
    return ScaleModal;
}());
var ScaleNavIcon = /** @class */ (function () {
    function ScaleNavIcon(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleNavIcon.decorators = [
        { type: Component, args: [{
                    selector: 'scale-nav-icon',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['active', 'badge', 'badgeLabel', 'clickLink', 'href', 'icon', 'isActive', 'isMobileMenuOpen', 'mobileMenuOpen', 'refMobileMenuToggle', 'refMobileUserMenuToggle', 'refUserMenuToggle']
                },] },
    ];
    /** @nocollapse */
    ScaleNavIcon.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleNavIcon = __decorate([
        ProxyCmp({
            inputs: ['active', 'badge', 'badgeLabel', 'clickLink', 'href', 'icon', 'isActive', 'isMobileMenuOpen', 'mobileMenuOpen', 'refMobileMenuToggle', 'refMobileUserMenuToggle', 'refUserMenuToggle']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleNavIcon);
    return ScaleNavIcon;
}());
var ScaleNavMain = /** @class */ (function () {
    function ScaleNavMain(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleNavMain.decorators = [
        { type: Component, args: [{
                    selector: 'scale-nav-main',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['active', 'clickLink', 'href', 'isActive', 'isMegaMenuVisible', 'megaMenuVisible', 'name', 'popup']
                },] },
    ];
    /** @nocollapse */
    ScaleNavMain.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleNavMain = __decorate([
        ProxyCmp({
            inputs: ['active', 'clickLink', 'href', 'isActive', 'isMegaMenuVisible', 'megaMenuVisible', 'name', 'popup']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleNavMain);
    return ScaleNavMain;
}());
var ScaleNavSegment = /** @class */ (function () {
    function ScaleNavSegment(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleNavSegment.decorators = [
        { type: Component, args: [{
                    selector: 'scale-nav-segment',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['active', 'href', 'isActive']
                },] },
    ];
    /** @nocollapse */
    ScaleNavSegment.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleNavSegment = __decorate([
        ProxyCmp({
            inputs: ['active', 'href', 'isActive']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleNavSegment);
    return ScaleNavSegment;
}());
var ScaleNotificationBadge = /** @class */ (function () {
    function ScaleNotificationBadge(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleNotificationBadge.decorators = [
        { type: Component, args: [{
                    selector: 'scale-notification-badge',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['clickHandler', 'label', 'maxCharacters', 'type']
                },] },
    ];
    /** @nocollapse */
    ScaleNotificationBadge.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleNotificationBadge = __decorate([
        ProxyCmp({
            inputs: ['clickHandler', 'label', 'maxCharacters', 'type']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleNotificationBadge);
    return ScaleNotificationBadge;
}());
var ScaleNotificationBanner = /** @class */ (function () {
    function ScaleNotificationBanner(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-close']);
    }
    ScaleNotificationBanner.decorators = [
        { type: Component, args: [{
                    selector: 'scale-notification-banner',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['autoHide', 'autoHideDuration', 'dismissible', 'href', 'opened', 'variant'],
                    outputs: ['scale-close']
                },] },
    ];
    /** @nocollapse */
    ScaleNotificationBanner.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleNotificationBanner = __decorate([
        ProxyCmp({
            inputs: ['autoHide', 'autoHideDuration', 'dismissible', 'href', 'opened', 'variant'],
            methods: ['open']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleNotificationBanner);
    return ScaleNotificationBanner;
}());
var ScaleNotificationMessage = /** @class */ (function () {
    function ScaleNotificationMessage(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-close']);
    }
    ScaleNotificationMessage.decorators = [
        { type: Component, args: [{
                    selector: 'scale-notification-message',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['autoHide', 'autoHideDuration', 'dismissible', 'opened', 'variant'],
                    outputs: ['scale-close']
                },] },
    ];
    /** @nocollapse */
    ScaleNotificationMessage.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleNotificationMessage = __decorate([
        ProxyCmp({
            inputs: ['autoHide', 'autoHideDuration', 'dismissible', 'opened', 'variant'],
            methods: ['open']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleNotificationMessage);
    return ScaleNotificationMessage;
}());
var ScaleNotificationToast = /** @class */ (function () {
    function ScaleNotificationToast(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleNotificationToast.decorators = [
        { type: Component, args: [{
                    selector: 'scale-notification-toast',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['alignment', 'animated', 'autoHide', 'autoHideDuration', 'fadeDuration', 'href', 'opened', 'positionHorizontal', 'positionVertical', 'story', 'styles', 'variant']
                },] },
    ];
    /** @nocollapse */
    ScaleNotificationToast.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleNotificationToast = __decorate([
        ProxyCmp({
            inputs: ['alignment', 'animated', 'autoHide', 'autoHideDuration', 'fadeDuration', 'href', 'opened', 'positionHorizontal', 'positionVertical', 'story', 'styles', 'variant'],
            methods: ['open']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleNotificationToast);
    return ScaleNotificationToast;
}());
var ScalePagination = /** @class */ (function () {
    function ScalePagination(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-pagination', 'scalePagination']);
    }
    ScalePagination.decorators = [
        { type: Component, args: [{
                    selector: 'scale-pagination',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['ariaLabelFirstPage', 'ariaLabelLastPage', 'ariaLabelNextPage', 'ariaLabelPreviousPage', 'hideBorder', 'hideBorders', 'pageSize', 'size', 'small', 'startElement', 'styles', 'totalElements'],
                    outputs: ['scale-pagination', 'scalePagination']
                },] },
    ];
    /** @nocollapse */
    ScalePagination.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScalePagination = __decorate([
        ProxyCmp({
            inputs: ['ariaLabelFirstPage', 'ariaLabelLastPage', 'ariaLabelNextPage', 'ariaLabelPreviousPage', 'hideBorder', 'hideBorders', 'pageSize', 'size', 'small', 'startElement', 'styles', 'totalElements']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScalePagination);
    return ScalePagination;
}());
var ScaleProgressBar = /** @class */ (function () {
    function ScaleProgressBar(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleProgressBar.decorators = [
        { type: Component, args: [{
                    selector: 'scale-progress-bar',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['busy', 'customColor', 'disabled', 'hasError', 'icon', 'label', 'mute', 'percentage', 'progressBarId', 'showStatus', 'statusDescription', 'statusInside', 'strokeWidth', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleProgressBar.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleProgressBar = __decorate([
        ProxyCmp({
            inputs: ['busy', 'customColor', 'disabled', 'hasError', 'icon', 'label', 'mute', 'percentage', 'progressBarId', 'showStatus', 'statusDescription', 'statusInside', 'strokeWidth', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleProgressBar);
    return ScaleProgressBar;
}());
var ScaleRadioButton = /** @class */ (function () {
    function ScaleRadioButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange']);
    }
    ScaleRadioButton.decorators = [
        { type: Component, args: [{
                    selector: 'scale-radio-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['checked', 'disabled', 'helperText', 'inputId', 'invalid', 'label', 'name', 'status', 'styles', 'value'],
                    outputs: ['scale-change', 'scaleChange']
                },] },
    ];
    /** @nocollapse */
    ScaleRadioButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleRadioButton = __decorate([
        ProxyCmp({
            inputs: ['checked', 'disabled', 'helperText', 'inputId', 'invalid', 'label', 'name', 'status', 'styles', 'value']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleRadioButton);
    return ScaleRadioButton;
}());
var ScaleRadioButtonGroup = /** @class */ (function () {
    function ScaleRadioButtonGroup(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleRadioButtonGroup.decorators = [
        { type: Component, args: [{
                    selector: 'scale-radio-button-group',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['helperText', 'invalid', 'label', 'status']
                },] },
    ];
    /** @nocollapse */
    ScaleRadioButtonGroup.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleRadioButtonGroup = __decorate([
        ProxyCmp({
            inputs: ['helperText', 'invalid', 'label', 'status']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleRadioButtonGroup);
    return ScaleRadioButtonGroup;
}());
var ScaleRatingStars = /** @class */ (function () {
    function ScaleRatingStars(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange']);
    }
    ScaleRatingStars.decorators = [
        { type: Component, args: [{
                    selector: 'scale-rating-stars',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['ariaLabelTranslation', 'disabled', 'hideLabel', 'infoText', 'label', 'max', 'maxRating', 'minRating', 'rating', 'readonly', 'size', 'starSize'],
                    outputs: ['scale-change', 'scaleChange']
                },] },
    ];
    /** @nocollapse */
    ScaleRatingStars.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleRatingStars = __decorate([
        ProxyCmp({
            inputs: ['ariaLabelTranslation', 'disabled', 'hideLabel', 'infoText', 'label', 'max', 'maxRating', 'minRating', 'rating', 'readonly', 'size', 'starSize']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleRatingStars);
    return ScaleRatingStars;
}());
var ScaleSidebarNav = /** @class */ (function () {
    function ScaleSidebarNav(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleSidebarNav.decorators = [
        { type: Component, args: [{
                    selector: 'scale-sidebar-nav',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['ariaLabelSidebarNav', 'collapsible', 'collapsibleLabel', 'collapsibleMediaQuery', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleSidebarNav.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleSidebarNav = __decorate([
        ProxyCmp({
            inputs: ['ariaLabelSidebarNav', 'collapsible', 'collapsibleLabel', 'collapsibleMediaQuery', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleSidebarNav);
    return ScaleSidebarNav;
}());
var ScaleSidebarNavCollapsible = /** @class */ (function () {
    function ScaleSidebarNavCollapsible(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleSidebarNavCollapsible.decorators = [
        { type: Component, args: [{
                    selector: 'scale-sidebar-nav-collapsible',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['active', 'bold', 'condensed', 'expanded', 'href', 'label', 'nestingLevel', 'styles', 'tag']
                },] },
    ];
    /** @nocollapse */
    ScaleSidebarNavCollapsible.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleSidebarNavCollapsible = __decorate([
        ProxyCmp({
            inputs: ['active', 'bold', 'condensed', 'expanded', 'href', 'label', 'nestingLevel', 'styles', 'tag']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleSidebarNavCollapsible);
    return ScaleSidebarNavCollapsible;
}());
var ScaleSidebarNavItem = /** @class */ (function () {
    function ScaleSidebarNavItem(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleSidebarNavItem.decorators = [
        { type: Component, args: [{
                    selector: 'scale-sidebar-nav-item',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['active', 'bold', 'condensed', 'current', 'nestingLevel', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleSidebarNavItem.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleSidebarNavItem = __decorate([
        ProxyCmp({
            inputs: ['active', 'bold', 'condensed', 'current', 'nestingLevel', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleSidebarNavItem);
    return ScaleSidebarNavItem;
}());
var ScaleSlider = /** @class */ (function () {
    function ScaleSlider(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange', 'scale-input', 'scaleInput']);
    }
    ScaleSlider.decorators = [
        { type: Component, args: [{
                    selector: 'scale-slider',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['customColor', 'decimals', 'disabled', 'label', 'max', 'min', 'name', 'showValue', 'sliderId', 'step', 'styles', 'thumbLarge', 'trackSmall', 'unit', 'value'],
                    outputs: ['scale-change', 'scaleChange', 'scale-input', 'scaleInput']
                },] },
    ];
    /** @nocollapse */
    ScaleSlider.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleSlider = __decorate([
        ProxyCmp({
            inputs: ['customColor', 'decimals', 'disabled', 'label', 'max', 'min', 'name', 'showValue', 'sliderId', 'step', 'styles', 'thumbLarge', 'trackSmall', 'unit', 'value']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleSlider);
    return ScaleSlider;
}());
var ScaleSsrSlotFix = /** @class */ (function () {
    function ScaleSsrSlotFix(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleSsrSlotFix.decorators = [
        { type: Component, args: [{
                    selector: 'scale-ssr-slot-fix',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] },
    ];
    /** @nocollapse */
    ScaleSsrSlotFix.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    return ScaleSsrSlotFix;
}());
var ScaleSwitch = /** @class */ (function () {
    function ScaleSwitch(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange']);
    }
    ScaleSwitch.decorators = [
        { type: Component, args: [{
                    selector: 'scale-switch',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['checked', 'disabled', 'inputId', 'label', 'name', 'styles'],
                    outputs: ['scale-change', 'scaleChange']
                },] },
    ];
    /** @nocollapse */
    ScaleSwitch.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleSwitch = __decorate([
        ProxyCmp({
            inputs: ['checked', 'disabled', 'inputId', 'label', 'name', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleSwitch);
    return ScaleSwitch;
}());
var ScaleTabHeader = /** @class */ (function () {
    function ScaleTabHeader(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleTabHeader.decorators = [
        { type: Component, args: [{
                    selector: 'scale-tab-header',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'selected', 'size', 'small', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleTabHeader.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleTabHeader = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'selected', 'size', 'small', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleTabHeader);
    return ScaleTabHeader;
}());
var ScaleTabNav = /** @class */ (function () {
    function ScaleTabNav(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleTabNav.decorators = [
        { type: Component, args: [{
                    selector: 'scale-tab-nav',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['size', 'small', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleTabNav.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleTabNav = __decorate([
        ProxyCmp({
            inputs: ['size', 'small', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleTabNav);
    return ScaleTabNav;
}());
var ScaleTabPanel = /** @class */ (function () {
    function ScaleTabPanel(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleTabPanel.decorators = [
        { type: Component, args: [{
                    selector: 'scale-tab-panel',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['size', 'small', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleTabPanel.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleTabPanel = __decorate([
        ProxyCmp({
            inputs: ['size', 'small', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleTabPanel);
    return ScaleTabPanel;
}());
var ScaleTable = /** @class */ (function () {
    function ScaleTable(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleTable.decorators = [
        { type: Component, args: [{
                    selector: 'scale-table',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['showSort', 'size', 'striped', 'styles']
                },] },
    ];
    /** @nocollapse */
    ScaleTable.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleTable = __decorate([
        ProxyCmp({
            inputs: ['showSort', 'size', 'striped', 'styles']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleTable);
    return ScaleTable;
}());
var ScaleTag = /** @class */ (function () {
    function ScaleTag(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-close', 'scaleClose']);
    }
    ScaleTag.decorators = [
        { type: Component, args: [{
                    selector: 'scale-tag',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'dismissText', 'dismissable', 'href', 'size', 'styles', 'target', 'variant'],
                    outputs: ['scale-close', 'scaleClose']
                },] },
    ];
    /** @nocollapse */
    ScaleTag.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleTag = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'dismissText', 'dismissable', 'href', 'size', 'styles', 'target', 'variant']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleTag);
    return ScaleTag;
}());
var ScaleTextField = /** @class */ (function () {
    function ScaleTextField(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeydown']);
    }
    ScaleTextField.decorators = [
        { type: Component, args: [{
                    selector: 'scale-text-field',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['counter', 'disabled', 'helperText', 'inputAutofocus', 'inputId', 'invalid', 'label', 'list', 'max', 'maxLength', 'min', 'minLength', 'name', 'placeholder', 'readonly', 'required', 'size', 'status', 'step', 'styles', 'transparent', 'type', 'value'],
                    outputs: ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeydown']
                },] },
    ];
    /** @nocollapse */
    ScaleTextField.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleTextField = __decorate([
        ProxyCmp({
            inputs: ['counter', 'disabled', 'helperText', 'inputAutofocus', 'inputId', 'invalid', 'label', 'list', 'max', 'maxLength', 'min', 'minLength', 'name', 'placeholder', 'readonly', 'required', 'size', 'status', 'step', 'styles', 'transparent', 'type', 'value']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleTextField);
    return ScaleTextField;
}());
var ScaleTextarea = /** @class */ (function () {
    function ScaleTextarea(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeyDown']);
    }
    ScaleTextarea.decorators = [
        { type: Component, args: [{
                    selector: 'scale-textarea',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['cols', 'counter', 'disabled', 'helperText', 'inputAutofocus', 'inputId', 'invalid', 'label', 'maxLength', 'minLength', 'name', 'placeholder', 'readonly', 'required', 'resize', 'rows', 'status', 'styles', 'transparent', 'value'],
                    outputs: ['scale-input', 'scaleInput', 'scale-change', 'scaleChange', 'scale-focus', 'scaleFocus', 'scale-blur', 'scaleBlur', 'scale-keydown', 'scaleKeyDown']
                },] },
    ];
    /** @nocollapse */
    ScaleTextarea.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleTextarea = __decorate([
        ProxyCmp({
            inputs: ['cols', 'counter', 'disabled', 'helperText', 'inputAutofocus', 'inputId', 'invalid', 'label', 'maxLength', 'minLength', 'name', 'placeholder', 'readonly', 'required', 'resize', 'rows', 'status', 'styles', 'transparent', 'value']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleTextarea);
    return ScaleTextarea;
}());
var ScaleToast = /** @class */ (function () {
    function ScaleToast(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    ScaleToast.decorators = [
        { type: Component, args: [{
                    selector: 'scale-toast',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['animated', 'autoHide', 'fadeDuration', 'opened', 'positionRight', 'positionTop', 'size', 'styles', 'time', 'variant']
                },] },
    ];
    /** @nocollapse */
    ScaleToast.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleToast = __decorate([
        ProxyCmp({
            inputs: ['animated', 'autoHide', 'fadeDuration', 'opened', 'positionRight', 'positionTop', 'size', 'styles', 'time', 'variant'],
            methods: ['open']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleToast);
    return ScaleToast;
}());
var ScaleToggleButton = /** @class */ (function () {
    function ScaleToggleButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-click', 'scaleClick']);
    }
    ScaleToggleButton.decorators = [
        { type: Component, args: [{
                    selector: 'scale-toggle-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['ariaDescriptionTranslation', 'ariaLabelToggleButton', 'ariaLangDeselected', 'ariaLangSelected', 'background', 'colorScheme', 'disabled', 'hideBorder', 'iconOnly', 'iconPosition', 'position', 'radius', 'selected', 'size', 'styles', 'toggleButtonId', 'variant'],
                    outputs: ['scale-click', 'scaleClick']
                },] },
    ];
    /** @nocollapse */
    ScaleToggleButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleToggleButton = __decorate([
        ProxyCmp({
            inputs: ['ariaDescriptionTranslation', 'ariaLabelToggleButton', 'ariaLangDeselected', 'ariaLangSelected', 'background', 'colorScheme', 'disabled', 'hideBorder', 'iconOnly', 'iconPosition', 'position', 'radius', 'selected', 'size', 'styles', 'toggleButtonId', 'variant'],
            methods: ['setFocus']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleToggleButton);
    return ScaleToggleButton;
}());
var ScaleToggleGroup = /** @class */ (function () {
    function ScaleToggleGroup(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-change', 'scaleChange']);
    }
    ScaleToggleGroup.decorators = [
        { type: Component, args: [{
                    selector: 'scale-toggle-group',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['ariaLabelTranslation', 'background', 'colorScheme', 'disabled', 'fullWidth', 'hideBorder', 'singleSelect', 'size', 'styles', 'variant'],
                    outputs: ['scale-change', 'scaleChange']
                },] },
    ];
    /** @nocollapse */
    ScaleToggleGroup.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleToggleGroup = __decorate([
        ProxyCmp({
            inputs: ['ariaLabelTranslation', 'background', 'colorScheme', 'disabled', 'fullWidth', 'hideBorder', 'singleSelect', 'size', 'styles', 'variant']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleToggleGroup);
    return ScaleToggleGroup;
}());
var ScaleTooltip = /** @class */ (function () {
    function ScaleTooltip(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['scale-before-show', 'scale-show', 'scale-before-hide', 'scale-hide']);
    }
    ScaleTooltip.decorators = [
        { type: Component, args: [{
                    selector: 'scale-tooltip',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['content', 'disabled', 'distance', 'flip', 'open', 'placement', 'preventOverflow', 'skidding', 'styles', 'trigger'],
                    outputs: ['scale-before-show', 'scale-show', 'scale-before-hide', 'scale-hide']
                },] },
    ];
    /** @nocollapse */
    ScaleTooltip.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    ScaleTooltip = __decorate([
        ProxyCmp({
            inputs: ['content', 'disabled', 'distance', 'flip', 'open', 'placement', 'preventOverflow', 'skidding', 'styles', 'trigger'],
            methods: ['showTooltip', 'hideTooltip']
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, NgZone])
    ], ScaleTooltip);
    return ScaleTooltip;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ValueAccessor = /** @class */ (function () {
    function ValueAccessor(el) {
        this.el = el;
        this.onChange = (/**
         * @return {?}
         */
        function () { });
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ValueAccessor.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.el.nativeElement.value = this.lastValue = value == null ? '' : value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ValueAccessor.prototype.handleChangeEvent = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.lastValue) {
            this.lastValue = value;
            this.onChange(value);
        }
    };
    /**
     * @return {?}
     */
    ValueAccessor.prototype._handleBlurEvent = /**
     * @return {?}
     */
    function () {
        this.onTouched();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ValueAccessor.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ValueAccessor.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    ValueAccessor.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.el.nativeElement.disabled = isDisabled;
    };
    ValueAccessor.decorators = [
        { type: Directive, args: [{},] },
    ];
    /** @nocollapse */
    ValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ValueAccessor.propDecorators = {
        _handleBlurEvent: [{ type: HostListener, args: ['focusout',] }]
    };
    return ValueAccessor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BooleanValueAccessor = /** @class */ (function (_super) {
    __extends(BooleanValueAccessor, _super);
    function BooleanValueAccessor(el) {
        return _super.call(this, el) || this;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    BooleanValueAccessor.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.el.nativeElement.checked = this.lastValue = value == null ? false : value;
    };
    BooleanValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'scale-input[type=checkbox]',
                    host: {
                        '(scaleChange)': 'handleChangeEvent($event.target.checked)'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: BooleanValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    BooleanValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return BooleanValueAccessor;
}(ValueAccessor));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NumericValueAccessor = /** @class */ (function (_super) {
    __extends(NumericValueAccessor, _super);
    function NumericValueAccessor(el) {
        return _super.call(this, el) || this;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    NumericValueAccessor.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        _super.prototype.registerOnChange.call(this, (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            fn(value === '' ? null : parseFloat(value));
        }));
    };
    NumericValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'scale-slider',
                    host: {
                        '(scaleChange)': 'handleChangeEvent($event.target.value)'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: NumericValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    NumericValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return NumericValueAccessor;
}(ValueAccessor));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RadioValueAccessor = /** @class */ (function (_super) {
    __extends(RadioValueAccessor, _super);
    function RadioValueAccessor(el) {
        return _super.call(this, el) || this;
    }
    RadioValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'scale-input[type=radio]',
                    host: {
                        '(scaleChange)': 'handleChangeEvent($event.target.checked)'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: RadioValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    RadioValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return RadioValueAccessor;
}(ValueAccessor));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SelectValueAccessor = /** @class */ (function (_super) {
    __extends(SelectValueAccessor, _super);
    function SelectValueAccessor(el) {
        return _super.call(this, el) || this;
    }
    SelectValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'scale-input[type=select]',
                    host: {
                        '(scaleChange)': 'handleChangeEvent($event.target.value)'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: SelectValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    SelectValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return SelectValueAccessor;
}(ValueAccessor));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TextValueAccessor = /** @class */ (function (_super) {
    __extends(TextValueAccessor, _super);
    function TextValueAccessor(el) {
        return _super.call(this, el) || this;
    }
    TextValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'scale-input',
                    host: {
                        '(scaleChange)': 'handleChangeEvent($event.target.value)'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TextValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    TextValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return TextValueAccessor;
}(ValueAccessor));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
defineCustomElements(window);
/** @type {?} */
var DECLARATIONS = [
    // proxies
    AppLogo,
    AppMegaMenu,
    AppNavigationMainMobile,
    AppNavigationSectorMobile,
    ScaleAccordion,
    ScaleAlert,
    ScaleAppHeader,
    ScaleAppShell,
    ScaleCallout,
    ScaleBreadcrumb,
    ScaleButton,
    ScaleCard,
    ScaleCarousel,
    ScaleChartStackCard,
    ScaleCheckbox,
    ScaleCollapsible,
    ScaleDataGrid,
    ScaleDatePicker,
    ScaleDivider,
    ScaleIcon,
    ScaleInput,
    ScaleLink,
    ScaleList,
    ScaleListItem,
    ScaleLoadingSpinner,
    ScaleMenuFlyout,
    ScaleMenuFlyoutDivider,
    ScaleMenuFlyoutItem,
    ScaleMenuFlyoutList,
    ScaleModal,
    ScalePagination,
    ScaleProgressBar,
    ScaleRadioButton,
    ScaleRatingStars,
    ScaleSidebarNav,
    ScaleSidebarNavCollapsible,
    ScaleSidebarNavItem,
    ScaleSlider,
    ScaleSsrSlotFix,
    ScaleSwitch,
    ScaleTabHeader,
    ScaleTabNav,
    ScaleTabPanel,
    ScaleTable,
    ScaleTag,
    ScaleTextField,
    ScaleToast,
    // Value Accessors
    BooleanValueAccessor,
    NumericValueAccessor,
    RadioValueAccessor,
    SelectValueAccessor,
    TextValueAccessor,
];
var ComponentLibraryModule = /** @class */ (function () {
    function ComponentLibraryModule() {
    }
    ComponentLibraryModule.decorators = [
        { type: NgModule, args: [{
                    declarations: DECLARATIONS,
                    exports: DECLARATIONS,
                    imports: [],
                    providers: [],
                },] },
    ];
    return ComponentLibraryModule;
}());

export { AppLogo, AppMegaMenu, AppNavigationMainMobile, AppNavigationSectorMobile, AppNavigationUserMenu, ComponentLibraryModule, ScaleAccordion, ScaleAlert, ScaleAppFooter, ScaleAppHeader, ScaleAppShell, ScaleBreadcrumb, ScaleButton, ScaleCallout, ScaleCard, ScaleCarousel, ScaleChartStackCard, ScaleCheckbox, ScaleCheckboxGroup, ScaleCollapsible, ScaleDataGrid, ScaleDatePicker, ScaleDivider, ScaleDropdown, ScaleGrid, ScaleGridItem, ScaleIcon, ScaleIconActionAdd, ScaleIconActionAddCard, ScaleIconActionAutoLogin, ScaleIconActionBackspace, ScaleIconActionChangelog, ScaleIconActionCircleAdd, ScaleIconActionCircleClose, ScaleIconActionClose, ScaleIconActionCopyPaste, ScaleIconActionCutPaste, ScaleIconActionDisabledMicrophone, ScaleIconActionDownload, ScaleIconActionDragAndDrop, ScaleIconActionEdit, ScaleIconActionFastForward, ScaleIconActionFavorite, ScaleIconActionFilter, ScaleIconActionForward, ScaleIconActionFullScreen, ScaleIconActionHidePassword, ScaleIconActionIndeterminate, ScaleIconActionInstall, ScaleIconActionLink, ScaleIconActionLogout, ScaleIconActionLoop, ScaleIconActionMenu, ScaleIconActionMicrophone, ScaleIconActionMinimizeScreen, ScaleIconActionMore, ScaleIconActionMove, ScaleIconActionMute, ScaleIconActionNotification, ScaleIconActionPause, ScaleIconActionPin, ScaleIconActionPlay, ScaleIconActionPopUpWindow, ScaleIconActionPrint, ScaleIconActionRandom, ScaleIconActionRefresh, ScaleIconActionRemove, ScaleIconActionRestart, ScaleIconActionSearch, ScaleIconActionShoppingCart, ScaleIconActionShowPassword, ScaleIconActionSort, ScaleIconActionSoundOn, ScaleIconActionStreamOn, ScaleIconActionSuccess, ScaleIconActionThumbsDown, ScaleIconActionThumbsUp, ScaleIconActionTilesAdd, ScaleIconActionUpload, ScaleIconActionVolumeDown, ScaleIconActionVolumeUp, ScaleIconActionZoomIn, ScaleIconActionZoomOut, ScaleIconAlertCompliance, ScaleIconAlertError, ScaleIconAlertHelp, ScaleIconAlertImprintDataprivacy, ScaleIconAlertInformation, ScaleIconAlertLegal, ScaleIconAlertSecurity, ScaleIconAlertSuccess, ScaleIconAlertWarning, ScaleIconCommunicationCallIncoming, ScaleIconCommunicationCallOutgoing, ScaleIconCommunicationChat, ScaleIconCommunicationEmail, ScaleIconCommunicationEndCall, ScaleIconCommunicationFeedback, ScaleIconCommunicationMessage, ScaleIconCommunicationPhoneNumber, ScaleIconCommunicationRecipient, ScaleIconCommunicationVoiceMessage, ScaleIconContentAchievement, ScaleIconContentApplications, ScaleIconContentBiometric, ScaleIconContentBookmark, ScaleIconContentCalendar, ScaleIconContentClipboard, ScaleIconContentClock, ScaleIconContentCreditCard, ScaleIconContentDelivery, ScaleIconContentDigitalBanking, ScaleIconContentDigitalMedia, ScaleIconContentDraftFile, ScaleIconContentESim, ScaleIconContentEu, ScaleIconContentFeatures, ScaleIconContentFlexibleTariffs, ScaleIconContentHeart, ScaleIconContentHistory, ScaleIconContentInternational, ScaleIconContentInternationalSms, ScaleIconContentInterview, ScaleIconContentKey, ScaleIconContentLock, ScaleIconContentMediaFolder, ScaleIconContentMoneyAt, ScaleIconContentMusic, ScaleIconContentNews, ScaleIconContentPrepaidActivate, ScaleIconContentPriceTag, ScaleIconContentRss, ScaleIconContentShop, ScaleIconContentSignal, ScaleIconContentSimCard, ScaleIconContentSmile, ScaleIconContentTariffs, ScaleIconContentTransport, ScaleIconContentUnlock, ScaleIconContentVoucher, ScaleIconContentWallet, ScaleIconDeviceAddDevice, ScaleIconDeviceCamera, ScaleIconDeviceChangeCamera, ScaleIconDeviceComputer, ScaleIconDeviceDevicePhone, ScaleIconDeviceDeviceRouter, ScaleIconDeviceDeviceTv, ScaleIconDeviceDeviceWatch, ScaleIconDeviceFixedLineServices, ScaleIconDeviceMediaReceiver, ScaleIconDeviceMobileDevicesCombination, ScaleIconDeviceMobileEquipment, ScaleIconDeviceMobilePhoneInsurance, ScaleIconDeviceMobileServices, ScaleIconDeviceNoCamera, ScaleIconDevicePhotoCamera, ScaleIconDeviceRemoteController, ScaleIconDeviceReplacementMobilephone, ScaleIconDeviceScreenRotate, ScaleIconDeviceSmartSpeaker, ScaleIconDeviceTvAndMobile, ScaleIconHomeHome, ScaleIconHomeInternetAtHome, ScaleIconHomeIot, ScaleIconHomeNoWifi, ScaleIconHomeSmarthome, ScaleIconHomeWifi, ScaleIconNavigationCircleTopUp, ScaleIconNavigationCollapseDown, ScaleIconNavigationCollapseUp, ScaleIconNavigationExternalLink, ScaleIconNavigationInternalLink, ScaleIconNavigationLeft, ScaleIconNavigationLocation, ScaleIconNavigationMyLocation, ScaleIconNavigationRight, ScaleIconNavigationStart, ScaleIconNavigationTopUp, ScaleIconProcessOrderStatus, ScaleIconProcessProcessing, ScaleIconServiceDevicesService, ScaleIconServiceMaintanance, ScaleIconServiceServices, ScaleIconServiceSettings, ScaleIconServiceSupport, ScaleIconTProductMagentaCloud, ScaleIconTProductMagentaTv, ScaleIconTProductMagentaone, ScaleIconTProductMeasureInternetSpeed, ScaleIconTProductSeamlessConnectivity, ScaleIconTProductTelekomShopB, ScaleIconTProductUsage, ScaleIconUserFileAnalytics, ScaleIconUserFileAttachment, ScaleIconUserFileAudioFile, ScaleIconUserFileBilling, ScaleIconUserFileBussinesUsers, ScaleIconUserFileCommunities, ScaleIconUserFileContacts, ScaleIconUserFileContracts, ScaleIconUserFileFamilies, ScaleIconUserFileHandshake, ScaleIconUserFileIdCard, ScaleIconUserFileImageFile, ScaleIconUserFileLogout, ScaleIconUserFilePdfFile, ScaleIconUserFileSwitchUsers, ScaleIconUserFileUser, ScaleIconUserFileVideos, ScaleIconWeatherCloudy, ScaleIconWeatherCloudyRain, ScaleIconWeatherCloudySleet, ScaleIconWeatherCloudySnow, ScaleIconWeatherCloudyThunderRain, ScaleIconWeatherCloudyThunderSnow, ScaleIconWeatherHeavySleet, ScaleIconWeatherHeavySnow, ScaleIconWeatherMoonClear, ScaleIconWeatherMoonCloudyA, ScaleIconWeatherMoonCloudyB, ScaleIconWeatherMoonRain, ScaleIconWeatherMoonSleet, ScaleIconWeatherMoonSnow, ScaleIconWeatherMoonThunderRain, ScaleIconWeatherMoonThunderSnow, ScaleIconWeatherOvercast, ScaleIconWeatherRain, ScaleIconWeatherSunny, ScaleIconWeatherThunderRain, ScaleIconWeatherThunderSnow, ScaleInput, ScaleLink, ScaleList, ScaleListItem, ScaleLoadingSpinner, ScaleLogo, ScaleLogoSvg, ScaleMenuFlyout, ScaleMenuFlyoutDivider, ScaleMenuFlyoutItem, ScaleMenuFlyoutList, ScaleModal, ScaleNavIcon, ScaleNavMain, ScaleNavSegment, ScaleNotificationBadge, ScaleNotificationBanner, ScaleNotificationMessage, ScaleNotificationToast, ScalePagination, ScaleProgressBar, ScaleRadioButton, ScaleRadioButtonGroup, ScaleRatingStars, ScaleSidebarNav, ScaleSidebarNavCollapsible, ScaleSidebarNavItem, ScaleSlider, ScaleSsrSlotFix, ScaleSwitch, ScaleTabHeader, ScaleTabNav, ScaleTabPanel, ScaleTable, ScaleTag, ScaleTextField, ScaleTextarea, ScaleToast, ScaleToggleButton, ScaleToggleGroup, ScaleTooltip, ProxyCmp as ɵa, BooleanValueAccessor as ɵb, ValueAccessor as ɵc, NumericValueAccessor as ɵd, RadioValueAccessor as ɵe, SelectValueAccessor as ɵf, TextValueAccessor as ɵg };

/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { CollapsibleEventDetail } from "./components/collapsible/collapsible";
import { DataGridEditEventDetail, DataGridSortedEventDetail } from "./components/data-grid/data-grid";
import { DuetDatePickerChangeEvent, DuetDatePickerDirection, DuetDatePickerFocusEvent } from "@duetds/date-picker/dist/types/components/duet-date-picker/duet-date-picker";
import { DuetLocalizedText } from "@duetds/date-picker/dist/types/components/duet-date-picker/date-localization";
import { InputChangeEventDetail } from "./components/input/input";
import { BeforeCloseEventDetail } from "./components/modal/modal";
import { PaginationEventDirection } from "./components/pagination/pagination";
export namespace Components {
    interface ScaleAccordion {
        /**
          * If `true`, only one scale-collapsible within the accordion can be open at a time
         */
        "dependent": boolean;
        /**
          * If `true`, scale-collapsibles within the accordion will all be open initially, unless this is dependant
         */
        "expanded": boolean;
        /**
          * Heading level for scale-collapsible descendants
         */
        "headingLevel": number | null;
        "iconLocation"?: 'left' | 'right';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleAlert {
        /**
          * (optional) Alert title
         */
        "headline": string;
        /**
          * (optional) Alert icon
         */
        "icon"?: string;
        /**
          * Alert method: open()
         */
        "open": () => Promise<void>;
        /**
          * (optional) Alert opened
         */
        "opened": boolean;
        /**
          * (optional) Alert size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Alert timeout
         */
        "timeout"?: boolean | number;
        /**
          * (optional) Alert variant
         */
        "variant"?: string;
    }
    interface ScaleBreadcrumb {
        "separator"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleButton {
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Name of a file to be downloaded
         */
        "download"?: string;
        /**
          * (optional) When present, an <a> tag will be used
         */
        "href"?: string;
        /**
          * (optional) Set to `true` when the button contains only an icon
         */
        "iconOnly"?: boolean;
        /**
          * (optional) Icon position related to the label
         */
        "iconPosition": 'before' | 'after';
        /**
          * (optional) Set `tabindex` in the inner button or link element
         */
        "innerTabindex"?: number;
        /**
          * (optional) The name of the button, submitted as a pair with the button's `value` as part of the form data
         */
        "name"?: string;
        "setFocus": () => Promise<void>;
        /**
          * (optional) The size of the button
         */
        "size"?: 'small' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) The target attribute for the <a> tag
         */
        "target"?: string;
        /**
          * (optional) Button type
         */
        "type"?: 'reset' | 'submit' | 'button';
        /**
          * (optional) Defines the value associated with the button's `name`
         */
        "value"?: string;
        /**
          * (optional) Button variant
         */
        "variant"?: string;
    }
    interface ScaleCallout {
        /**
          * (optional) text when hovering with asterisk
         */
        "asterisk": string;
        /**
          * (optional) Variant rotation of the callout/circle
         */
        "rotation": number;
        /**
          * (optional) Variant size of the callout itself
         */
        "size": 'large' | 'small';
        /**
          * (optional) Variant filling of the callout
         */
        "variant": 'primary' | 'white' | 'black' | 'blue';
    }
    interface ScaleCard {
        /**
          * (optional) Label of the card
         */
        "label"?: string;
        /**
          * (optional) Link card rel
         */
        "rel"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Link card target
         */
        "target"?: string;
        /**
          * (optional) Link card
         */
        "to"?: string;
    }
    interface ScaleCarousel {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) carousel display direction
         */
        "vertical"?: boolean;
    }
    interface ScaleChartStackCard {
        /**
          * Chart Data
         */
        "data": string | Array<Record<'type' | 'value' | 'percentage', string>>;
        /**
          * Chart Title
         */
        "heading": string;
    }
    interface ScaleCheckbox {
        /**
          * (optional) Input label output
         */
        "ariaLabelCheckbox"?: string;
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Hides the specified label visually
         */
        "hideLabel"?: boolean;
        /**
          * (optional) indeterminate
         */
        "indeterminate"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string;
    }
    interface ScaleCheckboxGroup {
        /**
          * @deprecated - ariaLabelCheckboxGroup should replace ariaLabel
         */
        "ariaLabelCheckboxGroup"?: string;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        "selectText"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        "unselectText"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string;
    }
    interface ScaleCollapsible {
        /**
          * Set to `true` to expand
         */
        "expanded": boolean;
        /**
          * Default aria-level for heading
         */
        "headingLevel": number;
        "iconLocation"?: 'left' | 'right';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleDataGrid {
        /**
          * Input fields config array
         */
        "fields": any;
        /**
          * (optional) Freeze header row from scrolling
         */
        "freezeHeader"?: boolean;
        /**
          * (optional) Heading string
         */
        "heading"?: string;
        /**
          * (optional) Set static table height, by default will auto-resize
         */
        "height"?: string;
        /**
          * (optional) Set to true to remove border
         */
        "hideBorder"?: boolean;
        /**
          * (optional) Set to true to hide header row
         */
        "hideHeader"?: boolean;
        /**
          * (optional) Set to true to remove info footer block including pagination and selection status
         */
        "hideInfo"?: boolean;
        /**
          * (optional) Set to true to hide settings menu
         */
        "hideMenu"?: boolean;
        /**
          * (optional) Set to true to add numbers column
         */
        "numbered"?: boolean;
        /**
          * (optional) Set number of rows to display per pagination page
         */
        "pageSize"?: number;
        /**
          * Input data array
         */
        "rows": any;
        /**
          * (optional) Set to true to add selection column
         */
        "selectable"?: boolean;
        /**
          * Read-only selection array - populated with raw data from selected rows
         */
        "selection": string[];
        /**
          * (optional) Shade every second row darker
         */
        "shadeAlternate"?: boolean;
        /**
          * (optional) Injected css styles
         */
        "styles": any;
        /**
          * (optional) Set to false to hide table, used for nested tables to re-render upon toggle
         */
        "visible"?: boolean;
    }
    interface ScaleDatePicker {
        /**
          * Date adapter, for custom parsing/formatting. Must be object with a `parse` function which accepts a `string` and returns a `Date`, and a `format` function which accepts a `Date` and returns a `string`. Default is IS0-8601 parsing and formatting.
         */
        "dateAdapter"?: any;
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction": DuetDatePickerDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc. Default is Monday.
         */
        "firstDayOfWeek"?: any;
        /**
          * (optional) Helper text
         */
        "helperText"?: string;
        /**
          * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus returning to the date picker's button. Default is true.
         */
        "hide": (moveFocusToButton?: boolean) => Promise<void>;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier": string;
        /**
          * (optional) invalid status
         */
        "invalid"?: boolean;
        /**
          * (optional) Label
         */
        "label": string;
        /**
          * Button labels, day names, month names, etc, used for localization. Default is English.
         */
        "localization"?: DuetLocalizedText & {
    today: string;
  };
        /**
          * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the min property.
         */
        "max": string;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the max property.
         */
        "min": string;
        /**
          * Name of the date picker input.
         */
        "name": string;
        /**
          * @deprecated in v3 in favor of localization.calendarHeading
         */
        "popupTitle": string;
        /**
          * Should the input be marked as required?
         */
        "required": boolean;
        /**
          * Defines a specific role attribute for the date picker input.
         */
        "role": string;
        /**
          * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Show the calendar modal, moving focus to the calendar inside.
         */
        "show": () => Promise<void>;
        /**
          * (optional) Size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
         */
        "value": string;
    }
    interface ScaleDivider {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Divider vertical
         */
        "vertical"?: boolean;
    }
    interface ScaleDropdown {
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleGrid {
        /**
          * (optional) Set amount of columns in container
         */
        "columns"?: string;
        /**
          * (optioanl) Set gutter between rows
         */
        "gutterX"?: string;
        /**
          * (optional) Set gutter between columns
         */
        "gutterY"?: string;
        /**
          * (optioanl) Set max-width to contaier
         */
        "maxWidth"?: string;
        /**
          * (optioanl) Set padding to container
         */
        "spacing"?: string;
    }
    interface ScaleGridItem {
        /**
          * (optional) Set starting column
         */
        "offset"?: string;
        /**
          * (optional) Set size of column
         */
        "size"?: string;
    }
    interface ScaleIcon {
        /**
          * (optional) When using the icon as standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) If `true` the svg element will get aria-hidden="true"
         */
        "decorative"?: boolean;
        /**
          * The SVG `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * A name that will be used to reference an SVG object defined elsewhere, via `<use xlink:href="">`. `icon-` will be prepended to the name, so if you pass `circle`, it will look for for the `icon-circle` id e.g. `<use xlink:href="#icon-circle">`. If there is no element in the document with the id by the name provided, this component will render empty.
         */
        "name"?: string;
        /**
          * A path shape to be used in the `d` attribute of a path element.
         */
        "path"?: string;
        /**
          * Will be used for both `width` and `height`, all icons are square. Keep in mind the `viewBox` attribute is set to "0 0 24 24".
         */
        "size"?: number;
        /**
          * The SVG `stroke` attribute
         */
        "stroke"?: string;
    }
    interface ScaleIconActionAdd {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCircleClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDownload {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionEdit {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFavorite {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionHidePassword {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionIndeterminate {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLogout {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRandom {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSearch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSort {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSuccess {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertImprintDataprivacy {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCalendar {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHeart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeHome {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationExternalLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationLeft {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationRight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceDevicesService {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceMaintanance {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceServices {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSettings {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSupport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAnalytics {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleInput {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox checked icon
         */
        "icon"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'checkbox'
    | 'radio'
    | 'select'
    | 'textarea'
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Input label variant
         */
        "variant"?: 'animated' | 'static';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleLink {
        /**
          * (optional) Disabled link
         */
        "disabled"?: boolean;
        /**
          * (optional) Download declaration
         */
        "download"?: string;
        /**
          * (optional) Link href
         */
        "href": string;
        /**
          * (optional)
         */
        "hreflang"?: string;
        /**
          * (optional) Chnage icon/content slot order
         */
        "iconPosition"?: 'before' | 'after';
        /**
          * (optional) Set `tabindex` in the inner button or link element
         */
        "innerTabindex"?: number;
        /**
          * (optional) Remove the initial line from the text (can also be achieved via `--line-thickness-initial: 0`) Remove the line for every state with `--line-thickness: 0`
         */
        "omitUnderline"?: boolean;
        /**
          * (optional)
         */
        "ping"?: string;
        /**
          * (optional)
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * (optional)
         */
        "rel"?: string;
        "setFocus": () => Promise<void>;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional)
         */
        "target"?: '_self' | '_blank' | '_parent' | '_top';
        /**
          * (optional)
         */
        "type"?: string;
    }
    interface ScaleList {
        /**
          * (optional) Make the list ordered (ol)
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleListItem {
        /**
          * Index number, useful only for styling the `ordered` type
         */
        "index"?: number;
        /**
          * If `false`, no marker or left padding will be visible
         */
        "marker": boolean;
        /**
          * Whether this is a child of an ordered scale-list, gets set automatically by its parent
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleLoadingSpinner {
        "alignment": 'horizontal' | 'vertical';
        "size": 'small' | 'large';
        "text": string;
        "variant": 'white' | 'primary';
    }
    interface ScaleMenuFlyout {
        /**
          * (optional) Determines whether the flyout should close when a menu item is selected
         */
        "closeOnSelect": boolean;
        /**
          * (optional) Set preference for where the menu appears, space permitting
         */
        "direction": | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left'
    | 'right'
    | 'left';
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleMenuFlyoutDivider {
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleMenuFlyoutItem {
        /**
          * (optional) Mark as active
         */
        "active"?: boolean;
        /**
          * (optional) Set to true to display arrow icon suffix
         */
        "cascade"?: boolean;
        /**
          * (optional) Whether the item should behave as a checkbox
         */
        "checkable"?: 'checkbox' | 'radio' | null;
        /**
          * (optional) Set to true to display check prefix, false to display empty prefix
         */
        "checked"?: boolean;
        /**
          * (optional) Disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        "triggerEvent": (eventType: 'keydown' | 'click', key?: 'Enter' | ' ' | 'ArrowRight' | null, closeOnSelect?: boolean) => Promise<void>;
        /**
          * (optional) value
         */
        "value"?: string;
    }
    interface ScaleMenuFlyoutList {
        "active": boolean;
        "close": (silent?: boolean) => Promise<void>;
        /**
          * (optional) Determines whether the flyout should close when a menu item is selected
         */
        "closeOnSelect": boolean;
        /**
          * (optional) Set preference for where the menu appears, space permitting
         */
        "direction": | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left'
    | 'right'
    | 'left';
        "open": () => Promise<void>;
        "opened": boolean;
        "setFocus": () => Promise<void>;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        "trigger": () => HTMLElement;
    }
    interface ScaleModal {
        /**
          * (optional) Alignment of action buttons
         */
        "alignActions"?: 'right' | 'left';
        /**
          * (optional) allow to inject css style {overflow: hidden} to body when modal is open
         */
        "allowInjectingStyleToBody": boolean;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) title for close button
         */
        "closeButtonTitle"?: string;
        /**
          * (optional) Transition duration
         */
        "duration"?: number;
        /**
          * Modal heading
         */
        "heading": string;
        /**
          * (optional) If `true`, the Modal is open.
         */
        "opened"?: boolean;
        /**
          * (optional) Modal size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleNotificationBadge {
        /**
          * (optional) Handle click on the badge and surroundet slot elements
         */
        "clickHandler": any;
        /**
          * (optional) Text that is displayed in the badge
         */
        "label": number;
        /**
          * (optional) Maximal number of characters displayed in the badge
         */
        "maxCharacters": number;
        /**
          * (optional) Setting/Slotcontent in which the badge is used
         */
        "type": 'icon' | 'text' | 'nav-icon';
    }
    interface ScaleNotificationBanner {
        "autoHide"?: boolean;
        "autoHideDuration"?: number;
        "dismissible"?: boolean;
        "href": string;
        "open": () => Promise<void>;
        "opened": boolean;
        "variant"?: 'informational' | 'success' | 'warning' | 'error';
    }
    interface ScaleNotificationMessage {
        "autoHide"?: boolean;
        "autoHideDuration"?: number;
        "dismissible"?: boolean;
        "open": () => Promise<void>;
        "opened": boolean;
        "variant"?: 'informational' | 'success' | 'warning' | 'error';
    }
    interface ScaleNotificationToast {
        /**
          * (optional) Alignment choose for top and bottom
         */
        "alignment"?: | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left';
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast auto hide
         */
        "autoHide"?: boolean;
        /**
          * (optional) Toast auto hide duration
         */
        "autoHideDuration"?: number;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        "href": string;
        /**
          * Toast method: open()
         */
        "open": () => Promise<void>;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionHorizontal"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionVertical"?: number;
        /**
          * (do not use) it is a helper prop for storybook
         */
        "story"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Toast variant
         */
        "variant"?: 'error' | 'warning' | 'success' | 'informational';
    }
    interface ScalePagination {
        /**
          * (optional) translation to 'Go to first page'
         */
        "ariaLabelFirstPage": string;
        /**
          * (optional) translation to 'Go to last page'
         */
        "ariaLabelLastPage": string;
        /**
          * (optional) translation to 'Go to next page'
         */
        "ariaLabelNextPage": string;
        /**
          * (optional) translation to 'Go to previous page'
         */
        "ariaLabelPreviousPage": string;
        /**
          * (optional) Set to true to hide top and bottom borders
         */
        "hideBorder"?: boolean;
        /**
          * (optional) Deprecated; hideBorder should replace hideBorders
         */
        "hideBorders"?: boolean;
        /**
          * (optional) Set number of rows/elements to show per page
         */
        "pageSize"?: number;
        /**
          * (optional) size
         */
        "size": 'small' | 'large';
        /**
          * @deprecated - size should replace small
         */
        "small": boolean;
        /**
          * (optional) Index of first element to display
         */
        "startElement"?: number;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) Total number of rows/elements used to calculate page displays
         */
        "totalElements"?: number;
    }
    interface ScaleProgressBar {
        /**
          * (optional) Progress bar busy switch
         */
        "busy"?: boolean;
        /**
          * @deprecated - (optional) Progress bar customColor
         */
        "customColor"?: string;
        /**
          * (optional) Progress bar disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Progress bar error
         */
        "hasError"?: boolean;
        /**
          * (optional) Progress bar icon indicator
         */
        "icon"?: string;
        /**
          * (optional) Progress bar label
         */
        "label"?: string;
        /**
          * (optional) disables aria-live
         */
        "mute"?: boolean;
        /**
          * (required) Progress bar percentage
         */
        "percentage": number;
        /**
          * (optional) Progress bar id
         */
        "progressBarId"?: string;
        /**
          * (optional) Progress bar percentage text
         */
        "showStatus"?: boolean;
        /**
          * (optional) Progress bar status description text
         */
        "statusDescription"?: string;
        /**
          * (optional) Progress text display inside bar
         */
        "statusInside"?: boolean;
        /**
          * (optional) Progress bar stroke width
         */
        "strokeWidth"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleRadioButton {
        /**
          * (optional) Input checked
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleRadioButtonGroup {
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
    }
    interface ScaleRatingStars {
        /**
          * a11y text for getting meaningful value. `$rating` and `$max` (deprecated `$maxRating`) are template variables and will be replaces by their corresponding properties.
         */
        "ariaLabelTranslation": string;
        /**
          * disables input
         */
        "disabled": boolean;
        /**
          * (optional) info text
         */
        "hideLabel": boolean;
        /**
          * (optional) info text
         */
        "infoText"?: string;
        /**
          * (optional) rating label
         */
        "label": string;
        /**
          * The upper limit of the rating
         */
        "max": number;
        /**
          * @deprecated ; max should be used instead of maxRating
         */
        "maxRating": number;
        /**
          * @deprecated ; The lower limit of the rating
         */
        "minRating": number;
        /**
          * Represents the current value of the rating
         */
        "rating": number;
        /**
          * makes the rating non-interactive (but still accessible)
         */
        "readonly": boolean;
        /**
          * size of the stars
         */
        "size": 'small' | 'large';
        /**
          * @deprecated ; size should be used instead of starSize
         */
        "starSize": 'small' | 'large';
    }
    interface ScaleSidebarNav {
        /**
          * From mdn: A brief description of the purpose of the navigation, omitting the term "navigation", as the screen reader will read both the role and the contents of the label.
         */
        "ariaLabelSidebarNav"?: string;
        /**
          * Set to `true` to make the sidebar toggleable (useful for small screens)
         */
        "collapsible"?: boolean;
        /**
          * Label for toggle button
         */
        "collapsibleLabel"?: string;
        /**
          * Automatically set `collapsible` based on this media query
         */
        "collapsibleMediaQuery"?: string;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSidebarNavCollapsible {
        /**
          * Label and icon get the active color
         */
        "active"?: boolean;
        /**
          * Bold label and icon
         */
        "bold": boolean;
        /**
          * Used normally for third level items
         */
        "condensed": boolean;
        /**
          * Set this to `true` to expand
         */
        "expanded": boolean;
        /**
          * The URL where the link should point to
         */
        "href": string;
        /**
          * The text for the button
         */
        "label": string;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel": number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
        /**
          * The parent wrapper
         */
        "tag"?: string;
    }
    interface ScaleSidebarNavItem {
        /**
          * Text gets the active color
         */
        "active": boolean;
        /**
          * Bold text
         */
        "bold": boolean;
        /**
          * Used normally for third level items, remove the bottom border
         */
        "condensed": boolean;
        /**
          * Mark the child link as "current" with `aria-current=page`. Provide the text hint if needed, default is: "Zurzeit aktiv"
         */
        "current": string | null | boolean;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel": number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSlider {
        /**
          * @deprecated - optional) slider custom color
         */
        "customColor"?: string;
        /**
          * (optional) number of decimal places
         */
        "decimals"?: 0 | 1 | 2;
        /**
          * (optional) disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) slider label
         */
        "label"?: string;
        /**
          * (optional) the maximal value of the slider
         */
        "max"?: number;
        /**
          * t(optional) he minimal value of the slider
         */
        "min"?: number;
        /**
          * (optional) the name of the slider
         */
        "name"?: string;
        /**
          * (optional) slider display value
         */
        "showValue"?: boolean;
        /**
          * (optional) Slider id
         */
        "sliderId"?: string;
        /**
          * (optional) the step size to increase or decrease when dragging slider
         */
        "step"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) larger thumb
         */
        "thumbLarge"?: boolean;
        /**
          * (optional) smaller track
         */
        "trackSmall"?: boolean;
        /**
          * (optional) slider value unit
         */
        "unit"?: string;
        /**
          * (optional) the display value of the slider
         */
        "value"?: number;
    }
    interface ScaleSsrSlotFix {
    }
    interface ScaleSwitch {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Disabled switch
         */
        "disabled"?: boolean;
        /**
          * (optional) Input id
         */
        "inputId"?: string;
        /**
          * (optional) switch label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabHeader {
        /**
          * True for a disabled Tabnavigation
         */
        "disabled"?: boolean;
        "selected": boolean;
        /**
          * (optional) size
         */
        "size": 'small' | 'large';
        /**
          * True for smaller height and font size
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabNav {
        /**
          * (optional) size
         */
        "size": 'small' | 'large';
        /**
          * @deprecated - size should replace small
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabPanel {
        /**
          * (optional) size
         */
        "size": 'small' | 'large';
        /**
          * True for smaller height and font size
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTable {
        /**
          * (optional) Display sort arrows on/off
         */
        "showSort"?: boolean;
        /**
          * (optional) Visual size
         */
        "size"?: 'default' | 'small' | string;
        /**
          * (optional) Striped Table
         */
        "striped"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTag {
        /**
          * (optional) Tag disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Dismiss label
         */
        "dismissText"?: string;
        /**
          * (optional) Tag dismissable
         */
        "dismissable"?: boolean;
        /**
          * (optional) Tag href
         */
        "href"?: string;
        /**
          * (optional) Tag size
         */
        "size"?: 'small';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Tag target
         */
        "target"?: string;
        /**
          * (optional) Tag variant
         */
        "variant"?: 'secondary';
    }
    interface ScaleTextField {
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) the input should automatically get focus when the page loads.
         */
        "inputAutofocus"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * Input label
         */
        "label": string;
        /**
          * (optional) input list
         */
        "list"?: string;
        /**
          * (optional) define the numeric maximum value of input types such as month, date, time
         */
        "max"?: number;
        /**
          * (optional) Input text string max length
         */
        "maxLength"?: number;
        /**
          * (optional) defines the numeric minimum value of input types such as month, date, time
         */
        "min"?: number;
        /**
          * (optional) Input text string min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input readonly
         */
        "readonly"?: boolean;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) the step attribute specifies the interval between legal numbers in an <input type="number"> element.
         */
        "step"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'date'
    | 'month' // example yyyy-mm
    | 'week' // example yyyy-W##
    | 'time' // example hh:mm
    | 'datetime-local' // example yyyy-mm-ddThh:mm
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleTextarea {
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) the input should automatically get focus when the page loads.
         */
        "inputAutofocus"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input readonly
         */
        "readonly"?: boolean;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleToast {
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast autohide time
         */
        "autoHide"?: boolean | number;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        /**
          * Toast method: open()
         */
        "open": () => Promise<void>;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionRight"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionTop"?: number;
        /**
          * (optional) Toast size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Toast time
         */
        "time"?: number;
        /**
          * (optional) Toast variant
         */
        "variant"?: string;
    }
    interface ScaleToggleButton {
        /**
          * a11y text for getting meaningful value. `$buttonNumber` and `$selected` are template variables and will be replaces by their corresponding properties.
         */
        "ariaDescriptionTranslation": string;
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabelToggleButton": string;
        /**
          * (optional) translation of 'deselected
         */
        "ariaLangDeselected"?: string;
        /**
          * (optional) translation of 'selected
         */
        "ariaLangSelected"?: string;
        /**
          * (optional) Button background
         */
        "background"?: 'grey' | 'white';
        /**
          * @deprecated - variant should replace colorScheme
         */
        "colorScheme"?: 'monochrome' | 'color';
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) set the border-radius left, right or both
         */
        "hideBorder": false;
        /**
          * (optional) Button type
         */
        "iconOnly"?: boolean;
        /**
          * (optional) Icon position related to the label
         */
        "iconPosition": 'before' | 'after';
        /**
          * (optional) position within group
         */
        "position"?: number;
        /**
          * (optional) set the border-radius left, right or both
         */
        "radius": 'left' | 'right' | 'both' | 'neither' | null;
        /**
          * (optional) If `true`, the button is selected
         */
        "selected"?: boolean;
        "setFocus": () => Promise<void>;
        /**
          * (optional) The size of the button
         */
        "size"?: 'large' | 'regular' | 'small' | 'xs';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) toggle button's id
         */
        "toggleButtonId"?: string;
        /**
          * (optional) background variant of a selected toggle-button
         */
        "variant"?: 'monochrome' | 'color';
    }
    interface ScaleToggleGroup {
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabelTranslation": string;
        /**
          * (optional) Button Group background
         */
        "background"?: 'grey' | 'white';
        /**
          * @deprecated - variant should replace colorScheme
         */
        "colorScheme"?: 'monochrome' | 'color';
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) 100% width
         */
        "fullWidth"?: boolean;
        /**
          * (optional) If `true`, the group has a border
         */
        "hideBorder"?: boolean;
        /**
          * (optional) more than one button selected possible
         */
        "singleSelect": boolean;
        /**
          * (optional) The size of the button
         */
        "size"?: 'large' | 'regular' | 'small' | 'xs';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) background variant of a selected toggle-button
         */
        "variant"?: 'monochrome' | 'color';
    }
    interface ScaleTooltip {
        /**
          * (optional) The content of the Tooltip supporting Text only
         */
        "content": string;
        /**
          * (optional) Disable Tooltip
         */
        "disabled": boolean;
        /**
          * (optional) Distance of the Tooltip from the Target Object (related to the `placement`)
         */
        "distance": number;
        /**
          * (optional) Switching the flip option of the tooltip on and off
         */
        "flip": boolean;
        "hideTooltip": () => Promise<void>;
        /**
          * (optional) Set the Tooltip to open per default (will still be closed on closing Events)
         */
        "open": boolean;
        /**
          * (optional) Position of the Tooltip on the Object
         */
        "placement": | 'top'
    | 'top-start'
    | 'top-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * (optional) Switching the preventOverflow option of the tooltip on and off
         */
        "preventOverflow": boolean;
        "showTooltip": () => Promise<void>;
        /**
          * (optional) skidding moves the tooltip of the element in dependence of its `placement` to the element either on an x-axis (at `placement` top/down) or on a y-axis (for output `placement` left/right)
         */
        "skidding": number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Set custom trigger Event selection
         */
        "trigger": string;
    }
}
declare global {
    interface HTMLScaleAccordionElement extends Components.ScaleAccordion, HTMLStencilElement {
    }
    var HTMLScaleAccordionElement: {
        prototype: HTMLScaleAccordionElement;
        new (): HTMLScaleAccordionElement;
    };
    interface HTMLScaleAlertElement extends Components.ScaleAlert, HTMLStencilElement {
    }
    var HTMLScaleAlertElement: {
        prototype: HTMLScaleAlertElement;
        new (): HTMLScaleAlertElement;
    };
    interface HTMLScaleBreadcrumbElement extends Components.ScaleBreadcrumb, HTMLStencilElement {
    }
    var HTMLScaleBreadcrumbElement: {
        prototype: HTMLScaleBreadcrumbElement;
        new (): HTMLScaleBreadcrumbElement;
    };
    interface HTMLScaleButtonElement extends Components.ScaleButton, HTMLStencilElement {
    }
    var HTMLScaleButtonElement: {
        prototype: HTMLScaleButtonElement;
        new (): HTMLScaleButtonElement;
    };
    interface HTMLScaleCalloutElement extends Components.ScaleCallout, HTMLStencilElement {
    }
    var HTMLScaleCalloutElement: {
        prototype: HTMLScaleCalloutElement;
        new (): HTMLScaleCalloutElement;
    };
    interface HTMLScaleCardElement extends Components.ScaleCard, HTMLStencilElement {
    }
    var HTMLScaleCardElement: {
        prototype: HTMLScaleCardElement;
        new (): HTMLScaleCardElement;
    };
    interface HTMLScaleCarouselElement extends Components.ScaleCarousel, HTMLStencilElement {
    }
    var HTMLScaleCarouselElement: {
        prototype: HTMLScaleCarouselElement;
        new (): HTMLScaleCarouselElement;
    };
    interface HTMLScaleChartStackCardElement extends Components.ScaleChartStackCard, HTMLStencilElement {
    }
    var HTMLScaleChartStackCardElement: {
        prototype: HTMLScaleChartStackCardElement;
        new (): HTMLScaleChartStackCardElement;
    };
    interface HTMLScaleCheckboxElement extends Components.ScaleCheckbox, HTMLStencilElement {
    }
    var HTMLScaleCheckboxElement: {
        prototype: HTMLScaleCheckboxElement;
        new (): HTMLScaleCheckboxElement;
    };
    interface HTMLScaleCheckboxGroupElement extends Components.ScaleCheckboxGroup, HTMLStencilElement {
    }
    var HTMLScaleCheckboxGroupElement: {
        prototype: HTMLScaleCheckboxGroupElement;
        new (): HTMLScaleCheckboxGroupElement;
    };
    interface HTMLScaleCollapsibleElement extends Components.ScaleCollapsible, HTMLStencilElement {
    }
    var HTMLScaleCollapsibleElement: {
        prototype: HTMLScaleCollapsibleElement;
        new (): HTMLScaleCollapsibleElement;
    };
    interface HTMLScaleDataGridElement extends Components.ScaleDataGrid, HTMLStencilElement {
    }
    var HTMLScaleDataGridElement: {
        prototype: HTMLScaleDataGridElement;
        new (): HTMLScaleDataGridElement;
    };
    interface HTMLScaleDatePickerElement extends Components.ScaleDatePicker, HTMLStencilElement {
    }
    var HTMLScaleDatePickerElement: {
        prototype: HTMLScaleDatePickerElement;
        new (): HTMLScaleDatePickerElement;
    };
    interface HTMLScaleDividerElement extends Components.ScaleDivider, HTMLStencilElement {
    }
    var HTMLScaleDividerElement: {
        prototype: HTMLScaleDividerElement;
        new (): HTMLScaleDividerElement;
    };
    interface HTMLScaleDropdownElement extends Components.ScaleDropdown, HTMLStencilElement {
    }
    var HTMLScaleDropdownElement: {
        prototype: HTMLScaleDropdownElement;
        new (): HTMLScaleDropdownElement;
    };
    interface HTMLScaleGridElement extends Components.ScaleGrid, HTMLStencilElement {
    }
    var HTMLScaleGridElement: {
        prototype: HTMLScaleGridElement;
        new (): HTMLScaleGridElement;
    };
    interface HTMLScaleGridItemElement extends Components.ScaleGridItem, HTMLStencilElement {
    }
    var HTMLScaleGridItemElement: {
        prototype: HTMLScaleGridItemElement;
        new (): HTMLScaleGridItemElement;
    };
    interface HTMLScaleIconElement extends Components.ScaleIcon, HTMLStencilElement {
    }
    var HTMLScaleIconElement: {
        prototype: HTMLScaleIconElement;
        new (): HTMLScaleIconElement;
    };
    interface HTMLScaleIconActionAddElement extends Components.ScaleIconActionAdd, HTMLStencilElement {
    }
    var HTMLScaleIconActionAddElement: {
        prototype: HTMLScaleIconActionAddElement;
        new (): HTMLScaleIconActionAddElement;
    };
    interface HTMLScaleIconActionCircleCloseElement extends Components.ScaleIconActionCircleClose, HTMLStencilElement {
    }
    var HTMLScaleIconActionCircleCloseElement: {
        prototype: HTMLScaleIconActionCircleCloseElement;
        new (): HTMLScaleIconActionCircleCloseElement;
    };
    interface HTMLScaleIconActionCloseElement extends Components.ScaleIconActionClose, HTMLStencilElement {
    }
    var HTMLScaleIconActionCloseElement: {
        prototype: HTMLScaleIconActionCloseElement;
        new (): HTMLScaleIconActionCloseElement;
    };
    interface HTMLScaleIconActionDownloadElement extends Components.ScaleIconActionDownload, HTMLStencilElement {
    }
    var HTMLScaleIconActionDownloadElement: {
        prototype: HTMLScaleIconActionDownloadElement;
        new (): HTMLScaleIconActionDownloadElement;
    };
    interface HTMLScaleIconActionEditElement extends Components.ScaleIconActionEdit, HTMLStencilElement {
    }
    var HTMLScaleIconActionEditElement: {
        prototype: HTMLScaleIconActionEditElement;
        new (): HTMLScaleIconActionEditElement;
    };
    interface HTMLScaleIconActionFavoriteElement extends Components.ScaleIconActionFavorite, HTMLStencilElement {
    }
    var HTMLScaleIconActionFavoriteElement: {
        prototype: HTMLScaleIconActionFavoriteElement;
        new (): HTMLScaleIconActionFavoriteElement;
    };
    interface HTMLScaleIconActionHidePasswordElement extends Components.ScaleIconActionHidePassword, HTMLStencilElement {
    }
    var HTMLScaleIconActionHidePasswordElement: {
        prototype: HTMLScaleIconActionHidePasswordElement;
        new (): HTMLScaleIconActionHidePasswordElement;
    };
    interface HTMLScaleIconActionIndeterminateElement extends Components.ScaleIconActionIndeterminate, HTMLStencilElement {
    }
    var HTMLScaleIconActionIndeterminateElement: {
        prototype: HTMLScaleIconActionIndeterminateElement;
        new (): HTMLScaleIconActionIndeterminateElement;
    };
    interface HTMLScaleIconActionLogoutElement extends Components.ScaleIconActionLogout, HTMLStencilElement {
    }
    var HTMLScaleIconActionLogoutElement: {
        prototype: HTMLScaleIconActionLogoutElement;
        new (): HTMLScaleIconActionLogoutElement;
    };
    interface HTMLScaleIconActionRandomElement extends Components.ScaleIconActionRandom, HTMLStencilElement {
    }
    var HTMLScaleIconActionRandomElement: {
        prototype: HTMLScaleIconActionRandomElement;
        new (): HTMLScaleIconActionRandomElement;
    };
    interface HTMLScaleIconActionSearchElement extends Components.ScaleIconActionSearch, HTMLStencilElement {
    }
    var HTMLScaleIconActionSearchElement: {
        prototype: HTMLScaleIconActionSearchElement;
        new (): HTMLScaleIconActionSearchElement;
    };
    interface HTMLScaleIconActionSortElement extends Components.ScaleIconActionSort, HTMLStencilElement {
    }
    var HTMLScaleIconActionSortElement: {
        prototype: HTMLScaleIconActionSortElement;
        new (): HTMLScaleIconActionSortElement;
    };
    interface HTMLScaleIconActionSuccessElement extends Components.ScaleIconActionSuccess, HTMLStencilElement {
    }
    var HTMLScaleIconActionSuccessElement: {
        prototype: HTMLScaleIconActionSuccessElement;
        new (): HTMLScaleIconActionSuccessElement;
    };
    interface HTMLScaleIconAlertImprintDataprivacyElement extends Components.ScaleIconAlertImprintDataprivacy, HTMLStencilElement {
    }
    var HTMLScaleIconAlertImprintDataprivacyElement: {
        prototype: HTMLScaleIconAlertImprintDataprivacyElement;
        new (): HTMLScaleIconAlertImprintDataprivacyElement;
    };
    interface HTMLScaleIconContentCalendarElement extends Components.ScaleIconContentCalendar, HTMLStencilElement {
    }
    var HTMLScaleIconContentCalendarElement: {
        prototype: HTMLScaleIconContentCalendarElement;
        new (): HTMLScaleIconContentCalendarElement;
    };
    interface HTMLScaleIconContentHeartElement extends Components.ScaleIconContentHeart, HTMLStencilElement {
    }
    var HTMLScaleIconContentHeartElement: {
        prototype: HTMLScaleIconContentHeartElement;
        new (): HTMLScaleIconContentHeartElement;
    };
    interface HTMLScaleIconHomeHomeElement extends Components.ScaleIconHomeHome, HTMLStencilElement {
    }
    var HTMLScaleIconHomeHomeElement: {
        prototype: HTMLScaleIconHomeHomeElement;
        new (): HTMLScaleIconHomeHomeElement;
    };
    interface HTMLScaleIconNavigationCollapseDownElement extends Components.ScaleIconNavigationCollapseDown, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationCollapseDownElement: {
        prototype: HTMLScaleIconNavigationCollapseDownElement;
        new (): HTMLScaleIconNavigationCollapseDownElement;
    };
    interface HTMLScaleIconNavigationCollapseUpElement extends Components.ScaleIconNavigationCollapseUp, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationCollapseUpElement: {
        prototype: HTMLScaleIconNavigationCollapseUpElement;
        new (): HTMLScaleIconNavigationCollapseUpElement;
    };
    interface HTMLScaleIconNavigationExternalLinkElement extends Components.ScaleIconNavigationExternalLink, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationExternalLinkElement: {
        prototype: HTMLScaleIconNavigationExternalLinkElement;
        new (): HTMLScaleIconNavigationExternalLinkElement;
    };
    interface HTMLScaleIconNavigationLeftElement extends Components.ScaleIconNavigationLeft, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationLeftElement: {
        prototype: HTMLScaleIconNavigationLeftElement;
        new (): HTMLScaleIconNavigationLeftElement;
    };
    interface HTMLScaleIconNavigationRightElement extends Components.ScaleIconNavigationRight, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationRightElement: {
        prototype: HTMLScaleIconNavigationRightElement;
        new (): HTMLScaleIconNavigationRightElement;
    };
    interface HTMLScaleIconServiceDevicesServiceElement extends Components.ScaleIconServiceDevicesService, HTMLStencilElement {
    }
    var HTMLScaleIconServiceDevicesServiceElement: {
        prototype: HTMLScaleIconServiceDevicesServiceElement;
        new (): HTMLScaleIconServiceDevicesServiceElement;
    };
    interface HTMLScaleIconServiceMaintananceElement extends Components.ScaleIconServiceMaintanance, HTMLStencilElement {
    }
    var HTMLScaleIconServiceMaintananceElement: {
        prototype: HTMLScaleIconServiceMaintananceElement;
        new (): HTMLScaleIconServiceMaintananceElement;
    };
    interface HTMLScaleIconServiceServicesElement extends Components.ScaleIconServiceServices, HTMLStencilElement {
    }
    var HTMLScaleIconServiceServicesElement: {
        prototype: HTMLScaleIconServiceServicesElement;
        new (): HTMLScaleIconServiceServicesElement;
    };
    interface HTMLScaleIconServiceSettingsElement extends Components.ScaleIconServiceSettings, HTMLStencilElement {
    }
    var HTMLScaleIconServiceSettingsElement: {
        prototype: HTMLScaleIconServiceSettingsElement;
        new (): HTMLScaleIconServiceSettingsElement;
    };
    interface HTMLScaleIconServiceSupportElement extends Components.ScaleIconServiceSupport, HTMLStencilElement {
    }
    var HTMLScaleIconServiceSupportElement: {
        prototype: HTMLScaleIconServiceSupportElement;
        new (): HTMLScaleIconServiceSupportElement;
    };
    interface HTMLScaleIconUserFileAnalyticsElement extends Components.ScaleIconUserFileAnalytics, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileAnalyticsElement: {
        prototype: HTMLScaleIconUserFileAnalyticsElement;
        new (): HTMLScaleIconUserFileAnalyticsElement;
    };
    interface HTMLScaleInputElement extends Components.ScaleInput, HTMLStencilElement {
    }
    var HTMLScaleInputElement: {
        prototype: HTMLScaleInputElement;
        new (): HTMLScaleInputElement;
    };
    interface HTMLScaleLinkElement extends Components.ScaleLink, HTMLStencilElement {
    }
    var HTMLScaleLinkElement: {
        prototype: HTMLScaleLinkElement;
        new (): HTMLScaleLinkElement;
    };
    interface HTMLScaleListElement extends Components.ScaleList, HTMLStencilElement {
    }
    var HTMLScaleListElement: {
        prototype: HTMLScaleListElement;
        new (): HTMLScaleListElement;
    };
    interface HTMLScaleListItemElement extends Components.ScaleListItem, HTMLStencilElement {
    }
    var HTMLScaleListItemElement: {
        prototype: HTMLScaleListItemElement;
        new (): HTMLScaleListItemElement;
    };
    interface HTMLScaleLoadingSpinnerElement extends Components.ScaleLoadingSpinner, HTMLStencilElement {
    }
    var HTMLScaleLoadingSpinnerElement: {
        prototype: HTMLScaleLoadingSpinnerElement;
        new (): HTMLScaleLoadingSpinnerElement;
    };
    interface HTMLScaleMenuFlyoutElement extends Components.ScaleMenuFlyout, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutElement: {
        prototype: HTMLScaleMenuFlyoutElement;
        new (): HTMLScaleMenuFlyoutElement;
    };
    interface HTMLScaleMenuFlyoutDividerElement extends Components.ScaleMenuFlyoutDivider, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutDividerElement: {
        prototype: HTMLScaleMenuFlyoutDividerElement;
        new (): HTMLScaleMenuFlyoutDividerElement;
    };
    interface HTMLScaleMenuFlyoutItemElement extends Components.ScaleMenuFlyoutItem, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutItemElement: {
        prototype: HTMLScaleMenuFlyoutItemElement;
        new (): HTMLScaleMenuFlyoutItemElement;
    };
    interface HTMLScaleMenuFlyoutListElement extends Components.ScaleMenuFlyoutList, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutListElement: {
        prototype: HTMLScaleMenuFlyoutListElement;
        new (): HTMLScaleMenuFlyoutListElement;
    };
    interface HTMLScaleModalElement extends Components.ScaleModal, HTMLStencilElement {
    }
    var HTMLScaleModalElement: {
        prototype: HTMLScaleModalElement;
        new (): HTMLScaleModalElement;
    };
    interface HTMLScaleNotificationBadgeElement extends Components.ScaleNotificationBadge, HTMLStencilElement {
    }
    var HTMLScaleNotificationBadgeElement: {
        prototype: HTMLScaleNotificationBadgeElement;
        new (): HTMLScaleNotificationBadgeElement;
    };
    interface HTMLScaleNotificationBannerElement extends Components.ScaleNotificationBanner, HTMLStencilElement {
    }
    var HTMLScaleNotificationBannerElement: {
        prototype: HTMLScaleNotificationBannerElement;
        new (): HTMLScaleNotificationBannerElement;
    };
    interface HTMLScaleNotificationMessageElement extends Components.ScaleNotificationMessage, HTMLStencilElement {
    }
    var HTMLScaleNotificationMessageElement: {
        prototype: HTMLScaleNotificationMessageElement;
        new (): HTMLScaleNotificationMessageElement;
    };
    interface HTMLScaleNotificationToastElement extends Components.ScaleNotificationToast, HTMLStencilElement {
    }
    var HTMLScaleNotificationToastElement: {
        prototype: HTMLScaleNotificationToastElement;
        new (): HTMLScaleNotificationToastElement;
    };
    interface HTMLScalePaginationElement extends Components.ScalePagination, HTMLStencilElement {
    }
    var HTMLScalePaginationElement: {
        prototype: HTMLScalePaginationElement;
        new (): HTMLScalePaginationElement;
    };
    interface HTMLScaleProgressBarElement extends Components.ScaleProgressBar, HTMLStencilElement {
    }
    var HTMLScaleProgressBarElement: {
        prototype: HTMLScaleProgressBarElement;
        new (): HTMLScaleProgressBarElement;
    };
    interface HTMLScaleRadioButtonElement extends Components.ScaleRadioButton, HTMLStencilElement {
    }
    var HTMLScaleRadioButtonElement: {
        prototype: HTMLScaleRadioButtonElement;
        new (): HTMLScaleRadioButtonElement;
    };
    interface HTMLScaleRadioButtonGroupElement extends Components.ScaleRadioButtonGroup, HTMLStencilElement {
    }
    var HTMLScaleRadioButtonGroupElement: {
        prototype: HTMLScaleRadioButtonGroupElement;
        new (): HTMLScaleRadioButtonGroupElement;
    };
    interface HTMLScaleRatingStarsElement extends Components.ScaleRatingStars, HTMLStencilElement {
    }
    var HTMLScaleRatingStarsElement: {
        prototype: HTMLScaleRatingStarsElement;
        new (): HTMLScaleRatingStarsElement;
    };
    interface HTMLScaleSidebarNavElement extends Components.ScaleSidebarNav, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavElement: {
        prototype: HTMLScaleSidebarNavElement;
        new (): HTMLScaleSidebarNavElement;
    };
    interface HTMLScaleSidebarNavCollapsibleElement extends Components.ScaleSidebarNavCollapsible, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavCollapsibleElement: {
        prototype: HTMLScaleSidebarNavCollapsibleElement;
        new (): HTMLScaleSidebarNavCollapsibleElement;
    };
    interface HTMLScaleSidebarNavItemElement extends Components.ScaleSidebarNavItem, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavItemElement: {
        prototype: HTMLScaleSidebarNavItemElement;
        new (): HTMLScaleSidebarNavItemElement;
    };
    interface HTMLScaleSliderElement extends Components.ScaleSlider, HTMLStencilElement {
    }
    var HTMLScaleSliderElement: {
        prototype: HTMLScaleSliderElement;
        new (): HTMLScaleSliderElement;
    };
    interface HTMLScaleSsrSlotFixElement extends Components.ScaleSsrSlotFix, HTMLStencilElement {
    }
    var HTMLScaleSsrSlotFixElement: {
        prototype: HTMLScaleSsrSlotFixElement;
        new (): HTMLScaleSsrSlotFixElement;
    };
    interface HTMLScaleSwitchElement extends Components.ScaleSwitch, HTMLStencilElement {
    }
    var HTMLScaleSwitchElement: {
        prototype: HTMLScaleSwitchElement;
        new (): HTMLScaleSwitchElement;
    };
    interface HTMLScaleTabHeaderElement extends Components.ScaleTabHeader, HTMLStencilElement {
    }
    var HTMLScaleTabHeaderElement: {
        prototype: HTMLScaleTabHeaderElement;
        new (): HTMLScaleTabHeaderElement;
    };
    interface HTMLScaleTabNavElement extends Components.ScaleTabNav, HTMLStencilElement {
    }
    var HTMLScaleTabNavElement: {
        prototype: HTMLScaleTabNavElement;
        new (): HTMLScaleTabNavElement;
    };
    interface HTMLScaleTabPanelElement extends Components.ScaleTabPanel, HTMLStencilElement {
    }
    var HTMLScaleTabPanelElement: {
        prototype: HTMLScaleTabPanelElement;
        new (): HTMLScaleTabPanelElement;
    };
    interface HTMLScaleTableElement extends Components.ScaleTable, HTMLStencilElement {
    }
    var HTMLScaleTableElement: {
        prototype: HTMLScaleTableElement;
        new (): HTMLScaleTableElement;
    };
    interface HTMLScaleTagElement extends Components.ScaleTag, HTMLStencilElement {
    }
    var HTMLScaleTagElement: {
        prototype: HTMLScaleTagElement;
        new (): HTMLScaleTagElement;
    };
    interface HTMLScaleTextFieldElement extends Components.ScaleTextField, HTMLStencilElement {
    }
    var HTMLScaleTextFieldElement: {
        prototype: HTMLScaleTextFieldElement;
        new (): HTMLScaleTextFieldElement;
    };
    interface HTMLScaleTextareaElement extends Components.ScaleTextarea, HTMLStencilElement {
    }
    var HTMLScaleTextareaElement: {
        prototype: HTMLScaleTextareaElement;
        new (): HTMLScaleTextareaElement;
    };
    interface HTMLScaleToastElement extends Components.ScaleToast, HTMLStencilElement {
    }
    var HTMLScaleToastElement: {
        prototype: HTMLScaleToastElement;
        new (): HTMLScaleToastElement;
    };
    interface HTMLScaleToggleButtonElement extends Components.ScaleToggleButton, HTMLStencilElement {
    }
    var HTMLScaleToggleButtonElement: {
        prototype: HTMLScaleToggleButtonElement;
        new (): HTMLScaleToggleButtonElement;
    };
    interface HTMLScaleToggleGroupElement extends Components.ScaleToggleGroup, HTMLStencilElement {
    }
    var HTMLScaleToggleGroupElement: {
        prototype: HTMLScaleToggleGroupElement;
        new (): HTMLScaleToggleGroupElement;
    };
    interface HTMLScaleTooltipElement extends Components.ScaleTooltip, HTMLStencilElement {
    }
    var HTMLScaleTooltipElement: {
        prototype: HTMLScaleTooltipElement;
        new (): HTMLScaleTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "scale-accordion": HTMLScaleAccordionElement;
        "scale-alert": HTMLScaleAlertElement;
        "scale-breadcrumb": HTMLScaleBreadcrumbElement;
        "scale-button": HTMLScaleButtonElement;
        "scale-callout": HTMLScaleCalloutElement;
        "scale-card": HTMLScaleCardElement;
        "scale-carousel": HTMLScaleCarouselElement;
        "scale-chart-stack-card": HTMLScaleChartStackCardElement;
        "scale-checkbox": HTMLScaleCheckboxElement;
        "scale-checkbox-group": HTMLScaleCheckboxGroupElement;
        "scale-collapsible": HTMLScaleCollapsibleElement;
        "scale-data-grid": HTMLScaleDataGridElement;
        "scale-date-picker": HTMLScaleDatePickerElement;
        "scale-divider": HTMLScaleDividerElement;
        "scale-dropdown": HTMLScaleDropdownElement;
        "scale-grid": HTMLScaleGridElement;
        "scale-grid-item": HTMLScaleGridItemElement;
        "scale-icon": HTMLScaleIconElement;
        "scale-icon-action-add": HTMLScaleIconActionAddElement;
        "scale-icon-action-circle-close": HTMLScaleIconActionCircleCloseElement;
        "scale-icon-action-close": HTMLScaleIconActionCloseElement;
        "scale-icon-action-download": HTMLScaleIconActionDownloadElement;
        "scale-icon-action-edit": HTMLScaleIconActionEditElement;
        "scale-icon-action-favorite": HTMLScaleIconActionFavoriteElement;
        "scale-icon-action-hide-password": HTMLScaleIconActionHidePasswordElement;
        "scale-icon-action-indeterminate": HTMLScaleIconActionIndeterminateElement;
        "scale-icon-action-logout": HTMLScaleIconActionLogoutElement;
        "scale-icon-action-random": HTMLScaleIconActionRandomElement;
        "scale-icon-action-search": HTMLScaleIconActionSearchElement;
        "scale-icon-action-sort": HTMLScaleIconActionSortElement;
        "scale-icon-action-success": HTMLScaleIconActionSuccessElement;
        "scale-icon-alert-imprint-dataprivacy": HTMLScaleIconAlertImprintDataprivacyElement;
        "scale-icon-content-calendar": HTMLScaleIconContentCalendarElement;
        "scale-icon-content-heart": HTMLScaleIconContentHeartElement;
        "scale-icon-home-home": HTMLScaleIconHomeHomeElement;
        "scale-icon-navigation-collapse-down": HTMLScaleIconNavigationCollapseDownElement;
        "scale-icon-navigation-collapse-up": HTMLScaleIconNavigationCollapseUpElement;
        "scale-icon-navigation-external-link": HTMLScaleIconNavigationExternalLinkElement;
        "scale-icon-navigation-left": HTMLScaleIconNavigationLeftElement;
        "scale-icon-navigation-right": HTMLScaleIconNavigationRightElement;
        "scale-icon-service-devices-service": HTMLScaleIconServiceDevicesServiceElement;
        "scale-icon-service-maintanance": HTMLScaleIconServiceMaintananceElement;
        "scale-icon-service-services": HTMLScaleIconServiceServicesElement;
        "scale-icon-service-settings": HTMLScaleIconServiceSettingsElement;
        "scale-icon-service-support": HTMLScaleIconServiceSupportElement;
        "scale-icon-user-file-analytics": HTMLScaleIconUserFileAnalyticsElement;
        "scale-input": HTMLScaleInputElement;
        "scale-link": HTMLScaleLinkElement;
        "scale-list": HTMLScaleListElement;
        "scale-list-item": HTMLScaleListItemElement;
        "scale-loading-spinner": HTMLScaleLoadingSpinnerElement;
        "scale-menu-flyout": HTMLScaleMenuFlyoutElement;
        "scale-menu-flyout-divider": HTMLScaleMenuFlyoutDividerElement;
        "scale-menu-flyout-item": HTMLScaleMenuFlyoutItemElement;
        "scale-menu-flyout-list": HTMLScaleMenuFlyoutListElement;
        "scale-modal": HTMLScaleModalElement;
        "scale-notification-badge": HTMLScaleNotificationBadgeElement;
        "scale-notification-banner": HTMLScaleNotificationBannerElement;
        "scale-notification-message": HTMLScaleNotificationMessageElement;
        "scale-notification-toast": HTMLScaleNotificationToastElement;
        "scale-pagination": HTMLScalePaginationElement;
        "scale-progress-bar": HTMLScaleProgressBarElement;
        "scale-radio-button": HTMLScaleRadioButtonElement;
        "scale-radio-button-group": HTMLScaleRadioButtonGroupElement;
        "scale-rating-stars": HTMLScaleRatingStarsElement;
        "scale-sidebar-nav": HTMLScaleSidebarNavElement;
        "scale-sidebar-nav-collapsible": HTMLScaleSidebarNavCollapsibleElement;
        "scale-sidebar-nav-item": HTMLScaleSidebarNavItemElement;
        "scale-slider": HTMLScaleSliderElement;
        "scale-ssr-slot-fix": HTMLScaleSsrSlotFixElement;
        "scale-switch": HTMLScaleSwitchElement;
        "scale-tab-header": HTMLScaleTabHeaderElement;
        "scale-tab-nav": HTMLScaleTabNavElement;
        "scale-tab-panel": HTMLScaleTabPanelElement;
        "scale-table": HTMLScaleTableElement;
        "scale-tag": HTMLScaleTagElement;
        "scale-text-field": HTMLScaleTextFieldElement;
        "scale-textarea": HTMLScaleTextareaElement;
        "scale-toast": HTMLScaleToastElement;
        "scale-toggle-button": HTMLScaleToggleButtonElement;
        "scale-toggle-group": HTMLScaleToggleGroupElement;
        "scale-tooltip": HTMLScaleTooltipElement;
    }
}
declare namespace LocalJSX {
    interface ScaleAccordion {
        /**
          * If `true`, only one scale-collapsible within the accordion can be open at a time
         */
        "dependent"?: boolean;
        /**
          * If `true`, scale-collapsibles within the accordion will all be open initially, unless this is dependant
         */
        "expanded"?: boolean;
        /**
          * Heading level for scale-collapsible descendants
         */
        "headingLevel"?: number | null;
        "iconLocation"?: 'left' | 'right';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleAlert {
        /**
          * (optional) Alert title
         */
        "headline"?: string;
        /**
          * (optional) Alert icon
         */
        "icon"?: string;
        /**
          * (optional) Alert opened
         */
        "opened"?: boolean;
        /**
          * (optional) Alert size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Alert timeout
         */
        "timeout"?: boolean | number;
        /**
          * (optional) Alert variant
         */
        "variant"?: string;
    }
    interface ScaleBreadcrumb {
        "separator"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleButton {
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Name of a file to be downloaded
         */
        "download"?: string;
        /**
          * (optional) When present, an <a> tag will be used
         */
        "href"?: string;
        /**
          * (optional) Set to `true` when the button contains only an icon
         */
        "iconOnly"?: boolean;
        /**
          * (optional) Icon position related to the label
         */
        "iconPosition"?: 'before' | 'after';
        /**
          * (optional) Set `tabindex` in the inner button or link element
         */
        "innerTabindex"?: number;
        /**
          * (optional) The name of the button, submitted as a pair with the button's `value` as part of the form data
         */
        "name"?: string;
        /**
          * (optional) The size of the button
         */
        "size"?: 'small' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) The target attribute for the <a> tag
         */
        "target"?: string;
        /**
          * (optional) Button type
         */
        "type"?: 'reset' | 'submit' | 'button';
        /**
          * (optional) Defines the value associated with the button's `name`
         */
        "value"?: string;
        /**
          * (optional) Button variant
         */
        "variant"?: string;
    }
    interface ScaleCallout {
        /**
          * (optional) text when hovering with asterisk
         */
        "asterisk"?: string;
        /**
          * (optional) Variant rotation of the callout/circle
         */
        "rotation"?: number;
        /**
          * (optional) Variant size of the callout itself
         */
        "size"?: 'large' | 'small';
        /**
          * (optional) Variant filling of the callout
         */
        "variant"?: 'primary' | 'white' | 'black' | 'blue';
    }
    interface ScaleCard {
        /**
          * (optional) Label of the card
         */
        "label"?: string;
        /**
          * (optional) Link card rel
         */
        "rel"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Link card target
         */
        "target"?: string;
        /**
          * (optional) Link card
         */
        "to"?: string;
    }
    interface ScaleCarousel {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) carousel display direction
         */
        "vertical"?: boolean;
    }
    interface ScaleChartStackCard {
        /**
          * Chart Data
         */
        "data"?: string | Array<Record<'type' | 'value' | 'percentage', string>>;
        /**
          * Chart Title
         */
        "heading"?: string;
    }
    interface ScaleCheckbox {
        /**
          * (optional) Input label output
         */
        "ariaLabelCheckbox"?: string;
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Hides the specified label visually
         */
        "hideLabel"?: boolean;
        /**
          * (optional) indeterminate
         */
        "indeterminate"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onScale-change"?: (event: CustomEvent<any>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: CustomEvent<any>) => void;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string;
    }
    interface ScaleCheckboxGroup {
        /**
          * @deprecated - ariaLabelCheckboxGroup should replace ariaLabel
         */
        "ariaLabelCheckboxGroup"?: string;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        "selectText"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        "unselectText"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string;
    }
    interface ScaleCollapsible {
        /**
          * Set to `true` to expand
         */
        "expanded"?: boolean;
        /**
          * Default aria-level for heading
         */
        "headingLevel"?: number;
        "iconLocation"?: 'left' | 'right';
        /**
          * Emitted so parent <scale-accordion> knows about it
         */
        "onScale-expand"?: (event: CustomEvent<CollapsibleEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleExpand"?: (event: CustomEvent<CollapsibleEventDetail>) => void;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleDataGrid {
        /**
          * Input fields config array
         */
        "fields"?: any;
        /**
          * (optional) Freeze header row from scrolling
         */
        "freezeHeader"?: boolean;
        /**
          * (optional) Heading string
         */
        "heading"?: string;
        /**
          * (optional) Set static table height, by default will auto-resize
         */
        "height"?: string;
        /**
          * (optional) Set to true to remove border
         */
        "hideBorder"?: boolean;
        /**
          * (optional) Set to true to hide header row
         */
        "hideHeader"?: boolean;
        /**
          * (optional) Set to true to remove info footer block including pagination and selection status
         */
        "hideInfo"?: boolean;
        /**
          * (optional) Set to true to hide settings menu
         */
        "hideMenu"?: boolean;
        /**
          * (optional) Set to true to add numbers column
         */
        "numbered"?: boolean;
        /**
          * Event triggered every time the editable cells are changed, updating the original rows data
         */
        "onScale-edit"?: (event: CustomEvent<DataGridEditEventDetail>) => void;
        /**
          * Event triggered every time the data is sorted, changing original rows data
         */
        "onScale-sort"?: (event: CustomEvent<DataGridSortedEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleEdit"?: (event: CustomEvent<DataGridEditEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleSort"?: (event: CustomEvent<DataGridSortedEventDetail>) => void;
        /**
          * (optional) Set number of rows to display per pagination page
         */
        "pageSize"?: number;
        /**
          * Input data array
         */
        "rows"?: any;
        /**
          * (optional) Set to true to add selection column
         */
        "selectable"?: boolean;
        /**
          * Read-only selection array - populated with raw data from selected rows
         */
        "selection"?: string[];
        /**
          * (optional) Shade every second row darker
         */
        "shadeAlternate"?: boolean;
        /**
          * (optional) Injected css styles
         */
        "styles"?: any;
        /**
          * (optional) Set to false to hide table, used for nested tables to re-render upon toggle
         */
        "visible"?: boolean;
    }
    interface ScaleDatePicker {
        /**
          * Date adapter, for custom parsing/formatting. Must be object with a `parse` function which accepts a `string` and returns a `Date`, and a `format` function which accepts a `Date` and returns a `string`. Default is IS0-8601 parsing and formatting.
         */
        "dateAdapter"?: any;
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction"?: DuetDatePickerDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc. Default is Monday.
         */
        "firstDayOfWeek"?: any;
        /**
          * (optional) Helper text
         */
        "helperText"?: string;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier"?: string;
        /**
          * (optional) invalid status
         */
        "invalid"?: boolean;
        /**
          * (optional) Label
         */
        "label"?: string;
        /**
          * Button labels, day names, month names, etc, used for localization. Default is English.
         */
        "localization"?: DuetLocalizedText & {
    today: string;
  };
        /**
          * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the min property.
         */
        "max"?: string;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the max property.
         */
        "min"?: string;
        /**
          * Name of the date picker input.
         */
        "name"?: string;
        /**
          * Event emitted the date picker input is blurred.
         */
        "onScale-blur"?: (event: CustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * Event emitted when a date is selected.
         */
        "onScale-change"?: (event: CustomEvent<DuetDatePickerChangeEvent>) => void;
        /**
          * Event emitted the date picker input is focused.
         */
        "onScale-focus"?: (event: CustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBlur"?: (event: CustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: CustomEvent<DuetDatePickerChangeEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleFocus"?: (event: CustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * @deprecated in v3 in favor of localization.calendarHeading
         */
        "popupTitle"?: string;
        /**
          * Should the input be marked as required?
         */
        "required"?: boolean;
        /**
          * Defines a specific role attribute for the date picker input.
         */
        "role"?: string;
        /**
          * (optional) Size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
         */
        "value"?: string;
    }
    interface ScaleDivider {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Divider vertical
         */
        "vertical"?: boolean;
    }
    interface ScaleDropdown {
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScale-blur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScale-change"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScale-focus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScale-input"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScale-keydown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBlur"?: (event: CustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleFocus"?: (event: CustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleKeydown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleGrid {
        /**
          * (optional) Set amount of columns in container
         */
        "columns"?: string;
        /**
          * (optioanl) Set gutter between rows
         */
        "gutterX"?: string;
        /**
          * (optional) Set gutter between columns
         */
        "gutterY"?: string;
        /**
          * (optioanl) Set max-width to contaier
         */
        "maxWidth"?: string;
        /**
          * (optioanl) Set padding to container
         */
        "spacing"?: string;
    }
    interface ScaleGridItem {
        /**
          * (optional) Set starting column
         */
        "offset"?: string;
        /**
          * (optional) Set size of column
         */
        "size"?: string;
    }
    interface ScaleIcon {
        /**
          * (optional) When using the icon as standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) If `true` the svg element will get aria-hidden="true"
         */
        "decorative"?: boolean;
        /**
          * The SVG `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * A name that will be used to reference an SVG object defined elsewhere, via `<use xlink:href="">`. `icon-` will be prepended to the name, so if you pass `circle`, it will look for for the `icon-circle` id e.g. `<use xlink:href="#icon-circle">`. If there is no element in the document with the id by the name provided, this component will render empty.
         */
        "name"?: string;
        /**
          * A path shape to be used in the `d` attribute of a path element.
         */
        "path"?: string;
        /**
          * Will be used for both `width` and `height`, all icons are square. Keep in mind the `viewBox` attribute is set to "0 0 24 24".
         */
        "size"?: number;
        /**
          * The SVG `stroke` attribute
         */
        "stroke"?: string;
    }
    interface ScaleIconActionAdd {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCircleClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDownload {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionEdit {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFavorite {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionHidePassword {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionIndeterminate {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLogout {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRandom {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSearch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSort {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSuccess {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertImprintDataprivacy {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCalendar {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHeart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeHome {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationExternalLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationLeft {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationRight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceDevicesService {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceMaintanance {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceServices {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSettings {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSupport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAnalytics {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Alias for `fill`
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleInput {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox checked icon
         */
        "icon"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScale-blur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScale-change"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScale-focus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScale-input"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScale-keydown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBlur"?: (event: CustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleFocus"?: (event: CustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleKeyDown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'checkbox'
    | 'radio'
    | 'select'
    | 'textarea'
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Input label variant
         */
        "variant"?: 'animated' | 'static';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleLink {
        /**
          * (optional) Disabled link
         */
        "disabled"?: boolean;
        /**
          * (optional) Download declaration
         */
        "download"?: string;
        /**
          * (optional) Link href
         */
        "href"?: string;
        /**
          * (optional)
         */
        "hreflang"?: string;
        /**
          * (optional) Chnage icon/content slot order
         */
        "iconPosition"?: 'before' | 'after';
        /**
          * (optional) Set `tabindex` in the inner button or link element
         */
        "innerTabindex"?: number;
        /**
          * (optional) Remove the initial line from the text (can also be achieved via `--line-thickness-initial: 0`) Remove the line for every state with `--line-thickness: 0`
         */
        "omitUnderline"?: boolean;
        /**
          * (optional)
         */
        "ping"?: string;
        /**
          * (optional)
         */
        "referrerpolicy"?: ReferrerPolicy;
        /**
          * (optional)
         */
        "rel"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional)
         */
        "target"?: '_self' | '_blank' | '_parent' | '_top';
        /**
          * (optional)
         */
        "type"?: string;
    }
    interface ScaleList {
        /**
          * (optional) Make the list ordered (ol)
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleListItem {
        /**
          * Index number, useful only for styling the `ordered` type
         */
        "index"?: number;
        /**
          * If `false`, no marker or left padding will be visible
         */
        "marker"?: boolean;
        /**
          * Whether this is a child of an ordered scale-list, gets set automatically by its parent
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleLoadingSpinner {
        "alignment"?: 'horizontal' | 'vertical';
        "size"?: 'small' | 'large';
        "text"?: string;
        "variant"?: 'white' | 'primary';
    }
    interface ScaleMenuFlyout {
        /**
          * (optional) Determines whether the flyout should close when a menu item is selected
         */
        "closeOnSelect"?: boolean;
        /**
          * (optional) Set preference for where the menu appears, space permitting
         */
        "direction"?: | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left'
    | 'right'
    | 'left';
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleMenuFlyoutDivider {
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleMenuFlyoutItem {
        /**
          * (optional) Mark as active
         */
        "active"?: boolean;
        /**
          * (optional) Set to true to display arrow icon suffix
         */
        "cascade"?: boolean;
        /**
          * (optional) Whether the item should behave as a checkbox
         */
        "checkable"?: 'checkbox' | 'radio' | null;
        /**
          * (optional) Set to true to display check prefix, false to display empty prefix
         */
        "checked"?: boolean;
        /**
          * (optional) Disabled
         */
        "disabled"?: boolean;
        /**
          * Event triggered when menu item selected
         */
        "onScale-select"?: (event: CustomEvent<{
    item: HTMLElement;
  }>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleSelect"?: (event: CustomEvent<{
    item: HTMLElement;
  }>) => void;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) value
         */
        "value"?: string;
    }
    interface ScaleMenuFlyoutList {
        "active"?: boolean;
        /**
          * (optional) Determines whether the flyout should close when a menu item is selected
         */
        "closeOnSelect"?: boolean;
        /**
          * (optional) Set preference for where the menu appears, space permitting
         */
        "direction"?: | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left'
    | 'right'
    | 'left';
        /**
          * Event triggered when menu list closed
         */
        "onScale-close"?: (event: CustomEvent<{
    list: HTMLElement;
  }>) => void;
        /**
          * Event triggered when menu list opened
         */
        "onScale-open"?: (event: CustomEvent<{
    list: HTMLElement;
  }>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleClose"?: (event: CustomEvent<{
    list: HTMLElement;
  }>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleOpen"?: (event: CustomEvent<{
    list: HTMLElement;
  }>) => void;
        "opened"?: boolean;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        "trigger"?: () => HTMLElement;
    }
    interface ScaleModal {
        /**
          * (optional) Alignment of action buttons
         */
        "alignActions"?: 'right' | 'left';
        /**
          * (optional) allow to inject css style {overflow: hidden} to body when modal is open
         */
        "allowInjectingStyleToBody"?: boolean;
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) title for close button
         */
        "closeButtonTitle"?: string;
        /**
          * (optional) Transition duration
         */
        "duration"?: number;
        /**
          * Modal heading
         */
        "heading"?: string;
        /**
          * Fires on every close attempt. Calling `event.preventDefault()` will prevent the modal from closing
         */
        "onScale-before-close"?: (event: CustomEvent<BeforeCloseEventDetail>) => void;
        /**
          * Fires when the modal has been closed
         */
        "onScale-close"?: (event: CustomEvent<void>) => void;
        /**
          * Fires when the modal has been opened
         */
        "onScale-open"?: (event: CustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBeforeClose"?: (event: CustomEvent<BeforeCloseEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleClose"?: (event: CustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleOpen"?: (event: CustomEvent<void>) => void;
        /**
          * (optional) If `true`, the Modal is open.
         */
        "opened"?: boolean;
        /**
          * (optional) Modal size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleNotificationBadge {
        /**
          * (optional) Handle click on the badge and surroundet slot elements
         */
        "clickHandler"?: any;
        /**
          * (optional) Text that is displayed in the badge
         */
        "label"?: number;
        /**
          * (optional) Maximal number of characters displayed in the badge
         */
        "maxCharacters"?: number;
        /**
          * (optional) Setting/Slotcontent in which the badge is used
         */
        "type"?: 'icon' | 'text' | 'nav-icon';
    }
    interface ScaleNotificationBanner {
        "autoHide"?: boolean;
        "autoHideDuration"?: number;
        "dismissible"?: boolean;
        "href"?: string;
        /**
          * Fires when the notification banner has been dismissed
         */
        "onScale-close"?: (event: CustomEvent<void>) => void;
        "opened"?: boolean;
        "variant"?: 'informational' | 'success' | 'warning' | 'error';
    }
    interface ScaleNotificationMessage {
        "autoHide"?: boolean;
        "autoHideDuration"?: number;
        "dismissible"?: boolean;
        /**
          * Fires when the notification message has been dismissed
         */
        "onScale-close"?: (event: CustomEvent<void>) => void;
        "opened"?: boolean;
        "variant"?: 'informational' | 'success' | 'warning' | 'error';
    }
    interface ScaleNotificationToast {
        /**
          * (optional) Alignment choose for top and bottom
         */
        "alignment"?: | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left';
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast auto hide
         */
        "autoHide"?: boolean;
        /**
          * (optional) Toast auto hide duration
         */
        "autoHideDuration"?: number;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        "href"?: string;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionHorizontal"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionVertical"?: number;
        /**
          * (do not use) it is a helper prop for storybook
         */
        "story"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Toast variant
         */
        "variant"?: 'error' | 'warning' | 'success' | 'informational';
    }
    interface ScalePagination {
        /**
          * (optional) translation to 'Go to first page'
         */
        "ariaLabelFirstPage"?: string;
        /**
          * (optional) translation to 'Go to last page'
         */
        "ariaLabelLastPage"?: string;
        /**
          * (optional) translation to 'Go to next page'
         */
        "ariaLabelNextPage"?: string;
        /**
          * (optional) translation to 'Go to previous page'
         */
        "ariaLabelPreviousPage"?: string;
        /**
          * (optional) Set to true to hide top and bottom borders
         */
        "hideBorder"?: boolean;
        /**
          * (optional) Deprecated; hideBorder should replace hideBorders
         */
        "hideBorders"?: boolean;
        /**
          * Event triggered every time the data is edited, changing original rows data
         */
        "onScale-pagination"?: (event: CustomEvent<{
    startElement?: number;
    currentPage?: number;
    direction: PaginationEventDirection;
  }>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScalePagination"?: (event: CustomEvent<{
    startElement?: number;
    currentPage?: number;
    direction: PaginationEventDirection;
  }>) => void;
        /**
          * (optional) Set number of rows/elements to show per page
         */
        "pageSize"?: number;
        /**
          * (optional) size
         */
        "size"?: 'small' | 'large';
        /**
          * @deprecated - size should replace small
         */
        "small"?: boolean;
        /**
          * (optional) Index of first element to display
         */
        "startElement"?: number;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) Total number of rows/elements used to calculate page displays
         */
        "totalElements"?: number;
    }
    interface ScaleProgressBar {
        /**
          * (optional) Progress bar busy switch
         */
        "busy"?: boolean;
        /**
          * @deprecated - (optional) Progress bar customColor
         */
        "customColor"?: string;
        /**
          * (optional) Progress bar disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Progress bar error
         */
        "hasError"?: boolean;
        /**
          * (optional) Progress bar icon indicator
         */
        "icon"?: string;
        /**
          * (optional) Progress bar label
         */
        "label"?: string;
        /**
          * (optional) disables aria-live
         */
        "mute"?: boolean;
        /**
          * (required) Progress bar percentage
         */
        "percentage"?: number;
        /**
          * (optional) Progress bar id
         */
        "progressBarId"?: string;
        /**
          * (optional) Progress bar percentage text
         */
        "showStatus"?: boolean;
        /**
          * (optional) Progress bar status description text
         */
        "statusDescription"?: string;
        /**
          * (optional) Progress text display inside bar
         */
        "statusInside"?: boolean;
        /**
          * (optional) Progress bar stroke width
         */
        "strokeWidth"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleRadioButton {
        /**
          * (optional) Input checked
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        "onScale-change"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleRadioButtonGroup {
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
    }
    interface ScaleRatingStars {
        /**
          * a11y text for getting meaningful value. `$rating` and `$max` (deprecated `$maxRating`) are template variables and will be replaces by their corresponding properties.
         */
        "ariaLabelTranslation"?: string;
        /**
          * disables input
         */
        "disabled"?: boolean;
        /**
          * (optional) info text
         */
        "hideLabel"?: boolean;
        /**
          * (optional) info text
         */
        "infoText"?: string;
        /**
          * (optional) rating label
         */
        "label"?: string;
        /**
          * The upper limit of the rating
         */
        "max"?: number;
        /**
          * @deprecated ; max should be used instead of maxRating
         */
        "maxRating"?: number;
        /**
          * @deprecated ; The lower limit of the rating
         */
        "minRating"?: number;
        /**
          * Emitted when the rating has changed
         */
        "onScale-change"?: (event: CustomEvent<any>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: CustomEvent<any>) => void;
        /**
          * Represents the current value of the rating
         */
        "rating"?: number;
        /**
          * makes the rating non-interactive (but still accessible)
         */
        "readonly"?: boolean;
        /**
          * size of the stars
         */
        "size"?: 'small' | 'large';
        /**
          * @deprecated ; size should be used instead of starSize
         */
        "starSize"?: 'small' | 'large';
    }
    interface ScaleSidebarNav {
        /**
          * From mdn: A brief description of the purpose of the navigation, omitting the term "navigation", as the screen reader will read both the role and the contents of the label.
         */
        "ariaLabelSidebarNav"?: string;
        /**
          * Set to `true` to make the sidebar toggleable (useful for small screens)
         */
        "collapsible"?: boolean;
        /**
          * Label for toggle button
         */
        "collapsibleLabel"?: string;
        /**
          * Automatically set `collapsible` based on this media query
         */
        "collapsibleMediaQuery"?: string;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSidebarNavCollapsible {
        /**
          * Label and icon get the active color
         */
        "active"?: boolean;
        /**
          * Bold label and icon
         */
        "bold"?: boolean;
        /**
          * Used normally for third level items
         */
        "condensed"?: boolean;
        /**
          * Set this to `true` to expand
         */
        "expanded"?: boolean;
        /**
          * The URL where the link should point to
         */
        "href"?: string;
        /**
          * The text for the button
         */
        "label"?: string;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel"?: number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
        /**
          * The parent wrapper
         */
        "tag"?: string;
    }
    interface ScaleSidebarNavItem {
        /**
          * Text gets the active color
         */
        "active"?: boolean;
        /**
          * Bold text
         */
        "bold"?: boolean;
        /**
          * Used normally for third level items, remove the bottom border
         */
        "condensed"?: boolean;
        /**
          * Mark the child link as "current" with `aria-current=page`. Provide the text hint if needed, default is: "Zurzeit aktiv"
         */
        "current"?: string | null | boolean;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel"?: number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSlider {
        /**
          * @deprecated - optional) slider custom color
         */
        "customColor"?: string;
        /**
          * (optional) number of decimal places
         */
        "decimals"?: 0 | 1 | 2;
        /**
          * (optional) disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) slider label
         */
        "label"?: string;
        /**
          * (optional) the maximal value of the slider
         */
        "max"?: number;
        /**
          * t(optional) he minimal value of the slider
         */
        "min"?: number;
        /**
          * (optional) the name of the slider
         */
        "name"?: string;
        "onScale-change"?: (event: CustomEvent<number>) => void;
        "onScale-input"?: (event: CustomEvent<number>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: CustomEvent<number>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleInput"?: (event: CustomEvent<number>) => void;
        /**
          * (optional) slider display value
         */
        "showValue"?: boolean;
        /**
          * (optional) Slider id
         */
        "sliderId"?: string;
        /**
          * (optional) the step size to increase or decrease when dragging slider
         */
        "step"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) larger thumb
         */
        "thumbLarge"?: boolean;
        /**
          * (optional) smaller track
         */
        "trackSmall"?: boolean;
        /**
          * (optional) slider value unit
         */
        "unit"?: string;
        /**
          * (optional) the display value of the slider
         */
        "value"?: number;
    }
    interface ScaleSsrSlotFix {
    }
    interface ScaleSwitch {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Disabled switch
         */
        "disabled"?: boolean;
        /**
          * (optional) Input id
         */
        "inputId"?: string;
        /**
          * (optional) switch label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the switch was clicked
         */
        "onScale-change"?: (event: CustomEvent<any>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: CustomEvent<any>) => void;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabHeader {
        /**
          * True for a disabled Tabnavigation
         */
        "disabled"?: boolean;
        "selected"?: boolean;
        /**
          * (optional) size
         */
        "size"?: 'small' | 'large';
        /**
          * True for smaller height and font size
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabNav {
        /**
          * (optional) size
         */
        "size"?: 'small' | 'large';
        /**
          * @deprecated - size should replace small
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabPanel {
        /**
          * (optional) size
         */
        "size"?: 'small' | 'large';
        /**
          * True for smaller height and font size
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTable {
        /**
          * (optional) Display sort arrows on/off
         */
        "showSort"?: boolean;
        /**
          * (optional) Visual size
         */
        "size"?: 'default' | 'small' | string;
        /**
          * (optional) Striped Table
         */
        "striped"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTag {
        /**
          * (optional) Tag disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Dismiss label
         */
        "dismissText"?: string;
        /**
          * (optional) Tag dismissable
         */
        "dismissable"?: boolean;
        /**
          * (optional) Tag href
         */
        "href"?: string;
        /**
          * (optional) Close icon click event
         */
        "onScale-close"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleClose"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * (optional) Tag size
         */
        "size"?: 'small';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Tag target
         */
        "target"?: string;
        /**
          * (optional) Tag variant
         */
        "variant"?: 'secondary';
    }
    interface ScaleTextField {
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) the input should automatically get focus when the page loads.
         */
        "inputAutofocus"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * Input label
         */
        "label"?: string;
        /**
          * (optional) input list
         */
        "list"?: string;
        /**
          * (optional) define the numeric maximum value of input types such as month, date, time
         */
        "max"?: number;
        /**
          * (optional) Input text string max length
         */
        "maxLength"?: number;
        /**
          * (optional) defines the numeric minimum value of input types such as month, date, time
         */
        "min"?: number;
        /**
          * (optional) Input text string min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScale-blur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScale-change"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScale-focus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScale-input"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScale-keydown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBlur"?: (event: CustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleFocus"?: (event: CustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleKeydown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input readonly
         */
        "readonly"?: boolean;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) the step attribute specifies the interval between legal numbers in an <input type="number"> element.
         */
        "step"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'date'
    | 'month' // example yyyy-mm
    | 'week' // example yyyy-W##
    | 'time' // example hh:mm
    | 'datetime-local' // example yyyy-mm-ddThh:mm
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleTextarea {
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) the input should automatically get focus when the page loads.
         */
        "inputAutofocus"?: boolean;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input status
         */
        "invalid"?: boolean;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScale-blur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScale-change"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScale-focus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScale-input"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScale-keydown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleBlur"?: (event: CustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleFocus"?: (event: CustomEvent<void>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleKeyDown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input readonly
         */
        "readonly"?: boolean;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * @deprecated - invalid should replace status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleToast {
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast autohide time
         */
        "autoHide"?: boolean | number;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionRight"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionTop"?: number;
        /**
          * (optional) Toast size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Toast time
         */
        "time"?: number;
        /**
          * (optional) Toast variant
         */
        "variant"?: string;
    }
    interface ScaleToggleButton {
        /**
          * a11y text for getting meaningful value. `$buttonNumber` and `$selected` are template variables and will be replaces by their corresponding properties.
         */
        "ariaDescriptionTranslation"?: string;
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabelToggleButton"?: string;
        /**
          * (optional) translation of 'deselected
         */
        "ariaLangDeselected"?: string;
        /**
          * (optional) translation of 'selected
         */
        "ariaLangSelected"?: string;
        /**
          * (optional) Button background
         */
        "background"?: 'grey' | 'white';
        /**
          * @deprecated - variant should replace colorScheme
         */
        "colorScheme"?: 'monochrome' | 'color';
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) set the border-radius left, right or both
         */
        "hideBorder"?: false;
        /**
          * (optional) Button type
         */
        "iconOnly"?: boolean;
        /**
          * (optional) Icon position related to the label
         */
        "iconPosition"?: 'before' | 'after';
        /**
          * Emitted when button is clicked
         */
        "onScale-click"?: (event: CustomEvent<{
    id: string;
    selected: boolean;
  }>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleClick"?: (event: CustomEvent<{
    id: string;
    selected: boolean;
  }>) => void;
        /**
          * (optional) position within group
         */
        "position"?: number;
        /**
          * (optional) set the border-radius left, right or both
         */
        "radius"?: 'left' | 'right' | 'both' | 'neither' | null;
        /**
          * (optional) If `true`, the button is selected
         */
        "selected"?: boolean;
        /**
          * (optional) The size of the button
         */
        "size"?: 'large' | 'regular' | 'small' | 'xs';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) toggle button's id
         */
        "toggleButtonId"?: string;
        /**
          * (optional) background variant of a selected toggle-button
         */
        "variant"?: 'monochrome' | 'color';
    }
    interface ScaleToggleGroup {
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabelTranslation"?: string;
        /**
          * (optional) Button Group background
         */
        "background"?: 'grey' | 'white';
        /**
          * @deprecated - variant should replace colorScheme
         */
        "colorScheme"?: 'monochrome' | 'color';
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) 100% width
         */
        "fullWidth"?: boolean;
        /**
          * (optional) If `true`, the group has a border
         */
        "hideBorder"?: boolean;
        /**
          * Emitted when button is clicked
         */
        "onScale-change"?: (event: CustomEvent<any>) => void;
        /**
          * @deprecated in v3 in favor of kebab-case event names
         */
        "onScaleChange"?: (event: CustomEvent<any>) => void;
        /**
          * (optional) more than one button selected possible
         */
        "singleSelect"?: boolean;
        /**
          * (optional) The size of the button
         */
        "size"?: 'large' | 'regular' | 'small' | 'xs';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) background variant of a selected toggle-button
         */
        "variant"?: 'monochrome' | 'color';
    }
    interface ScaleTooltip {
        /**
          * (optional) The content of the Tooltip supporting Text only
         */
        "content"?: string;
        /**
          * (optional) Disable Tooltip
         */
        "disabled"?: boolean;
        /**
          * (optional) Distance of the Tooltip from the Target Object (related to the `placement`)
         */
        "distance"?: number;
        /**
          * (optional) Switching the flip option of the tooltip on and off
         */
        "flip"?: boolean;
        "onScale-before-hide"?: (event: CustomEvent<any>) => void;
        "onScale-before-show"?: (event: CustomEvent<any>) => void;
        "onScale-hide"?: (event: CustomEvent<any>) => void;
        "onScale-show"?: (event: CustomEvent<any>) => void;
        /**
          * (optional) Set the Tooltip to open per default (will still be closed on closing Events)
         */
        "open"?: boolean;
        /**
          * (optional) Position of the Tooltip on the Object
         */
        "placement"?: | 'top'
    | 'top-start'
    | 'top-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * (optional) Switching the preventOverflow option of the tooltip on and off
         */
        "preventOverflow"?: boolean;
        /**
          * (optional) skidding moves the tooltip of the element in dependence of its `placement` to the element either on an x-axis (at `placement` top/down) or on a y-axis (for output `placement` left/right)
         */
        "skidding"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Set custom trigger Event selection
         */
        "trigger"?: string;
    }
    interface IntrinsicElements {
        "scale-accordion": ScaleAccordion;
        "scale-alert": ScaleAlert;
        "scale-breadcrumb": ScaleBreadcrumb;
        "scale-button": ScaleButton;
        "scale-callout": ScaleCallout;
        "scale-card": ScaleCard;
        "scale-carousel": ScaleCarousel;
        "scale-chart-stack-card": ScaleChartStackCard;
        "scale-checkbox": ScaleCheckbox;
        "scale-checkbox-group": ScaleCheckboxGroup;
        "scale-collapsible": ScaleCollapsible;
        "scale-data-grid": ScaleDataGrid;
        "scale-date-picker": ScaleDatePicker;
        "scale-divider": ScaleDivider;
        "scale-dropdown": ScaleDropdown;
        "scale-grid": ScaleGrid;
        "scale-grid-item": ScaleGridItem;
        "scale-icon": ScaleIcon;
        "scale-icon-action-add": ScaleIconActionAdd;
        "scale-icon-action-circle-close": ScaleIconActionCircleClose;
        "scale-icon-action-close": ScaleIconActionClose;
        "scale-icon-action-download": ScaleIconActionDownload;
        "scale-icon-action-edit": ScaleIconActionEdit;
        "scale-icon-action-favorite": ScaleIconActionFavorite;
        "scale-icon-action-hide-password": ScaleIconActionHidePassword;
        "scale-icon-action-indeterminate": ScaleIconActionIndeterminate;
        "scale-icon-action-logout": ScaleIconActionLogout;
        "scale-icon-action-random": ScaleIconActionRandom;
        "scale-icon-action-search": ScaleIconActionSearch;
        "scale-icon-action-sort": ScaleIconActionSort;
        "scale-icon-action-success": ScaleIconActionSuccess;
        "scale-icon-alert-imprint-dataprivacy": ScaleIconAlertImprintDataprivacy;
        "scale-icon-content-calendar": ScaleIconContentCalendar;
        "scale-icon-content-heart": ScaleIconContentHeart;
        "scale-icon-home-home": ScaleIconHomeHome;
        "scale-icon-navigation-collapse-down": ScaleIconNavigationCollapseDown;
        "scale-icon-navigation-collapse-up": ScaleIconNavigationCollapseUp;
        "scale-icon-navigation-external-link": ScaleIconNavigationExternalLink;
        "scale-icon-navigation-left": ScaleIconNavigationLeft;
        "scale-icon-navigation-right": ScaleIconNavigationRight;
        "scale-icon-service-devices-service": ScaleIconServiceDevicesService;
        "scale-icon-service-maintanance": ScaleIconServiceMaintanance;
        "scale-icon-service-services": ScaleIconServiceServices;
        "scale-icon-service-settings": ScaleIconServiceSettings;
        "scale-icon-service-support": ScaleIconServiceSupport;
        "scale-icon-user-file-analytics": ScaleIconUserFileAnalytics;
        "scale-input": ScaleInput;
        "scale-link": ScaleLink;
        "scale-list": ScaleList;
        "scale-list-item": ScaleListItem;
        "scale-loading-spinner": ScaleLoadingSpinner;
        "scale-menu-flyout": ScaleMenuFlyout;
        "scale-menu-flyout-divider": ScaleMenuFlyoutDivider;
        "scale-menu-flyout-item": ScaleMenuFlyoutItem;
        "scale-menu-flyout-list": ScaleMenuFlyoutList;
        "scale-modal": ScaleModal;
        "scale-notification-badge": ScaleNotificationBadge;
        "scale-notification-banner": ScaleNotificationBanner;
        "scale-notification-message": ScaleNotificationMessage;
        "scale-notification-toast": ScaleNotificationToast;
        "scale-pagination": ScalePagination;
        "scale-progress-bar": ScaleProgressBar;
        "scale-radio-button": ScaleRadioButton;
        "scale-radio-button-group": ScaleRadioButtonGroup;
        "scale-rating-stars": ScaleRatingStars;
        "scale-sidebar-nav": ScaleSidebarNav;
        "scale-sidebar-nav-collapsible": ScaleSidebarNavCollapsible;
        "scale-sidebar-nav-item": ScaleSidebarNavItem;
        "scale-slider": ScaleSlider;
        "scale-ssr-slot-fix": ScaleSsrSlotFix;
        "scale-switch": ScaleSwitch;
        "scale-tab-header": ScaleTabHeader;
        "scale-tab-nav": ScaleTabNav;
        "scale-tab-panel": ScaleTabPanel;
        "scale-table": ScaleTable;
        "scale-tag": ScaleTag;
        "scale-text-field": ScaleTextField;
        "scale-textarea": ScaleTextarea;
        "scale-toast": ScaleToast;
        "scale-toggle-button": ScaleToggleButton;
        "scale-toggle-group": ScaleToggleGroup;
        "scale-tooltip": ScaleTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "scale-accordion": LocalJSX.ScaleAccordion & JSXBase.HTMLAttributes<HTMLScaleAccordionElement>;
            "scale-alert": LocalJSX.ScaleAlert & JSXBase.HTMLAttributes<HTMLScaleAlertElement>;
            "scale-breadcrumb": LocalJSX.ScaleBreadcrumb & JSXBase.HTMLAttributes<HTMLScaleBreadcrumbElement>;
            "scale-button": LocalJSX.ScaleButton & JSXBase.HTMLAttributes<HTMLScaleButtonElement>;
            "scale-callout": LocalJSX.ScaleCallout & JSXBase.HTMLAttributes<HTMLScaleCalloutElement>;
            "scale-card": LocalJSX.ScaleCard & JSXBase.HTMLAttributes<HTMLScaleCardElement>;
            "scale-carousel": LocalJSX.ScaleCarousel & JSXBase.HTMLAttributes<HTMLScaleCarouselElement>;
            "scale-chart-stack-card": LocalJSX.ScaleChartStackCard & JSXBase.HTMLAttributes<HTMLScaleChartStackCardElement>;
            "scale-checkbox": LocalJSX.ScaleCheckbox & JSXBase.HTMLAttributes<HTMLScaleCheckboxElement>;
            "scale-checkbox-group": LocalJSX.ScaleCheckboxGroup & JSXBase.HTMLAttributes<HTMLScaleCheckboxGroupElement>;
            "scale-collapsible": LocalJSX.ScaleCollapsible & JSXBase.HTMLAttributes<HTMLScaleCollapsibleElement>;
            "scale-data-grid": LocalJSX.ScaleDataGrid & JSXBase.HTMLAttributes<HTMLScaleDataGridElement>;
            "scale-date-picker": LocalJSX.ScaleDatePicker & JSXBase.HTMLAttributes<HTMLScaleDatePickerElement>;
            "scale-divider": LocalJSX.ScaleDivider & JSXBase.HTMLAttributes<HTMLScaleDividerElement>;
            "scale-dropdown": LocalJSX.ScaleDropdown & JSXBase.HTMLAttributes<HTMLScaleDropdownElement>;
            "scale-grid": LocalJSX.ScaleGrid & JSXBase.HTMLAttributes<HTMLScaleGridElement>;
            "scale-grid-item": LocalJSX.ScaleGridItem & JSXBase.HTMLAttributes<HTMLScaleGridItemElement>;
            "scale-icon": LocalJSX.ScaleIcon & JSXBase.HTMLAttributes<HTMLScaleIconElement>;
            "scale-icon-action-add": LocalJSX.ScaleIconActionAdd & JSXBase.HTMLAttributes<HTMLScaleIconActionAddElement>;
            "scale-icon-action-circle-close": LocalJSX.ScaleIconActionCircleClose & JSXBase.HTMLAttributes<HTMLScaleIconActionCircleCloseElement>;
            "scale-icon-action-close": LocalJSX.ScaleIconActionClose & JSXBase.HTMLAttributes<HTMLScaleIconActionCloseElement>;
            "scale-icon-action-download": LocalJSX.ScaleIconActionDownload & JSXBase.HTMLAttributes<HTMLScaleIconActionDownloadElement>;
            "scale-icon-action-edit": LocalJSX.ScaleIconActionEdit & JSXBase.HTMLAttributes<HTMLScaleIconActionEditElement>;
            "scale-icon-action-favorite": LocalJSX.ScaleIconActionFavorite & JSXBase.HTMLAttributes<HTMLScaleIconActionFavoriteElement>;
            "scale-icon-action-hide-password": LocalJSX.ScaleIconActionHidePassword & JSXBase.HTMLAttributes<HTMLScaleIconActionHidePasswordElement>;
            "scale-icon-action-indeterminate": LocalJSX.ScaleIconActionIndeterminate & JSXBase.HTMLAttributes<HTMLScaleIconActionIndeterminateElement>;
            "scale-icon-action-logout": LocalJSX.ScaleIconActionLogout & JSXBase.HTMLAttributes<HTMLScaleIconActionLogoutElement>;
            "scale-icon-action-random": LocalJSX.ScaleIconActionRandom & JSXBase.HTMLAttributes<HTMLScaleIconActionRandomElement>;
            "scale-icon-action-search": LocalJSX.ScaleIconActionSearch & JSXBase.HTMLAttributes<HTMLScaleIconActionSearchElement>;
            "scale-icon-action-sort": LocalJSX.ScaleIconActionSort & JSXBase.HTMLAttributes<HTMLScaleIconActionSortElement>;
            "scale-icon-action-success": LocalJSX.ScaleIconActionSuccess & JSXBase.HTMLAttributes<HTMLScaleIconActionSuccessElement>;
            "scale-icon-alert-imprint-dataprivacy": LocalJSX.ScaleIconAlertImprintDataprivacy & JSXBase.HTMLAttributes<HTMLScaleIconAlertImprintDataprivacyElement>;
            "scale-icon-content-calendar": LocalJSX.ScaleIconContentCalendar & JSXBase.HTMLAttributes<HTMLScaleIconContentCalendarElement>;
            "scale-icon-content-heart": LocalJSX.ScaleIconContentHeart & JSXBase.HTMLAttributes<HTMLScaleIconContentHeartElement>;
            "scale-icon-home-home": LocalJSX.ScaleIconHomeHome & JSXBase.HTMLAttributes<HTMLScaleIconHomeHomeElement>;
            "scale-icon-navigation-collapse-down": LocalJSX.ScaleIconNavigationCollapseDown & JSXBase.HTMLAttributes<HTMLScaleIconNavigationCollapseDownElement>;
            "scale-icon-navigation-collapse-up": LocalJSX.ScaleIconNavigationCollapseUp & JSXBase.HTMLAttributes<HTMLScaleIconNavigationCollapseUpElement>;
            "scale-icon-navigation-external-link": LocalJSX.ScaleIconNavigationExternalLink & JSXBase.HTMLAttributes<HTMLScaleIconNavigationExternalLinkElement>;
            "scale-icon-navigation-left": LocalJSX.ScaleIconNavigationLeft & JSXBase.HTMLAttributes<HTMLScaleIconNavigationLeftElement>;
            "scale-icon-navigation-right": LocalJSX.ScaleIconNavigationRight & JSXBase.HTMLAttributes<HTMLScaleIconNavigationRightElement>;
            "scale-icon-service-devices-service": LocalJSX.ScaleIconServiceDevicesService & JSXBase.HTMLAttributes<HTMLScaleIconServiceDevicesServiceElement>;
            "scale-icon-service-maintanance": LocalJSX.ScaleIconServiceMaintanance & JSXBase.HTMLAttributes<HTMLScaleIconServiceMaintananceElement>;
            "scale-icon-service-services": LocalJSX.ScaleIconServiceServices & JSXBase.HTMLAttributes<HTMLScaleIconServiceServicesElement>;
            "scale-icon-service-settings": LocalJSX.ScaleIconServiceSettings & JSXBase.HTMLAttributes<HTMLScaleIconServiceSettingsElement>;
            "scale-icon-service-support": LocalJSX.ScaleIconServiceSupport & JSXBase.HTMLAttributes<HTMLScaleIconServiceSupportElement>;
            "scale-icon-user-file-analytics": LocalJSX.ScaleIconUserFileAnalytics & JSXBase.HTMLAttributes<HTMLScaleIconUserFileAnalyticsElement>;
            "scale-input": LocalJSX.ScaleInput & JSXBase.HTMLAttributes<HTMLScaleInputElement>;
            "scale-link": LocalJSX.ScaleLink & JSXBase.HTMLAttributes<HTMLScaleLinkElement>;
            "scale-list": LocalJSX.ScaleList & JSXBase.HTMLAttributes<HTMLScaleListElement>;
            "scale-list-item": LocalJSX.ScaleListItem & JSXBase.HTMLAttributes<HTMLScaleListItemElement>;
            "scale-loading-spinner": LocalJSX.ScaleLoadingSpinner & JSXBase.HTMLAttributes<HTMLScaleLoadingSpinnerElement>;
            "scale-menu-flyout": LocalJSX.ScaleMenuFlyout & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutElement>;
            "scale-menu-flyout-divider": LocalJSX.ScaleMenuFlyoutDivider & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutDividerElement>;
            "scale-menu-flyout-item": LocalJSX.ScaleMenuFlyoutItem & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutItemElement>;
            "scale-menu-flyout-list": LocalJSX.ScaleMenuFlyoutList & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutListElement>;
            "scale-modal": LocalJSX.ScaleModal & JSXBase.HTMLAttributes<HTMLScaleModalElement>;
            "scale-notification-badge": LocalJSX.ScaleNotificationBadge & JSXBase.HTMLAttributes<HTMLScaleNotificationBadgeElement>;
            "scale-notification-banner": LocalJSX.ScaleNotificationBanner & JSXBase.HTMLAttributes<HTMLScaleNotificationBannerElement>;
            "scale-notification-message": LocalJSX.ScaleNotificationMessage & JSXBase.HTMLAttributes<HTMLScaleNotificationMessageElement>;
            "scale-notification-toast": LocalJSX.ScaleNotificationToast & JSXBase.HTMLAttributes<HTMLScaleNotificationToastElement>;
            "scale-pagination": LocalJSX.ScalePagination & JSXBase.HTMLAttributes<HTMLScalePaginationElement>;
            "scale-progress-bar": LocalJSX.ScaleProgressBar & JSXBase.HTMLAttributes<HTMLScaleProgressBarElement>;
            "scale-radio-button": LocalJSX.ScaleRadioButton & JSXBase.HTMLAttributes<HTMLScaleRadioButtonElement>;
            "scale-radio-button-group": LocalJSX.ScaleRadioButtonGroup & JSXBase.HTMLAttributes<HTMLScaleRadioButtonGroupElement>;
            "scale-rating-stars": LocalJSX.ScaleRatingStars & JSXBase.HTMLAttributes<HTMLScaleRatingStarsElement>;
            "scale-sidebar-nav": LocalJSX.ScaleSidebarNav & JSXBase.HTMLAttributes<HTMLScaleSidebarNavElement>;
            "scale-sidebar-nav-collapsible": LocalJSX.ScaleSidebarNavCollapsible & JSXBase.HTMLAttributes<HTMLScaleSidebarNavCollapsibleElement>;
            "scale-sidebar-nav-item": LocalJSX.ScaleSidebarNavItem & JSXBase.HTMLAttributes<HTMLScaleSidebarNavItemElement>;
            "scale-slider": LocalJSX.ScaleSlider & JSXBase.HTMLAttributes<HTMLScaleSliderElement>;
            "scale-ssr-slot-fix": LocalJSX.ScaleSsrSlotFix & JSXBase.HTMLAttributes<HTMLScaleSsrSlotFixElement>;
            "scale-switch": LocalJSX.ScaleSwitch & JSXBase.HTMLAttributes<HTMLScaleSwitchElement>;
            "scale-tab-header": LocalJSX.ScaleTabHeader & JSXBase.HTMLAttributes<HTMLScaleTabHeaderElement>;
            "scale-tab-nav": LocalJSX.ScaleTabNav & JSXBase.HTMLAttributes<HTMLScaleTabNavElement>;
            "scale-tab-panel": LocalJSX.ScaleTabPanel & JSXBase.HTMLAttributes<HTMLScaleTabPanelElement>;
            "scale-table": LocalJSX.ScaleTable & JSXBase.HTMLAttributes<HTMLScaleTableElement>;
            "scale-tag": LocalJSX.ScaleTag & JSXBase.HTMLAttributes<HTMLScaleTagElement>;
            "scale-text-field": LocalJSX.ScaleTextField & JSXBase.HTMLAttributes<HTMLScaleTextFieldElement>;
            "scale-textarea": LocalJSX.ScaleTextarea & JSXBase.HTMLAttributes<HTMLScaleTextareaElement>;
            "scale-toast": LocalJSX.ScaleToast & JSXBase.HTMLAttributes<HTMLScaleToastElement>;
            "scale-toggle-button": LocalJSX.ScaleToggleButton & JSXBase.HTMLAttributes<HTMLScaleToggleButtonElement>;
            "scale-toggle-group": LocalJSX.ScaleToggleGroup & JSXBase.HTMLAttributes<HTMLScaleToggleGroupElement>;
            "scale-tooltip": LocalJSX.ScaleTooltip & JSXBase.HTMLAttributes<HTMLScaleTooltipElement>;
        }
    }
}
